;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 07/06/2020 13:29:21
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF00AEF67  	GOTO        5326
_interrupt:
;compy.c,116 :: 		void interrupt() {
0x0008	0xF020C000  	MOVFF       R0, 32
0x000C	0xF01FC001  	MOVFF       R1, 31
0x0010	0xF01EC002  	MOVFF       R2, 30
0x0014	0xF01DC003  	MOVFF       R3, 29
0x0018	0xF01CC004  	MOVFF       R4, 28
0x001C	0xF01BC005  	MOVFF       R5, 27
0x0020	0xF01AC008  	MOVFF       R8, 26
0x0024	0xF019C009  	MOVFF       R9, 25
0x0028	0xF018C00A  	MOVFF       R10, 24
0x002C	0xF017C00B  	MOVFF       R11, 23
0x0030	0xF016C00C  	MOVFF       R12, 22
0x0034	0xF015C00D  	MOVFF       R13, 21
;compy.c,117 :: 		if(int0if_bit)
0x0038	0xF025CFE1  	MOVFF       FSR1L, 37
0x003C	0xF026CFE2  	MOVFF       FSR1H, 38
0x0040	0xF023CFE9  	MOVFF       FSR0L, 35
0x0044	0xF024CFEA  	MOVFF       FSR0H, 36
0x0048	0xF021CFF3  	MOVFF       PROD, 33
0x004C	0xF022CFF4  	MOVFF       PRODH, 34
0x0050	0xA2F2      	BTFSS       INT0IF_bit, 1 
0x0052	0xD13D      	BRA         L_interrupt0
;compy.c,119 :: 		cnt2++;
0x0054	0x4A58      	INFSNZ      _cnt2, 1 
0x0056	0x2A59      	INCF        _cnt2+1, 1 
;compy.c,120 :: 		if (cnt2 > 180) {
0x0058	0x0E80      	MOVLW       128
0x005A	0x6E00      	MOVWF       R0 
0x005C	0x0E80      	MOVLW       128
0x005E	0x1859      	XORWF       _cnt2+1, 0 
0x0060	0x5C00      	SUBWF       R0, 0 
0x0062	0xE102      	BNZ         L__interrupt143
0x0064	0x5058      	MOVF        _cnt2, 0 
0x0066	0x08B4      	SUBLW       180
L__interrupt143:
0x0068	0xE208      	BC          L_interrupt1
;compy.c,121 :: 		IS_FINISH = 1;
0x006A	0x0E01      	MOVLW       1
0x006C	0x6E3E      	MOVWF       _IS_FINISH 
0x006E	0x0E00      	MOVLW       0
0x0070	0x6E3F      	MOVWF       _IS_FINISH+1 
;compy.c,122 :: 		IS_GAME_OVER = 1;
0x0072	0x0E01      	MOVLW       1
0x0074	0x6E3C      	MOVWF       _IS_GAME_OVER 
0x0076	0x0E00      	MOVLW       0
0x0078	0x6E3D      	MOVWF       _IS_GAME_OVER+1 
;compy.c,123 :: 		}
L_interrupt1:
;compy.c,124 :: 		new_ghost_y = ghost_y;
0x007A	0xF056C048  	MOVFF       _ghost_y, _new_ghost_y
0x007E	0xF057C049  	MOVFF       _ghost_y+1, _new_ghost_y+1
;compy.c,125 :: 		new_ghost_x = ghost_x;
0x0082	0xF054C036  	MOVFF       _ghost_x, _new_ghost_x
0x0086	0xF055C037  	MOVFF       _ghost_x+1, _new_ghost_x+1
;compy.c,126 :: 		if (cnt2 % 6 == 0) {
0x008A	0x0E06      	MOVLW       6
0x008C	0x6E04      	MOVWF       R4 
0x008E	0x0E00      	MOVLW       0
0x0090	0x6E05      	MOVWF       R5 
0x0092	0xF000C058  	MOVFF       _cnt2, R0
0x0096	0xF001C059  	MOVFF       _cnt2+1, R1
0x009A	0xF005EC51  	CALL        _Div_16x16_S, 0
0x009E	0xF000C008  	MOVFF       R8, R0
0x00A2	0xF001C009  	MOVFF       R9, R1
0x00A6	0x0E00      	MOVLW       0
0x00A8	0x1801      	XORWF       R1, 0 
0x00AA	0xE102      	BNZ         L__interrupt144
0x00AC	0x0E00      	MOVLW       0
0x00AE	0x1800      	XORWF       R0, 0 
L__interrupt144:
0x00B0	0xA4D8      	BTFSS       STATUS, 2 
0x00B2	0xD10C      	BRA         L_interrupt2
;compy.c,127 :: 		if (pacman_y > ghost_y) {
0x00B4	0x0E80      	MOVLW       128
0x00B6	0x1849      	XORWF       _ghost_y+1, 0 
0x00B8	0x6E00      	MOVWF       R0 
0x00BA	0x0E80      	MOVLW       128
0x00BC	0x1861      	XORWF       _pacman_y+1, 0 
0x00BE	0x5C00      	SUBWF       R0, 0 
0x00C0	0xE102      	BNZ         L__interrupt145
0x00C2	0x5060      	MOVF        _pacman_y, 0 
0x00C4	0x5C48      	SUBWF       _ghost_y, 0 
L__interrupt145:
0x00C6	0xE207      	BC          L_interrupt3
;compy.c,128 :: 		new_ghost_y = (ghost_y + 1);
0x00C8	0x0E01      	MOVLW       1
0x00CA	0x2448      	ADDWF       _ghost_y, 0 
0x00CC	0x6E56      	MOVWF       _new_ghost_y 
0x00CE	0x0E00      	MOVLW       0
0x00D0	0x2049      	ADDWFC      _ghost_y+1, 0 
0x00D2	0x6E57      	MOVWF       _new_ghost_y+1 
;compy.c,129 :: 		} else if (pacman_y < ghost_y) {
0x00D4	0xD032      	BRA         L_interrupt4
L_interrupt3:
0x00D6	0x0E80      	MOVLW       128
0x00D8	0x1861      	XORWF       _pacman_y+1, 0 
0x00DA	0x6E00      	MOVWF       R0 
0x00DC	0x0E80      	MOVLW       128
0x00DE	0x1849      	XORWF       _ghost_y+1, 0 
0x00E0	0x5C00      	SUBWF       R0, 0 
0x00E2	0xE102      	BNZ         L__interrupt146
0x00E4	0x5048      	MOVF        _ghost_y, 0 
0x00E6	0x5C60      	SUBWF       _pacman_y, 0 
L__interrupt146:
0x00E8	0xE207      	BC          L_interrupt5
;compy.c,130 :: 		new_ghost_y = (ghost_y - 1);
0x00EA	0x0E01      	MOVLW       1
0x00EC	0x5C48      	SUBWF       _ghost_y, 0 
0x00EE	0x6E56      	MOVWF       _new_ghost_y 
0x00F0	0x0E00      	MOVLW       0
0x00F2	0x5849      	SUBWFB      _ghost_y+1, 0 
0x00F4	0x6E57      	MOVWF       _new_ghost_y+1 
;compy.c,131 :: 		} else {
0x00F6	0xD021      	BRA         L_interrupt6
L_interrupt5:
;compy.c,132 :: 		if (pacman_x > ghost_x) {
0x00F8	0x0E80      	MOVLW       128
0x00FA	0x1837      	XORWF       _ghost_x+1, 0 
0x00FC	0x6E00      	MOVWF       R0 
0x00FE	0x0E80      	MOVLW       128
0x0100	0x1851      	XORWF       _pacman_x+1, 0 
0x0102	0x5C00      	SUBWF       R0, 0 
0x0104	0xE102      	BNZ         L__interrupt147
0x0106	0x5050      	MOVF        _pacman_x, 0 
0x0108	0x5C36      	SUBWF       _ghost_x, 0 
L__interrupt147:
0x010A	0xE207      	BC          L_interrupt7
;compy.c,133 :: 		new_ghost_x = (ghost_x + 1);
0x010C	0x0E01      	MOVLW       1
0x010E	0x2436      	ADDWF       _ghost_x, 0 
0x0110	0x6E54      	MOVWF       _new_ghost_x 
0x0112	0x0E00      	MOVLW       0
0x0114	0x2037      	ADDWFC      _ghost_x+1, 0 
0x0116	0x6E55      	MOVWF       _new_ghost_x+1 
;compy.c,135 :: 		} else if (pacman_x < ghost_x) {
0x0118	0xD010      	BRA         L_interrupt8
L_interrupt7:
0x011A	0x0E80      	MOVLW       128
0x011C	0x1851      	XORWF       _pacman_x+1, 0 
0x011E	0x6E00      	MOVWF       R0 
0x0120	0x0E80      	MOVLW       128
0x0122	0x1837      	XORWF       _ghost_x+1, 0 
0x0124	0x5C00      	SUBWF       R0, 0 
0x0126	0xE102      	BNZ         L__interrupt148
0x0128	0x5036      	MOVF        _ghost_x, 0 
0x012A	0x5C50      	SUBWF       _pacman_x, 0 
L__interrupt148:
0x012C	0xE206      	BC          L_interrupt9
;compy.c,136 :: 		new_ghost_x = (ghost_x - 1);
0x012E	0x0E01      	MOVLW       1
0x0130	0x5C36      	SUBWF       _ghost_x, 0 
0x0132	0x6E54      	MOVWF       _new_ghost_x 
0x0134	0x0E00      	MOVLW       0
0x0136	0x5837      	SUBWFB      _ghost_x+1, 0 
0x0138	0x6E55      	MOVWF       _new_ghost_x+1 
;compy.c,137 :: 		}
L_interrupt9:
L_interrupt8:
;compy.c,138 :: 		}
L_interrupt6:
L_interrupt4:
;compy.c,139 :: 		if (world[new_ghost_x][new_ghost_x] == barrier_orientation) {
0x013A	0xF000C054  	MOVFF       _new_ghost_x, R0
0x013E	0xF001C055  	MOVFF       _new_ghost_x+1, R1
0x0142	0x0E1E      	MOVLW       30
0x0144	0x6E04      	MOVWF       R4 
0x0146	0x0E00      	MOVLW       0
0x0148	0x6E05      	MOVWF       R5 
0x014A	0xD946      	RCALL       _Mul_16x16_U
0x014C	0x0E89      	MOVLW       _world
0x014E	0x2400      	ADDWF       R0, 0 
0x0150	0x6E03      	MOVWF       R3 
0x0152	0x0E00      	MOVLW       hi_addr(_world)
0x0154	0x2001      	ADDWFC      R1, 0 
0x0156	0x6E04      	MOVWF       R4 
0x0158	0xF000C054  	MOVFF       _new_ghost_x, R0
0x015C	0xF001C055  	MOVFF       _new_ghost_x+1, R1
0x0160	0x3600      	RLCF        R0, 1 
0x0162	0x9000      	BCF         R0, 0 
0x0164	0x3601      	RLCF        R1, 1 
0x0166	0x5000      	MOVF        R0, 0 
0x0168	0x2403      	ADDWF       R3, 0 
0x016A	0x6EE9      	MOVWF       FSR0L 
0x016C	0x5001      	MOVF        R1, 0 
0x016E	0x2004      	ADDWFC      R4, 0 
0x0170	0x6EEA      	MOVWF       FSR0H 
0x0172	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0176	0xF002CFEE  	MOVFF       POSTINC0, R2
0x017A	0x0E00      	MOVLW       0
0x017C	0x1802      	XORWF       R2, 0 
0x017E	0xE102      	BNZ         L__interrupt149
0x0180	0x505E      	MOVF        _barrier_orientation, 0 
0x0182	0x1801      	XORWF       R1, 0 
L__interrupt149:
0x0184	0xE102      	BNZ         L_interrupt10
;compy.c,140 :: 		new_ghost_x = new_ghost_x + 1;
0x0186	0x4A54      	INFSNZ      _new_ghost_x, 1 
0x0188	0x2A55      	INCF        _new_ghost_x+1, 1 
;compy.c,141 :: 		}
L_interrupt10:
;compy.c,142 :: 		world[ghost_x][ghost_y] = old_ghost_obj != 0 ? old_ghost_obj : ' ';
0x018A	0xF000C036  	MOVFF       _ghost_x, R0
0x018E	0xF001C037  	MOVFF       _ghost_x+1, R1
0x0192	0x0E1E      	MOVLW       30
0x0194	0x6E04      	MOVWF       R4 
0x0196	0x0E00      	MOVLW       0
0x0198	0x6E05      	MOVWF       R5 
0x019A	0xD91E      	RCALL       _Mul_16x16_U
0x019C	0x0E89      	MOVLW       _world
0x019E	0x2400      	ADDWF       R0, 0 
0x01A0	0x6E04      	MOVWF       R4 
0x01A2	0x0E00      	MOVLW       hi_addr(_world)
0x01A4	0x2001      	ADDWFC      R1, 0 
0x01A6	0x6E05      	MOVWF       R5 
0x01A8	0xF000C048  	MOVFF       _ghost_y, R0
0x01AC	0xF001C049  	MOVFF       _ghost_y+1, R1
0x01B0	0x3600      	RLCF        R0, 1 
0x01B2	0x9000      	BCF         R0, 0 
0x01B4	0x3601      	RLCF        R1, 1 
0x01B6	0x5000      	MOVF        R0, 0 
0x01B8	0x2404      	ADDWF       R4, 0 
0x01BA	0x6E02      	MOVWF       R2 
0x01BC	0x5001      	MOVF        R1, 0 
0x01BE	0x2005      	ADDWFC      R5, 0 
0x01C0	0x6E03      	MOVWF       R3 
0x01C2	0x504D      	MOVF        _old_ghost_obj, 0 
0x01C4	0x0A00      	XORLW       0
0x01C6	0xE003      	BZ          L_interrupt11
0x01C8	0xF000C04D  	MOVFF       _old_ghost_obj, R0
0x01CC	0xD002      	BRA         L_interrupt12
L_interrupt11:
0x01CE	0x0E20      	MOVLW       32
0x01D0	0x6E00      	MOVWF       R0 
L_interrupt12:
0x01D2	0xFFE1C002  	MOVFF       R2, FSR1L
0x01D6	0xFFE2C003  	MOVFF       R3, FSR1H
0x01DA	0xFFE6C000  	MOVFF       R0, POSTINC1
0x01DE	0x0E00      	MOVLW       0
0x01E0	0x6EE6      	MOVWF       POSTINC1 
;compy.c,143 :: 		old_ghost_obj = world[ghost_x][ghost_x] != ghost_orientation ? world[new_ghost_x][new_ghost_y] : ' ';
0x01E2	0xF000C036  	MOVFF       _ghost_x, R0
0x01E6	0xF001C037  	MOVFF       _ghost_x+1, R1
0x01EA	0x0E1E      	MOVLW       30
0x01EC	0x6E04      	MOVWF       R4 
0x01EE	0x0E00      	MOVLW       0
0x01F0	0x6E05      	MOVWF       R5 
0x01F2	0xD8F2      	RCALL       _Mul_16x16_U
0x01F4	0x0E89      	MOVLW       _world
0x01F6	0x2400      	ADDWF       R0, 0 
0x01F8	0x6E03      	MOVWF       R3 
0x01FA	0x0E00      	MOVLW       hi_addr(_world)
0x01FC	0x2001      	ADDWFC      R1, 0 
0x01FE	0x6E04      	MOVWF       R4 
0x0200	0xF000C036  	MOVFF       _ghost_x, R0
0x0204	0xF001C037  	MOVFF       _ghost_x+1, R1
0x0208	0x3600      	RLCF        R0, 1 
0x020A	0x9000      	BCF         R0, 0 
0x020C	0x3601      	RLCF        R1, 1 
0x020E	0x5000      	MOVF        R0, 0 
0x0210	0x2403      	ADDWF       R3, 0 
0x0212	0x6EE9      	MOVWF       FSR0L 
0x0214	0x5001      	MOVF        R1, 0 
0x0216	0x2004      	ADDWFC      R4, 0 
0x0218	0x6EEA      	MOVWF       FSR0H 
0x021A	0xF001CFEE  	MOVFF       POSTINC0, R1
0x021E	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0222	0x0E00      	MOVLW       0
0x0224	0x1802      	XORWF       R2, 0 
0x0226	0xE102      	BNZ         L__interrupt150
0x0228	0x503A      	MOVF        _ghost_orientation, 0 
0x022A	0x1801      	XORWF       R1, 0 
L__interrupt150:
0x022C	0xE021      	BZ          L_interrupt13
0x022E	0xF000C054  	MOVFF       _new_ghost_x, R0
0x0232	0xF001C055  	MOVFF       _new_ghost_x+1, R1
0x0236	0x0E1E      	MOVLW       30
0x0238	0x6E04      	MOVWF       R4 
0x023A	0x0E00      	MOVLW       0
0x023C	0x6E05      	MOVWF       R5 
0x023E	0xD8CC      	RCALL       _Mul_16x16_U
0x0240	0x0E89      	MOVLW       _world
0x0242	0x2400      	ADDWF       R0, 0 
0x0244	0x6E03      	MOVWF       R3 
0x0246	0x0E00      	MOVLW       hi_addr(_world)
0x0248	0x2001      	ADDWFC      R1, 0 
0x024A	0x6E04      	MOVWF       R4 
0x024C	0xF000C056  	MOVFF       _new_ghost_y, R0
0x0250	0xF001C057  	MOVFF       _new_ghost_y+1, R1
0x0254	0x3600      	RLCF        R0, 1 
0x0256	0x9000      	BCF         R0, 0 
0x0258	0x3601      	RLCF        R1, 1 
0x025A	0x5000      	MOVF        R0, 0 
0x025C	0x2403      	ADDWF       R3, 0 
0x025E	0x6EE9      	MOVWF       FSR0L 
0x0260	0x5001      	MOVF        R1, 0 
0x0262	0x2004      	ADDWFC      R4, 0 
0x0264	0x6EEA      	MOVWF       FSR0H 
0x0266	0xF000CFEE  	MOVFF       POSTINC0, R0
0x026A	0xF001CFEE  	MOVFF       POSTINC0, R1
0x026E	0xD004      	BRA         L_interrupt14
L_interrupt13:
0x0270	0x0E20      	MOVLW       32
0x0272	0x6E00      	MOVWF       R0 
0x0274	0x0E00      	MOVLW       0
0x0276	0x6E01      	MOVWF       R1 
L_interrupt14:
0x0278	0xF04DC000  	MOVFF       R0, _old_ghost_obj
;compy.c,144 :: 		world[new_ghost_x][new_ghost_y] = ghost_orientation;
0x027C	0xF000C054  	MOVFF       _new_ghost_x, R0
0x0280	0xF001C055  	MOVFF       _new_ghost_x+1, R1
0x0284	0x0E1E      	MOVLW       30
0x0286	0x6E04      	MOVWF       R4 
0x0288	0x0E00      	MOVLW       0
0x028A	0x6E05      	MOVWF       R5 
0x028C	0xD8A5      	RCALL       _Mul_16x16_U
0x028E	0x0E89      	MOVLW       _world
0x0290	0x2400      	ADDWF       R0, 0 
0x0292	0x6E03      	MOVWF       R3 
0x0294	0x0E00      	MOVLW       hi_addr(_world)
0x0296	0x2001      	ADDWFC      R1, 0 
0x0298	0x6E04      	MOVWF       R4 
0x029A	0xF000C056  	MOVFF       _new_ghost_y, R0
0x029E	0xF001C057  	MOVFF       _new_ghost_y+1, R1
0x02A2	0x3600      	RLCF        R0, 1 
0x02A4	0x9000      	BCF         R0, 0 
0x02A6	0x3601      	RLCF        R1, 1 
0x02A8	0x5000      	MOVF        R0, 0 
0x02AA	0x2403      	ADDWF       R3, 0 
0x02AC	0x6EE1      	MOVWF       FSR1L 
0x02AE	0x5001      	MOVF        R1, 0 
0x02B0	0x2004      	ADDWFC      R4, 0 
0x02B2	0x6EE2      	MOVWF       FSR1H 
0x02B4	0xFFE6C03A  	MOVFF       _ghost_orientation, POSTINC1
0x02B8	0x0E00      	MOVLW       0
0x02BA	0x6EE6      	MOVWF       POSTINC1 
;compy.c,146 :: 		ghost_y = new_ghost_y;
0x02BC	0xF048C056  	MOVFF       _new_ghost_y, _ghost_y
0x02C0	0xF049C057  	MOVFF       _new_ghost_y+1, _ghost_y+1
;compy.c,147 :: 		ghost_x = new_ghost_x;
0x02C4	0xF036C054  	MOVFF       _new_ghost_x, _ghost_x
0x02C8	0xF037C055  	MOVFF       _new_ghost_x+1, _ghost_x+1
;compy.c,148 :: 		}
L_interrupt2:
;compy.c,149 :: 		int0if_bit=0;   // clear int0if_bit
0x02CC	0x92F2      	BCF         INT0IF_bit, 1 
;compy.c,150 :: 		}
L_interrupt0:
;compy.c,152 :: 		if (TMR2IF_bit) {
0x02CE	0xA29E      	BTFSS       TMR2IF_bit, 1 
0x02D0	0xD010      	BRA         L_interrupt15
;compy.c,153 :: 		cnt++;
0x02D2	0x4A52      	INFSNZ      _cnt, 1 
0x02D4	0x2A53      	INCF        _cnt+1, 1 
;compy.c,154 :: 		if (cnt >= 1000) {
0x02D6	0x0E80      	MOVLW       128
0x02D8	0x1853      	XORWF       _cnt+1, 0 
0x02DA	0x6E00      	MOVWF       R0 
0x02DC	0x0E80      	MOVLW       128
0x02DE	0x0A03      	XORLW       3
0x02E0	0x5C00      	SUBWF       R0, 0 
0x02E2	0xE102      	BNZ         L__interrupt151
0x02E4	0x0EE8      	MOVLW       232
0x02E6	0x5C52      	SUBWF       _cnt, 0 
L__interrupt151:
0x02E8	0xE303      	BNC         L_interrupt16
;compy.c,155 :: 		PORTA.F1 = ~PORTA.F1;
0x02EA	0x7280      	BTG         PORTA, 1 
;compy.c,156 :: 		cnt = 0;
0x02EC	0x6A52      	CLRF        _cnt 
0x02EE	0x6A53      	CLRF        _cnt+1 
;compy.c,157 :: 		}
L_interrupt16:
;compy.c,158 :: 		TMR2IF_bit = 0;        // clear TMR2IF
0x02F0	0x929E      	BCF         TMR2IF_bit, 1 
;compy.c,159 :: 		}
L_interrupt15:
;compy.c,160 :: 		}
L__interrupt142:
0x02F2	0xFFF3C021  	MOVFF       33, PROD
0x02F6	0xFFF4C022  	MOVFF       34, PRODH
0x02FA	0xF000C020  	MOVFF       32, R0
0x02FE	0xF001C01F  	MOVFF       31, R1
0x0302	0xF002C01E  	MOVFF       30, R2
0x0306	0xF003C01D  	MOVFF       29, R3
0x030A	0xF004C01C  	MOVFF       28, R4
0x030E	0xF005C01B  	MOVFF       27, R5
0x0312	0xF008C01A  	MOVFF       26, R8
0x0316	0xF009C019  	MOVFF       25, R9
0x031A	0xF00AC018  	MOVFF       24, R10
0x031E	0xF00BC017  	MOVFF       23, R11
0x0322	0xF00CC016  	MOVFF       22, R12
0x0326	0xF00DC015  	MOVFF       21, R13
0x032A	0xFFE9C023  	MOVFF       35, FSR0L
0x032E	0xFFEAC024  	MOVFF       36, FSR0H
0x0332	0xFFE1C025  	MOVFF       37, FSR1L
0x0336	0xFFE2C026  	MOVFF       38, FSR1H
0x033A	0x0011      	RETFIE      1
; end of _interrupt
_T6963C_waitReady:
;__Lib_T6963C.c,60 :: 		
;__Lib_T6963C.c,62 :: 		
0x033C	0x8082      	BSF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,66 :: 		
0x033E	0x0EFF      	MOVLW       255
0x0340	0x6E95      	MOVWF       T6963C_dataPort+18 
;__Lib_T6963C.c,68 :: 		
0x0342	0x9282      	BCF         T6963C_ctrlrd, BitPos(T6963C_ctrlrd+0) 
;__Lib_T6963C.c,70 :: 		
L_T6963C_waitReady0:
0x0344	0x0E03      	MOVLW       3
0x0346	0x1483      	ANDWF       T6963C_dataPort, 0 
0x0348	0x6E01      	MOVWF       R1 
;__Lib_T6963C.c,71 :: 		
0x034A	0x5001      	MOVF        R1, 0 
0x034C	0x0A03      	XORLW       3
0x034E	0xE001      	BZ          L_T6963C_waitReady1
;__Lib_T6963C.c,72 :: 		
0x0350	0xD7F9      	BRA         L_T6963C_waitReady0
L_T6963C_waitReady1:
;__Lib_T6963C.c,73 :: 		
0x0352	0x8282      	BSF         T6963C_ctrlrd, BitPos(T6963C_ctrlrd+0) 
;__Lib_T6963C.c,74 :: 		
0x0354	0x0012      	RETURN      0
; end of _T6963C_waitReady
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x0356	0x0000      	NOP
0x0358	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
0x035A	0x0012      	RETURN      0
; end of _Delay_1us
_T6963C_writeData:
;__Lib_T6963C.c,79 :: 		
;__Lib_T6963C.c,81 :: 		
0x035C	0x9082      	BCF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,84 :: 		
0x035E	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,85 :: 		
0x0360	0xFF83C199  	MOVFF       FARG_T6963C_writeData_mydata, T6963C_dataPort
;__Lib_T6963C.c,86 :: 		
0x0364	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,87 :: 		
0x0366	0xDFF7      	RCALL       _Delay_1us
0x0368	0xDFF6      	RCALL       _Delay_1us
0x036A	0xDFF5      	RCALL       _Delay_1us
;__Lib_T6963C.c,91 :: 		
0x036C	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,92 :: 		
0x036E	0x0012      	RETURN      0
; end of _T6963C_writeData
_T6963C_writeCommand:
;__Lib_T6963C.c,97 :: 		
;__Lib_T6963C.c,99 :: 		
0x0370	0xDFE5      	RCALL       _T6963C_waitReady
;__Lib_T6963C.c,102 :: 		
0x0372	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,103 :: 		
0x0374	0xFF83C199  	MOVFF       FARG_T6963C_writeCommand_mydata, T6963C_dataPort
;__Lib_T6963C.c,104 :: 		
0x0378	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,105 :: 		
0x037A	0xDFED      	RCALL       _Delay_1us
0x037C	0xDFEC      	RCALL       _Delay_1us
0x037E	0xDFEB      	RCALL       _Delay_1us
;__Lib_T6963C.c,107 :: 		
0x0380	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,108 :: 		
0x0382	0x0012      	RETURN      0
; end of _T6963C_writeCommand
_T6963C_setPtr:
;__Lib_T6963C.c,420 :: 		
;__Lib_T6963C.c,425 :: 		
0x0384	0xF000C197  	MOVFF       FARG_T6963C_setPtr_p+1, R0
0x0388	0x6A01      	CLRF        R1 
0x038A	0xF080C000  	MOVFF       R0, T6963C_setPtr_addrH_L0
;__Lib_T6963C.c,426 :: 		
0x038E	0xF199C196  	MOVFF       FARG_T6963C_setPtr_p, FARG_T6963C_writeData_mydata
0x0392	0xDFE4      	RCALL       _T6963C_writeData
;__Lib_T6963C.c,427 :: 		
0x0394	0xF199C080  	MOVFF       T6963C_setPtr_addrH_L0, FARG_T6963C_writeData_mydata
0x0398	0xDFE1      	RCALL       _T6963C_writeData
;__Lib_T6963C.c,428 :: 		
0x039A	0xF199C198  	MOVFF       FARG_T6963C_setPtr_c, FARG_T6963C_writeCommand_mydata
0x039E	0xDFE8      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,429 :: 		
0x03A0	0x0012      	RETURN      0
; end of _T6963C_setPtr
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x03A2	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x03A4	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x03A6	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x03A8	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x03AA	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x03AC	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x03AE	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x03B0	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x03B2	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x03B4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x03B6	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x03B8	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x03BA	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x03BC	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x03BE	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x03C0	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x03C2	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x03C4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x03C6	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x03C8	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x03CA	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x03CC	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x03CE	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x03D0	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x03D2	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x03D4	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
0x03D6	0x0012      	RETURN      0
; end of _Div_16x16_U
_Mul_16x16_U:
;__Lib_Math.c,437 :: 		
;__Lib_Math.c,444 :: 		
0x03D8	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,445 :: 		
0x03DA	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,446 :: 		
0x03DC	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,447 :: 		
0x03DE	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,448 :: 		
0x03E0	0x0204      	MULWF       R4, 0
;__Lib_Math.c,450 :: 		
0x03E2	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,451 :: 		
0x03E6	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,452 :: 		
0x03EA	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,453 :: 		
0x03EC	0x0205      	MULWF       R5, 0
;__Lib_Math.c,455 :: 		
0x03EE	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,456 :: 		
0x03F2	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,457 :: 		
0x03F6	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,458 :: 		
0x03F8	0x0205      	MULWF       R5, 0
;__Lib_Math.c,460 :: 		
0x03FA	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,461 :: 		
0x03FC	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,462 :: 		
0x03FE	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,463 :: 		
0x0400	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,464 :: 		
0x0402	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,465 :: 		
0x0404	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,466 :: 		
0x0406	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,467 :: 		
0x0408	0x0204      	MULWF       R4, 0
;__Lib_Math.c,469 :: 		
0x040A	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,470 :: 		
0x040C	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,471 :: 		
0x040E	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,472 :: 		
0x0410	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,473 :: 		
0x0412	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,474 :: 		
0x0414	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,476 :: 		
0x0416	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,477 :: 		
0x041A	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,478 :: 		
0x041E	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,479 :: 		
0x0422	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,482 :: 		
0x0426	0x0012      	RETURN      0
; end of _Mul_16x16_U
_T6963C_sprite:
;__Lib_T6963C.c,184 :: 		
;__Lib_T6963C.c,190 :: 		
0x0428	0x0101      	MOVLB       1
0x042A	0x6B94      	CLRF        T6963C_sprite_addr_L0, 1
0x042C	0x6B95      	CLRF        T6963C_sprite_addr_L0+1, 1
;__Lib_T6963C.c,192 :: 		
0x042E	0xF004C072  	MOVFF       _T6963C_fontWidth, R4
0x0432	0xF005C073  	MOVFF       _T6963C_fontWidth+1, R5
0x0436	0xF000C189  	MOVFF       FARG_T6963C_sprite_px, R0
0x043A	0x0E00      	MOVLW       0
0x043C	0x6E01      	MOVWF       R1 
0x043E	0xDFB1      	RCALL       _Div_16x16_U
0x0440	0xF190C000  	MOVFF       R0, T6963C_sprite_cx_L0
0x0444	0xF191C001  	MOVFF       R1, T6963C_sprite_cx_L0+1
;__Lib_T6963C.c,193 :: 		
0x0448	0xF000C18A  	MOVFF       FARG_T6963C_sprite_py, R0
0x044C	0x0E00      	MOVLW       0
0x044E	0x6E01      	MOVWF       R1 
0x0450	0xF004C07C  	MOVFF       _T6963C_txtCols, R4
0x0454	0xF005C07D  	MOVFF       _T6963C_txtCols+1, R5
0x0458	0xDFBF      	RCALL       _Mul_16x16_U
0x045A	0x5190      	MOVF        T6963C_sprite_cx_L0, 0, 1
0x045C	0x2400      	ADDWF       R0, 0 
0x045E	0x6F94      	MOVWF       T6963C_sprite_addr_L0, 1
0x0460	0x5191      	MOVF        T6963C_sprite_cx_L0+1, 0, 1
0x0462	0x2001      	ADDWFC      R1, 0 
0x0464	0x6F95      	MOVWF       T6963C_sprite_addr_L0+1, 1
0x0466	0x5068      	MOVF        _T6963C_grHomeAddr, 0 
0x0468	0x2794      	ADDWF       T6963C_sprite_addr_L0, 1, 1
0x046A	0x5069      	MOVF        _T6963C_grHomeAddr+1, 0 
0x046C	0x2395      	ADDWFC      T6963C_sprite_addr_L0+1, 1, 1
;__Lib_T6963C.c,198 :: 		
0x046E	0x0E07      	MOVLW       7
0x0470	0x158E      	ANDWF       FARG_T6963C_sprite_sx, 0, 1
0x0472	0x6E01      	MOVWF       R1 
0x0474	0x5001      	MOVF        R1, 0 
0x0476	0x0800      	SUBLW       0
0x0478	0xE20D      	BC          L_T6963C_sprite6
;__Lib_T6963C.c,200 :: 		
0x047A	0x338E      	RRCF        FARG_T6963C_sprite_sx, 1, 1
0x047C	0x9F8E      	BCF         FARG_T6963C_sprite_sx, 7, 1
0x047E	0x338E      	RRCF        FARG_T6963C_sprite_sx, 1, 1
0x0480	0x9F8E      	BCF         FARG_T6963C_sprite_sx, 7, 1
0x0482	0x338E      	RRCF        FARG_T6963C_sprite_sx, 1, 1
0x0484	0x9F8E      	BCF         FARG_T6963C_sprite_sx, 7, 1
;__Lib_T6963C.c,201 :: 		
0x0486	0x2B8E      	INCF        FARG_T6963C_sprite_sx, 1, 1
;__Lib_T6963C.c,202 :: 		
0x0488	0x378E      	RLCF        FARG_T6963C_sprite_sx, 1, 1
0x048A	0x918E      	BCF         FARG_T6963C_sprite_sx, 0, 1
0x048C	0x378E      	RLCF        FARG_T6963C_sprite_sx, 1, 1
0x048E	0x918E      	BCF         FARG_T6963C_sprite_sx, 0, 1
0x0490	0x378E      	RLCF        FARG_T6963C_sprite_sx, 1, 1
0x0492	0x918E      	BCF         FARG_T6963C_sprite_sx, 0, 1
;__Lib_T6963C.c,203 :: 		
L_T6963C_sprite6:
;__Lib_T6963C.c,208 :: 		
L_T6963C_sprite7:
0x0494	0xF000C18F  	MOVFF       FARG_T6963C_sprite_sy, R0
0x0498	0x078F      	DECF        FARG_T6963C_sprite_sy, 1, 1
0x049A	0x5200      	MOVF        R0, 1 
0x049C	0xE040      	BZ          L_T6963C_sprite8
;__Lib_T6963C.c,210 :: 		
0x049E	0xDF4E      	RCALL       _T6963C_waitReady
;__Lib_T6963C.c,212 :: 		
0x04A0	0xF196C194  	MOVFF       T6963C_sprite_addr_L0, FARG_T6963C_setPtr_p
0x04A4	0xF197C195  	MOVFF       T6963C_sprite_addr_L0+1, FARG_T6963C_setPtr_p+1
0x04A8	0x0E24      	MOVLW       36
0x04AA	0x0101      	MOVLB       1
0x04AC	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x04AE	0xDF6A      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,214 :: 		
0x04B0	0x0EB0      	MOVLW       176
0x04B2	0x0101      	MOVLB       1
0x04B4	0x6F99      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x04B6	0xDF5C      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,216 :: 		
0x04B8	0x9082      	BCF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,220 :: 		
0x04BA	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,225 :: 		
0x04BC	0x0101      	MOVLB       1
0x04BE	0x6B92      	CLRF        T6963C_sprite_i_L0, 1
0x04C0	0x6B93      	CLRF        T6963C_sprite_i_L0+1, 1
L_T6963C_sprite9:
0x04C2	0xF004C072  	MOVFF       _T6963C_fontWidth, R4
0x04C6	0xF005C073  	MOVFF       _T6963C_fontWidth+1, R5
0x04CA	0xF000C18E  	MOVFF       FARG_T6963C_sprite_sx, R0
0x04CE	0x0E00      	MOVLW       0
0x04D0	0x6E01      	MOVWF       R1 
0x04D2	0xDF67      	RCALL       _Div_16x16_U
0x04D4	0x5001      	MOVF        R1, 0 
0x04D6	0x5D93      	SUBWF       T6963C_sprite_i_L0+1, 0, 1
0x04D8	0xE102      	BNZ         L__T6963C_sprite38
0x04DA	0x5000      	MOVF        R0, 0 
0x04DC	0x5D92      	SUBWF       T6963C_sprite_i_L0, 0, 1
L__T6963C_sprite38:
0x04DE	0xE216      	BC          L_T6963C_sprite10
;__Lib_T6963C.c,227 :: 		
0x04E0	0xFFF6C18B  	MOVFF       FARG_T6963C_sprite_pic, 4086
0x04E4	0xFFF7C18C  	MOVFF       FARG_T6963C_sprite_pic+1, TBLPTRH
0x04E8	0xFFF8C18D  	MOVFF       FARG_T6963C_sprite_pic+2, TBLPTRU
0x04EC	0x0009      	TBLRD*+
0x04EE	0xFF83CFF5  	MOVFF       TABLAT, T6963C_dataPort
0x04F2	0x0E01      	MOVLW       1
0x04F4	0x278B      	ADDWF       FARG_T6963C_sprite_pic, 1, 1
0x04F6	0x0E00      	MOVLW       0
0x04F8	0x238C      	ADDWFC      FARG_T6963C_sprite_pic+1, 1, 1
0x04FA	0x238D      	ADDWFC      FARG_T6963C_sprite_pic+2, 1, 1
;__Lib_T6963C.c,228 :: 		
0x04FC	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,229 :: 		
0x04FE	0xDF2B      	RCALL       _Delay_1us
0x0500	0xDF2A      	RCALL       _Delay_1us
0x0502	0xDF29      	RCALL       _Delay_1us
;__Lib_T6963C.c,230 :: 		
0x0504	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,225 :: 		
0x0506	0x4B92      	INFSNZ      T6963C_sprite_i_L0, 1, 1
0x0508	0x2B93      	INCF        T6963C_sprite_i_L0+1, 1, 1
;__Lib_T6963C.c,231 :: 		
0x050A	0xD7DB      	BRA         L_T6963C_sprite9
L_T6963C_sprite10:
;__Lib_T6963C.c,233 :: 		
0x050C	0x0EB2      	MOVLW       178
0x050E	0x6F99      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x0510	0xDF2F      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,235 :: 		
0x0512	0x507C      	MOVF        _T6963C_txtCols, 0 
0x0514	0x0101      	MOVLB       1
0x0516	0x2794      	ADDWF       T6963C_sprite_addr_L0, 1, 1
0x0518	0x507D      	MOVF        _T6963C_txtCols+1, 0 
0x051A	0x2395      	ADDWFC      T6963C_sprite_addr_L0+1, 1, 1
;__Lib_T6963C.c,236 :: 		
0x051C	0xD7BB      	BRA         L_T6963C_sprite7
L_T6963C_sprite8:
;__Lib_T6963C.c,237 :: 		
0x051E	0x0012      	RETURN      0
; end of _T6963C_sprite
_T6963C_write_text:
;__Lib_T6963C.c,275 :: 		
;__Lib_T6963C.c,279 :: 		
0x0520	0xF199C188  	MOVFF       FARG_T6963C_write_text_mode, FARG_T6963C_writeCommand_mydata
0x0524	0xDF25      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,281 :: 		
0x0526	0xF000C187  	MOVFF       FARG_T6963C_write_text_y, R0
0x052A	0x0E00      	MOVLW       0
0x052C	0x6E01      	MOVWF       R1 
0x052E	0xF004C07C  	MOVFF       _T6963C_txtCols, R4
0x0532	0xF005C07D  	MOVFF       _T6963C_txtCols+1, R5
0x0536	0xDF50      	RCALL       _Mul_16x16_U
0x0538	0x0101      	MOVLB       1
0x053A	0x5186      	MOVF        FARG_T6963C_write_text_x, 0, 1
0x053C	0x2400      	ADDWF       R0, 0 
0x053E	0x6F96      	MOVWF       FARG_T6963C_setPtr_p, 1
0x0540	0x0E00      	MOVLW       0
0x0542	0x2001      	ADDWFC      R1, 0 
0x0544	0x6F97      	MOVWF       FARG_T6963C_setPtr_p+1, 1
0x0546	0x506A      	MOVF        _T6963C_textHomeAddr, 0 
0x0548	0x2796      	ADDWF       FARG_T6963C_setPtr_p, 1, 1
0x054A	0x506B      	MOVF        _T6963C_textHomeAddr+1, 0 
0x054C	0x2397      	ADDWFC      FARG_T6963C_setPtr_p+1, 1, 1
;__Lib_T6963C.c,283 :: 		
0x054E	0x0E24      	MOVLW       36
0x0550	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x0552	0xDF18      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,285 :: 		
L_T6963C_write_text12:
0x0554	0xFFE9C184  	MOVFF       FARG_T6963C_write_text_str, FSR0L
0x0558	0xFFEAC185  	MOVFF       FARG_T6963C_write_text_str+1, FSR0H
0x055C	0x52EE      	MOVF        POSTINC0, 1 
0x055E	0xE00F      	BZ          L_T6963C_write_text13
;__Lib_T6963C.c,287 :: 		
0x0560	0xFFE9C184  	MOVFF       FARG_T6963C_write_text_str, FSR0L
0x0564	0xFFEAC185  	MOVFF       FARG_T6963C_write_text_str+1, FSR0H
0x0568	0x0E20      	MOVLW       32
0x056A	0x5CEE      	SUBWF       POSTINC0, 0 
0x056C	0x0101      	MOVLB       1
0x056E	0x6F99      	MOVWF       FARG_T6963C_writeData_mydata, 1
0x0570	0xDEF5      	RCALL       _T6963C_writeData
0x0572	0x4B84      	INFSNZ      FARG_T6963C_write_text_str, 1, 1
0x0574	0x2B85      	INCF        FARG_T6963C_write_text_str+1, 1, 1
;__Lib_T6963C.c,288 :: 		
0x0576	0x0EC0      	MOVLW       192
0x0578	0x6F99      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x057A	0xDEFA      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,289 :: 		
0x057C	0xD7EB      	BRA         L_T6963C_write_text12
L_T6963C_write_text13:
;__Lib_T6963C.c,290 :: 		
0x057E	0x0012      	RETURN      0
; end of _T6963C_write_text
_Mul_32x32_U:
;__Lib_Math.c,1613 :: 		
;__Lib_Math.c,1628 :: 		
0x0580	0x0E22      	MOVLW       34
;__Lib_Math.c,1629 :: 		
0x0582	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,1630 :: 		
0x0584	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,1631 :: 		
0x0586	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,1632 :: 		
0x0588	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,1633 :: 		
0x058A	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,1635 :: 		
_NEXT:
;__Lib_Math.c,1639 :: 		
0x058C	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1640 :: 		
0x058E	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1641 :: 		
0x0590	0xD01F      	BRA         _EXIT2
;__Lib_Math.c,1642 :: 		
0x0592	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,1644 :: 		
_LOOP:
;__Lib_Math.c,1653 :: 		
0x0594	0x320B      	RRCF        R11, 1, 0
;__Lib_Math.c,1654 :: 		
0x0596	0x320A      	RRCF        R10, 1, 0
;__Lib_Math.c,1655 :: 		
0x0598	0x3209      	RRCF        R9, 1, 0
;__Lib_Math.c,1656 :: 		
0x059A	0x3208      	RRCF        R8, 1, 0
;__Lib_Math.c,1657 :: 		
0x059C	0x3203      	RRCF        R3, 1, 0
;__Lib_Math.c,1658 :: 		
0x059E	0x3202      	RRCF        R2, 1, 0
;__Lib_Math.c,1659 :: 		
0x05A0	0x3201      	RRCF        R1, 1, 0
;__Lib_Math.c,1660 :: 		
0x05A2	0x3200      	RRCF        R0, 1, 0
;__Lib_Math.c,1665 :: 		
0x05A4	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,1666 :: 		
0x05A6	0xD7F2      	BRA         _NEXT
;__Lib_Math.c,1667 :: 		
0x05A8	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1668 :: 		
0x05AA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1669 :: 		
0x05AC	0xD009      	BRA         _EXIT1
;__Lib_Math.c,1676 :: 		
0x05AE	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1677 :: 		
0x05B0	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1678 :: 		
0x05B2	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1681 :: 		
0x05B4	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1682 :: 		
0x05B6	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1685 :: 		
0x05B8	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1686 :: 		
0x05BA	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1689 :: 		
0x05BC	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1691 :: 		
0x05BE	0xD7EA      	BRA         _LOOP
;__Lib_Math.c,1693 :: 		
_EXIT1:
;__Lib_Math.c,1698 :: 		
0x05C0	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1699 :: 		
0x05C2	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1700 :: 		
0x05C4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1703 :: 		
0x05C6	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1704 :: 		
0x05C8	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1707 :: 		
0x05CA	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1708 :: 		
0x05CC	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1711 :: 		
0x05CE	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1714 :: 		
_EXIT2:
;__Lib_Math.c,1716 :: 		
0x05D0	0x0012      	RETURN      0
; end of _Mul_32x32_U
_print:
;compy.c,56 :: 		void print(unsigned char line, unsigned char column, code const unsigned char* sprite) {
;compy.c,57 :: 		T6963C_graphics(1);
0x05D2	0x8665      	BSF         _T6963C_display, 3 
0x05D4	0xF199C065  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x05D8	0xDECB      	RCALL       _T6963C_writeCommand
;compy.c,58 :: 		T6963C_text(0);
0x05DA	0x9465      	BCF         _T6963C_display, 2 
0x05DC	0xF199C065  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x05E0	0xDEC7      	RCALL       _T6963C_writeCommand
;compy.c,59 :: 		T6963C_sprite((column - 1) * 16, (line - 1) * 16, sprite, 16, 16);
0x05E2	0x0101      	MOVLB       1
0x05E4	0x0585      	DECF        FARG_print_column, 0, 1
0x05E6	0x6F89      	MOVWF       FARG_T6963C_sprite_px, 1
0x05E8	0x3789      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x05EA	0x9189      	BCF         FARG_T6963C_sprite_px, 0, 1
0x05EC	0x3789      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x05EE	0x9189      	BCF         FARG_T6963C_sprite_px, 0, 1
0x05F0	0x3789      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x05F2	0x9189      	BCF         FARG_T6963C_sprite_px, 0, 1
0x05F4	0x3789      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x05F6	0x9189      	BCF         FARG_T6963C_sprite_px, 0, 1
0x05F8	0x0584      	DECF        FARG_print_line, 0, 1
0x05FA	0x6F8A      	MOVWF       FARG_T6963C_sprite_py, 1
0x05FC	0x378A      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x05FE	0x918A      	BCF         FARG_T6963C_sprite_py, 0, 1
0x0600	0x378A      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x0602	0x918A      	BCF         FARG_T6963C_sprite_py, 0, 1
0x0604	0x378A      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x0606	0x918A      	BCF         FARG_T6963C_sprite_py, 0, 1
0x0608	0x378A      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x060A	0x918A      	BCF         FARG_T6963C_sprite_py, 0, 1
0x060C	0xF18BC186  	MOVFF       FARG_print_sprite, FARG_T6963C_sprite_pic
0x0610	0xF18CC187  	MOVFF       FARG_print_sprite+1, FARG_T6963C_sprite_pic+1
0x0614	0xF18DC188  	MOVFF       FARG_print_sprite+2, FARG_T6963C_sprite_pic+2
0x0618	0x0E10      	MOVLW       16
0x061A	0x6F8E      	MOVWF       FARG_T6963C_sprite_sx, 1
0x061C	0x0E10      	MOVLW       16
0x061E	0x6F8F      	MOVWF       FARG_T6963C_sprite_sy, 1
0x0620	0xDF03      	RCALL       _T6963C_sprite
;compy.c,60 :: 		}
0x0622	0x0012      	RETURN      0
; end of _print
_print_text:
;compy.c,62 :: 		void print_text(unsigned char line, unsigned char column, unsigned char* text) {
;compy.c,63 :: 		T6963C_graphics(0);
0x0624	0x9665      	BCF         _T6963C_display, 3 
0x0626	0xF199C065  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x062A	0xDEA2      	RCALL       _T6963C_writeCommand
;compy.c,64 :: 		T6963C_text(1);
0x062C	0x8465      	BSF         _T6963C_display, 2 
0x062E	0xF199C065  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x0632	0xDE9E      	RCALL       _T6963C_writeCommand
;compy.c,65 :: 		T6963C_write_text(text, line - 1, column - 1, T6963C_ROM_MODE_XOR);
0x0634	0xF184C17F  	MOVFF       FARG_print_text_text, FARG_T6963C_write_text_str
0x0638	0xF185C180  	MOVFF       FARG_print_text_text+1, FARG_T6963C_write_text_str+1
0x063C	0x0101      	MOVLB       1
0x063E	0x057D      	DECF        FARG_print_text_line, 0, 1
0x0640	0x6F86      	MOVWF       FARG_T6963C_write_text_x, 1
0x0642	0x057E      	DECF        FARG_print_text_column, 0, 1
0x0644	0x6F87      	MOVWF       FARG_T6963C_write_text_y, 1
0x0646	0x0E81      	MOVLW       129
0x0648	0x6F88      	MOVWF       FARG_T6963C_write_text_mode, 1
0x064A	0xDF6A      	RCALL       _T6963C_write_text
;compy.c,66 :: 		}
0x064C	0x0012      	RETURN      0
; end of _print_text
_Print_World:
;compy.c,305 :: 		void Print_World() {
;compy.c,307 :: 		for(i = 0; i < 15; ++i) {
0x064E	0x6A46      	CLRF        _i 
0x0650	0x6A47      	CLRF        _i+1 
L_Print_World74:
0x0652	0x0E80      	MOVLW       128
0x0654	0x1847      	XORWF       _i+1, 0 
0x0656	0x6E00      	MOVWF       R0 
0x0658	0x0E80      	MOVLW       128
0x065A	0x5C00      	SUBWF       R0, 0 
0x065C	0xE102      	BNZ         L__Print_World156
0x065E	0x0E0F      	MOVLW       15
0x0660	0x5C46      	SUBWF       _i, 0 
L__Print_World156:
0x0662	0xB0D8      	BTFSC       STATUS, 0 
0x0664	0xD093      	BRA         L_Print_World75
;compy.c,308 :: 		for(j = 0; j < 15; ++j)
0x0666	0x6A44      	CLRF        _j 
0x0668	0x6A45      	CLRF        _j+1 
L_Print_World77:
0x066A	0x0E80      	MOVLW       128
0x066C	0x1845      	XORWF       _j+1, 0 
0x066E	0x6E00      	MOVWF       R0 
0x0670	0x0E80      	MOVLW       128
0x0672	0x5C00      	SUBWF       R0, 0 
0x0674	0xE102      	BNZ         L__Print_World157
0x0676	0x0E0F      	MOVLW       15
0x0678	0x5C44      	SUBWF       _j, 0 
L__Print_World157:
0x067A	0xB0D8      	BTFSC       STATUS, 0 
0x067C	0xD084      	BRA         L_Print_World78
;compy.c,310 :: 		currentCharactere = world[i][j];
0x067E	0xF000C046  	MOVFF       _i, R0
0x0682	0xF001C047  	MOVFF       _i+1, R1
0x0686	0x0E1E      	MOVLW       30
0x0688	0x6E04      	MOVWF       R4 
0x068A	0x0E00      	MOVLW       0
0x068C	0x6E05      	MOVWF       R5 
0x068E	0xDEA4      	RCALL       _Mul_16x16_U
0x0690	0x0E89      	MOVLW       _world
0x0692	0x2400      	ADDWF       R0, 0 
0x0694	0x6E03      	MOVWF       R3 
0x0696	0x0E00      	MOVLW       hi_addr(_world)
0x0698	0x2001      	ADDWFC      R1, 0 
0x069A	0x6E04      	MOVWF       R4 
0x069C	0xF000C044  	MOVFF       _j, R0
0x06A0	0xF001C045  	MOVFF       _j+1, R1
0x06A4	0x3600      	RLCF        R0, 1 
0x06A6	0x9000      	BCF         R0, 0 
0x06A8	0x3601      	RLCF        R1, 1 
0x06AA	0x5000      	MOVF        R0, 0 
0x06AC	0x2403      	ADDWF       R3, 0 
0x06AE	0x6EE9      	MOVWF       FSR0L 
0x06B0	0x5001      	MOVF        R1, 0 
0x06B2	0x2004      	ADDWFC      R4, 0 
0x06B4	0x6EEA      	MOVWF       FSR0H 
0x06B6	0xF001CFEE  	MOVFF       POSTINC0, R1
0x06BA	0xF027C001  	MOVFF       R1, _currentCharactere
;compy.c,311 :: 		if (currentCharactere == 0) {
0x06BE	0x5001      	MOVF        R1, 0 
0x06C0	0x0A00      	XORLW       0
0x06C2	0xE107      	BNZ         L_Print_World80
;compy.c,312 :: 		currentSprite = pacman_right;
0x06C4	0x0E7B      	MOVLW       _pacman_right
0x06C6	0x6E62      	MOVWF       _currentSprite 
0x06C8	0x0E16      	MOVLW       hi_addr(_pacman_right)
0x06CA	0x6E63      	MOVWF       _currentSprite+1 
0x06CC	0x0E00      	MOVLW       higher_addr(_pacman_right)
0x06CE	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,313 :: 		} else if (currentCharactere == 1) {
0x06D0	0xD04C      	BRA         L_Print_World81
L_Print_World80:
0x06D2	0x5027      	MOVF        _currentCharactere, 0 
0x06D4	0x0A01      	XORLW       1
0x06D6	0xE107      	BNZ         L_Print_World82
;compy.c,314 :: 		currentSprite = pacman_left;
0x06D8	0x0E5B      	MOVLW       _pacman_left
0x06DA	0x6E62      	MOVWF       _currentSprite 
0x06DC	0x0E16      	MOVLW       hi_addr(_pacman_left)
0x06DE	0x6E63      	MOVWF       _currentSprite+1 
0x06E0	0x0E00      	MOVLW       higher_addr(_pacman_left)
0x06E2	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,315 :: 		} else if (currentCharactere == 2) {
0x06E4	0xD042      	BRA         L_Print_World83
L_Print_World82:
0x06E6	0x5027      	MOVF        _currentCharactere, 0 
0x06E8	0x0A02      	XORLW       2
0x06EA	0xE107      	BNZ         L_Print_World84
;compy.c,316 :: 		currentSprite = pacman_up;
0x06EC	0x0EBB      	MOVLW       _pacman_up
0x06EE	0x6E62      	MOVWF       _currentSprite 
0x06F0	0x0E16      	MOVLW       hi_addr(_pacman_up)
0x06F2	0x6E63      	MOVWF       _currentSprite+1 
0x06F4	0x0E00      	MOVLW       higher_addr(_pacman_up)
0x06F6	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,317 :: 		} else if (currentCharactere == 3) {
0x06F8	0xD038      	BRA         L_Print_World85
L_Print_World84:
0x06FA	0x5027      	MOVF        _currentCharactere, 0 
0x06FC	0x0A03      	XORLW       3
0x06FE	0xE107      	BNZ         L_Print_World86
;compy.c,318 :: 		currentSprite = pacman_down;
0x0700	0x0E9B      	MOVLW       _pacman_down
0x0702	0x6E62      	MOVWF       _currentSprite 
0x0704	0x0E16      	MOVLW       hi_addr(_pacman_down)
0x0706	0x6E63      	MOVWF       _currentSprite+1 
0x0708	0x0E00      	MOVLW       higher_addr(_pacman_down)
0x070A	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,319 :: 		} else if (currentCharactere == food_orientation) {
0x070C	0xD02E      	BRA         L_Print_World87
L_Print_World86:
0x070E	0x5027      	MOVF        _currentCharactere, 0 
0x0710	0x185F      	XORWF       _food_orientation, 0 
0x0712	0xE107      	BNZ         L_Print_World88
;compy.c,320 :: 		currentSprite = food;
0x0714	0x0E3B      	MOVLW       _food
0x0716	0x6E62      	MOVWF       _currentSprite 
0x0718	0x0E16      	MOVLW       hi_addr(_food)
0x071A	0x6E63      	MOVWF       _currentSprite+1 
0x071C	0x0E00      	MOVLW       higher_addr(_food)
0x071E	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,321 :: 		} else if (currentCharactere == ghost_orientation) {
0x0720	0xD024      	BRA         L_Print_World89
L_Print_World88:
0x0722	0x5027      	MOVF        _currentCharactere, 0 
0x0724	0x183A      	XORWF       _ghost_orientation, 0 
0x0726	0xE107      	BNZ         L_Print_World90
;compy.c,322 :: 		currentSprite = ghost;
0x0728	0x0EDB      	MOVLW       _ghost
0x072A	0x6E62      	MOVWF       _currentSprite 
0x072C	0x0E15      	MOVLW       hi_addr(_ghost)
0x072E	0x6E63      	MOVWF       _currentSprite+1 
0x0730	0x0E00      	MOVLW       higher_addr(_ghost)
0x0732	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,323 :: 		} else if (currentCharactere == barrier_orientation) {
0x0734	0xD01A      	BRA         L_Print_World91
L_Print_World90:
0x0736	0x5027      	MOVF        _currentCharactere, 0 
0x0738	0x185E      	XORWF       _barrier_orientation, 0 
0x073A	0xE107      	BNZ         L_Print_World92
;compy.c,324 :: 		currentSprite = obstacle;
0x073C	0x0EFB      	MOVLW       _obstacle
0x073E	0x6E62      	MOVWF       _currentSprite 
0x0740	0x0E15      	MOVLW       hi_addr(_obstacle)
0x0742	0x6E63      	MOVWF       _currentSprite+1 
0x0744	0x0E00      	MOVLW       higher_addr(_obstacle)
0x0746	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,325 :: 		} else if (currentCharactere == ' ') {
0x0748	0xD010      	BRA         L_Print_World93
L_Print_World92:
0x074A	0x5027      	MOVF        _currentCharactere, 0 
0x074C	0x0A20      	XORLW       32
0x074E	0xE107      	BNZ         L_Print_World94
;compy.c,326 :: 		currentSprite = blank;
0x0750	0x0E1B      	MOVLW       _blank
0x0752	0x6E62      	MOVWF       _currentSprite 
0x0754	0x0E16      	MOVLW       hi_addr(_blank)
0x0756	0x6E63      	MOVWF       _currentSprite+1 
0x0758	0x0E00      	MOVLW       higher_addr(_blank)
0x075A	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,327 :: 		} else {
0x075C	0xD006      	BRA         L_Print_World95
L_Print_World94:
;compy.c,328 :: 		currentSprite = blank;
0x075E	0x0E1B      	MOVLW       _blank
0x0760	0x6E62      	MOVWF       _currentSprite 
0x0762	0x0E16      	MOVLW       hi_addr(_blank)
0x0764	0x6E63      	MOVWF       _currentSprite+1 
0x0766	0x0E00      	MOVLW       higher_addr(_blank)
0x0768	0x6E64      	MOVWF       _currentSprite+2 
;compy.c,329 :: 		}
L_Print_World95:
L_Print_World93:
L_Print_World91:
L_Print_World89:
L_Print_World87:
L_Print_World85:
L_Print_World83:
L_Print_World81:
;compy.c,330 :: 		print(i, j, currentSprite);
0x076A	0xF184C046  	MOVFF       _i, FARG_print_line
0x076E	0xF185C044  	MOVFF       _j, FARG_print_column
0x0772	0xF186C062  	MOVFF       _currentSprite, FARG_print_sprite
0x0776	0xF187C063  	MOVFF       _currentSprite+1, FARG_print_sprite+1
0x077A	0xF188C064  	MOVFF       _currentSprite+2, FARG_print_sprite+2
0x077E	0xDF29      	RCALL       _print
;compy.c,308 :: 		for(j = 0; j < 15; ++j)
0x0780	0x4A44      	INFSNZ      _j, 1 
0x0782	0x2A45      	INCF        _j+1, 1 
;compy.c,331 :: 		}
0x0784	0xD772      	BRA         L_Print_World77
L_Print_World78:
;compy.c,307 :: 		for(i = 0; i < 15; ++i) {
0x0786	0x4A46      	INFSNZ      _i, 1 
0x0788	0x2A47      	INCF        _i+1, 1 
;compy.c,332 :: 		}
0x078A	0xD763      	BRA         L_Print_World74
L_Print_World75:
;compy.c,333 :: 		}
0x078C	0x0012      	RETURN      0
; end of _Print_World
_Div_16x16_S_L:
;__Lib_Math.c,139 :: 		
;__Lib_Math.c,146 :: 		
0x078E	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,147 :: 		
0x0790	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,148 :: 		
0x0792	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,149 :: 		
0x0794	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,150 :: 		
0x0796	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,151 :: 		
0x0798	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,152 :: 		
0x079A	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,153 :: 		
0x079C	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,154 :: 		
0x079E	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,155 :: 		
0x07A0	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,156 :: 		
0x07A2	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,158 :: 		
0x07A4	0x0E0F      	MOVLW       15
;__Lib_Math.c,159 :: 		
0x07A6	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,161 :: 		
0x07A8	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,162 :: 		
0x07AA	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,163 :: 		
0x07AC	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,164 :: 		
0x07AE	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,166 :: 		
0x07B0	0xA000      	BTFSS       R0, 0, 0
;__Lib_Math.c,167 :: 		
0x07B2	0xD006      	BRA         $+14
;__Lib_Math.c,168 :: 		
0x07B4	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,169 :: 		
0x07B6	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,170 :: 		
0x07B8	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,171 :: 		
0x07BA	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,172 :: 		
0x07BC	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,173 :: 		
0x07BE	0xD005      	BRA         $+12
;__Lib_Math.c,175 :: 		
0x07C0	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,176 :: 		
0x07C2	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,177 :: 		
0x07C4	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,178 :: 		
0x07C6	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,179 :: 		
0x07C8	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,181 :: 		
0x07CA	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,182 :: 		
0x07CC	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,184 :: 		
0x07CE	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,185 :: 		
0x07D0	0xD7EB      	BRA         $-40
;__Lib_Math.c,187 :: 		
0x07D2	0xB000      	BTFSC       R0, 0, 0
;__Lib_Math.c,188 :: 		
0x07D4	0xD006      	BRA         $+14
;__Lib_Math.c,189 :: 		
0x07D6	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,190 :: 		
0x07D8	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,191 :: 		
0x07DA	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,192 :: 		
0x07DC	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,193 :: 		
0x07DE	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,194 :: 		
0x07E0	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,195 :: 		
0x07E2	0x0000      	NOP
;__Lib_Math.c,197 :: 		
0x07E4	0x0012      	RETURN      0
; end of _Div_16x16_S_L
_myrand:
;compy.c,252 :: 		int myrand(unsigned seed) {
;compy.c,253 :: 		next = seed;
0x07E6	0xF040C17D  	MOVFF       FARG_myrand_seed, _next
0x07EA	0xF041C17E  	MOVFF       FARG_myrand_seed+1, _next+1
0x07EE	0x0E00      	MOVLW       0
0x07F0	0x6E42      	MOVWF       _next+2 
0x07F2	0x6E43      	MOVWF       _next+3 
;compy.c,254 :: 		next = next * 1103515245 + 12345;
0x07F4	0xF000C040  	MOVFF       _next, R0
0x07F8	0xF001C041  	MOVFF       _next+1, R1
0x07FC	0xF002C042  	MOVFF       _next+2, R2
0x0800	0xF003C043  	MOVFF       _next+3, R3
0x0804	0x0E6D      	MOVLW       109
0x0806	0x6E04      	MOVWF       R4 
0x0808	0x0E4E      	MOVLW       78
0x080A	0x6E05      	MOVWF       R5 
0x080C	0x0EC6      	MOVLW       198
0x080E	0x6E06      	MOVWF       R6 
0x0810	0x0E41      	MOVLW       65
0x0812	0x6E07      	MOVWF       R7 
0x0814	0xDEB5      	RCALL       _Mul_32x32_U
0x0816	0x0E39      	MOVLW       57
0x0818	0x2400      	ADDWF       R0, 0 
0x081A	0x6E05      	MOVWF       R5 
0x081C	0x0E30      	MOVLW       48
0x081E	0x2001      	ADDWFC      R1, 0 
0x0820	0x6E06      	MOVWF       R6 
0x0822	0x0E00      	MOVLW       0
0x0824	0x2002      	ADDWFC      R2, 0 
0x0826	0x6E07      	MOVWF       R7 
0x0828	0x0E00      	MOVLW       0
0x082A	0x2003      	ADDWFC      R3, 0 
0x082C	0x6E08      	MOVWF       R8 
0x082E	0xF040C005  	MOVFF       R5, _next
0x0832	0xF041C006  	MOVFF       R6, _next+1
0x0836	0xF042C007  	MOVFF       R7, _next+2
0x083A	0xF043C008  	MOVFF       R8, _next+3
;compy.c,255 :: 		return((unsigned)(next/65536) % 32768);
0x083E	0xF000C007  	MOVFF       R7, R0
0x0842	0xF001C008  	MOVFF       R8, R1
0x0846	0x6A02      	CLRF        R2 
0x0848	0x6A03      	CLRF        R3 
0x084A	0x0EFF      	MOVLW       255
0x084C	0x1600      	ANDWF       R0, 1 
0x084E	0x0E7F      	MOVLW       127
0x0850	0x1601      	ANDWF       R1, 1 
;compy.c,256 :: 		}
0x0852	0x0012      	RETURN      0
; end of _myrand
_Delay_100ms:
;__Lib_Delays.c,39 :: 		void Delay_100ms() {
;__Lib_Delays.c,40 :: 		Delay_ms(100);
0x0854	0x0E02      	MOVLW       2
0x0856	0x6E0B      	MOVWF       R11, 0
0x0858	0x0E04      	MOVLW       4
0x085A	0x6E0C      	MOVWF       R12, 0
0x085C	0x0EBA      	MOVLW       186
0x085E	0x6E0D      	MOVWF       R13, 0
L_Delay_100ms7:
0x0860	0x2E0D      	DECFSZ      R13, 1, 0
0x0862	0xD7FE      	BRA         L_Delay_100ms7
0x0864	0x2E0C      	DECFSZ      R12, 1, 0
0x0866	0xD7FC      	BRA         L_Delay_100ms7
0x0868	0x2E0B      	DECFSZ      R11, 1, 0
0x086A	0xD7FA      	BRA         L_Delay_100ms7
0x086C	0x0000      	NOP
;__Lib_Delays.c,41 :: 		}
0x086E	0x0012      	RETURN      0
; end of _Delay_100ms
_update_pacman_orientation:
;compy.c,335 :: 		char update_pacman_orientation(int newX, int newY) {
;compy.c,336 :: 		if (newX > pacman_x) {
0x0870	0x0E80      	MOVLW       128
0x0872	0x1851      	XORWF       _pacman_x+1, 0 
0x0874	0x6E00      	MOVWF       R0 
0x0876	0x0E80      	MOVLW       128
0x0878	0x0101      	MOVLB       1
0x087A	0x197E      	XORWF       FARG_update_pacman_orientation_newX+1, 0, 1
0x087C	0x5C00      	SUBWF       R0, 0 
0x087E	0xE102      	BNZ         L__update_pacman_orientation158
0x0880	0x517D      	MOVF        FARG_update_pacman_orientation_newX, 0, 1
0x0882	0x5C50      	SUBWF       _pacman_x, 0 
L__update_pacman_orientation158:
0x0884	0xE202      	BC          L_update_pacman_orientation96
;compy.c,337 :: 		return (char) 0;
0x0886	0x6A00      	CLRF        R0 
0x0888	0x0012      	RETURN      0
;compy.c,338 :: 		} else if (newX < pacman_x) {
L_update_pacman_orientation96:
0x088A	0x0E80      	MOVLW       128
0x088C	0x197E      	XORWF       FARG_update_pacman_orientation_newX+1, 0, 1
0x088E	0x6E00      	MOVWF       R0 
0x0890	0x0E80      	MOVLW       128
0x0892	0x1851      	XORWF       _pacman_x+1, 0 
0x0894	0x5C00      	SUBWF       R0, 0 
0x0896	0xE102      	BNZ         L__update_pacman_orientation159
0x0898	0x5050      	MOVF        _pacman_x, 0 
0x089A	0x5D7D      	SUBWF       FARG_update_pacman_orientation_newX, 0, 1
L__update_pacman_orientation159:
0x089C	0xE203      	BC          L_update_pacman_orientation98
;compy.c,339 :: 		return (char) 1;
0x089E	0x0E01      	MOVLW       1
0x08A0	0x6E00      	MOVWF       R0 
0x08A2	0x0012      	RETURN      0
;compy.c,340 :: 		} else if (newY > pacman_y) {
L_update_pacman_orientation98:
0x08A4	0x0E80      	MOVLW       128
0x08A6	0x1861      	XORWF       _pacman_y+1, 0 
0x08A8	0x6E00      	MOVWF       R0 
0x08AA	0x0E80      	MOVLW       128
0x08AC	0x1980      	XORWF       FARG_update_pacman_orientation_newY+1, 0, 1
0x08AE	0x5C00      	SUBWF       R0, 0 
0x08B0	0xE102      	BNZ         L__update_pacman_orientation160
0x08B2	0x517F      	MOVF        FARG_update_pacman_orientation_newY, 0, 1
0x08B4	0x5C60      	SUBWF       _pacman_y, 0 
L__update_pacman_orientation160:
0x08B6	0xE203      	BC          L_update_pacman_orientation100
;compy.c,341 :: 		return (char) 2;
0x08B8	0x0E02      	MOVLW       2
0x08BA	0x6E00      	MOVWF       R0 
0x08BC	0x0012      	RETURN      0
;compy.c,342 :: 		} else if (newY < pacman_y) {
L_update_pacman_orientation100:
0x08BE	0x0E80      	MOVLW       128
0x08C0	0x1980      	XORWF       FARG_update_pacman_orientation_newY+1, 0, 1
0x08C2	0x6E00      	MOVWF       R0 
0x08C4	0x0E80      	MOVLW       128
0x08C6	0x1861      	XORWF       _pacman_y+1, 0 
0x08C8	0x5C00      	SUBWF       R0, 0 
0x08CA	0xE102      	BNZ         L__update_pacman_orientation161
0x08CC	0x5060      	MOVF        _pacman_y, 0 
0x08CE	0x5D7F      	SUBWF       FARG_update_pacman_orientation_newY, 0, 1
L__update_pacman_orientation161:
0x08D0	0xE203      	BC          L_update_pacman_orientation102
;compy.c,343 :: 		return 3;
0x08D2	0x0E03      	MOVLW       3
0x08D4	0x6E00      	MOVWF       R0 
0x08D6	0x0012      	RETURN      0
;compy.c,344 :: 		}
L_update_pacman_orientation102:
;compy.c,345 :: 		return pacman_orientation;
0x08D8	0xF000C03B  	MOVFF       _pacman_orientation, R0
;compy.c,346 :: 		}
0x08DC	0x0012      	RETURN      0
; end of _update_pacman_orientation
_T6963C_fill:
;__Lib_T6963C.c,113 :: 		
;__Lib_T6963C.c,117 :: 		
0x08DE	0x0101      	MOVLB       1
0x08E0	0x6B82      	CLRF        T6963C_fill_addr_L0, 1
0x08E2	0x6B83      	CLRF        T6963C_fill_addr_L0+1, 1
;__Lib_T6963C.c,119 :: 		
0x08E4	0xDD2B      	RCALL       _T6963C_waitReady
;__Lib_T6963C.c,121 :: 		
0x08E6	0x0101      	MOVLB       1
0x08E8	0x517E      	MOVF        FARG_T6963C_fill_start, 0, 1
0x08EA	0x2468      	ADDWF       _T6963C_grHomeAddr, 0 
0x08EC	0x6F96      	MOVWF       FARG_T6963C_setPtr_p, 1
0x08EE	0x517F      	MOVF        FARG_T6963C_fill_start+1, 0, 1
0x08F0	0x2069      	ADDWFC      _T6963C_grHomeAddr+1, 0 
0x08F2	0x6F97      	MOVWF       FARG_T6963C_setPtr_p+1, 1
0x08F4	0x0E24      	MOVLW       36
0x08F6	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x08F8	0xDD45      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,123 :: 		
0x08FA	0x0EB0      	MOVLW       176
0x08FC	0x0101      	MOVLB       1
0x08FE	0x6F99      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x0900	0xDD37      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,125 :: 		
0x0902	0x9082      	BCF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,129 :: 		
0x0904	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,130 :: 		
L_T6963C_fill2:
0x0906	0x0101      	MOVLB       1
0x0908	0x5181      	MOVF        FARG_T6963C_fill_len+1, 0, 1
0x090A	0x5D83      	SUBWF       T6963C_fill_addr_L0+1, 0, 1
0x090C	0xE102      	BNZ         L__T6963C_fill36
0x090E	0x5180      	MOVF        FARG_T6963C_fill_len, 0, 1
0x0910	0x5D82      	SUBWF       T6963C_fill_addr_L0, 0, 1
L__T6963C_fill36:
0x0912	0xE20A      	BC          L_T6963C_fill3
;__Lib_T6963C.c,132 :: 		
0x0914	0xFF83C17D  	MOVFF       FARG_T6963C_fill_v, T6963C_dataPort
;__Lib_T6963C.c,133 :: 		
0x0918	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,134 :: 		
0x091A	0xDD1D      	RCALL       _Delay_1us
0x091C	0xDD1C      	RCALL       _Delay_1us
0x091E	0xDD1B      	RCALL       _Delay_1us
;__Lib_T6963C.c,135 :: 		
0x0920	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,136 :: 		
0x0922	0x4B82      	INFSNZ      T6963C_fill_addr_L0, 1, 1
0x0924	0x2B83      	INCF        T6963C_fill_addr_L0+1, 1, 1
;__Lib_T6963C.c,137 :: 		
0x0926	0xD7EF      	BRA         L_T6963C_fill2
L_T6963C_fill3:
;__Lib_T6963C.c,139 :: 		
0x0928	0x0EB2      	MOVLW       178
0x092A	0x6F99      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x092C	0xDD21      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,140 :: 		
0x092E	0x0012      	RETURN      0
; end of _T6963C_fill
_T6963C_init:
;__Lib_T6963C.c,498 :: 		
;__Lib_T6963C.c,504 :: 		
0x0930	0xF066C179  	MOVFF       FARG_T6963C_init_width, _T6963C_grWidth
0x0934	0xF067C17A  	MOVFF       FARG_T6963C_init_width+1, _T6963C_grWidth+1
;__Lib_T6963C.c,505 :: 		
0x0938	0xF06CC17B  	MOVFF       FARG_T6963C_init_height, _T6963C_grHeight
0x093C	0x0E00      	MOVLW       0
0x093E	0x6E6D      	MOVWF       _T6963C_grHeight+1 
;__Lib_T6963C.c,506 :: 		
0x0940	0xF072C17C  	MOVFF       FARG_T6963C_init_fntW, _T6963C_fontWidth
0x0944	0x0E00      	MOVLW       0
0x0946	0x6E73      	MOVWF       _T6963C_fontWidth+1 
;__Lib_T6963C.c,512 :: 		
0x0948	0xF004C072  	MOVFF       _T6963C_fontWidth, R4
0x094C	0xF005C073  	MOVFF       _T6963C_fontWidth+1, R5
0x0950	0xF000C179  	MOVFF       FARG_T6963C_init_width, R0
0x0954	0xF001C17A  	MOVFF       FARG_T6963C_init_width+1, R1
0x0958	0xDD24      	RCALL       _Div_16x16_U
0x095A	0xF07CC000  	MOVFF       R0, _T6963C_txtCols
0x095E	0xF07DC001  	MOVFF       R1, _T6963C_txtCols+1
;__Lib_T6963C.c,513 :: 		
0x0962	0xF004C06C  	MOVFF       _T6963C_grHeight, R4
0x0966	0xF005C06D  	MOVFF       _T6963C_grHeight+1, R5
0x096A	0xDD36      	RCALL       _Mul_16x16_U
0x096C	0xF070C000  	MOVFF       R0, _T6963C_grMemSize
0x0970	0xF071C001  	MOVFF       R1, _T6963C_grMemSize+1
;__Lib_T6963C.c,514 :: 		
0x0974	0xF000C06C  	MOVFF       _T6963C_grHeight, R0
0x0978	0xF001C06D  	MOVFF       _T6963C_grHeight+1, R1
0x097C	0x3201      	RRCF        R1, 1 
0x097E	0x3200      	RRCF        R0, 1 
0x0980	0x9E01      	BCF         R1, 7 
0x0982	0x3201      	RRCF        R1, 1 
0x0984	0x3200      	RRCF        R0, 1 
0x0986	0x9E01      	BCF         R1, 7 
0x0988	0x3201      	RRCF        R1, 1 
0x098A	0x3200      	RRCF        R0, 1 
0x098C	0x9E01      	BCF         R1, 7 
0x098E	0xF004C07C  	MOVFF       _T6963C_txtCols, R4
0x0992	0xF005C07D  	MOVFF       _T6963C_txtCols+1, R5
0x0996	0xDD20      	RCALL       _Mul_16x16_U
0x0998	0xF06EC000  	MOVFF       R0, _T6963C_txtMemSize
0x099C	0xF06FC001  	MOVFF       R1, _T6963C_txtMemSize+1
;__Lib_T6963C.c,520 :: 		
0x09A0	0x9494      	BCF         T6963C_ctrlwr_Direction, BitPos(T6963C_ctrlwr_Direction+0) 
;__Lib_T6963C.c,521 :: 		
0x09A2	0x9294      	BCF         T6963C_ctrlrd_Direction, BitPos(T6963C_ctrlrd_Direction+0) 
;__Lib_T6963C.c,522 :: 		
0x09A4	0x9094      	BCF         T6963C_ctrlcd_Direction, BitPos(T6963C_ctrlcd_Direction+0) 
;__Lib_T6963C.c,523 :: 		
0x09A6	0x9A94      	BCF         T6963C_ctrlrst_Direction, BitPos(T6963C_ctrlrst_Direction+0) 
;__Lib_T6963C.c,525 :: 		
0x09A8	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,526 :: 		
0x09AA	0x8282      	BSF         T6963C_ctrlrd, BitPos(T6963C_ctrlrd+0) 
;__Lib_T6963C.c,527 :: 		
0x09AC	0x8082      	BSF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,528 :: 		
0x09AE	0x8A82      	BSF         T6963C_ctrlrst, BitPos(T6963C_ctrlrst+0) 
;__Lib_T6963C.c,534 :: 		
0x09B0	0x0EFF      	MOVLW       255
0x09B2	0x6E95      	MOVWF       T6963C_dataPort+18 
;__Lib_T6963C.c,539 :: 		
0x09B4	0x9A82      	BCF         T6963C_ctrlrst, BitPos(T6963C_ctrlrst+0) 
;__Lib_T6963C.c,540 :: 		
0x09B6	0xDF4E      	RCALL       _Delay_100ms
;__Lib_T6963C.c,541 :: 		
0x09B8	0x8A82      	BSF         T6963C_ctrlrst, BitPos(T6963C_ctrlrst+0) 
;__Lib_T6963C.c,542 :: 		
0x09BA	0xDF4C      	RCALL       _Delay_100ms
;__Lib_T6963C.c,547 :: 		
0x09BC	0x0E81      	MOVLW       129
0x09BE	0x0101      	MOVLB       1
0x09C0	0x6F99      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x09C2	0xDCD6      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,552 :: 		
0x09C4	0xF004C17C  	MOVFF       FARG_T6963C_init_fntW, R4
0x09C8	0x0E00      	MOVLW       0
0x09CA	0x6E05      	MOVWF       R5 
0x09CC	0xF000C066  	MOVFF       _T6963C_grWidth, R0
0x09D0	0xF001C067  	MOVFF       _T6963C_grWidth+1, R1
0x09D4	0xDCE6      	RCALL       _Div_16x16_U
0x09D6	0xF196C000  	MOVFF       R0, FARG_T6963C_setPtr_p
0x09DA	0xF197C001  	MOVFF       R1, FARG_T6963C_setPtr_p+1
0x09DE	0x0E43      	MOVLW       67
0x09E0	0x0101      	MOVLB       1
0x09E2	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x09E4	0xDCCF      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,557 :: 		
0x09E6	0xF196C07C  	MOVFF       _T6963C_txtCols, FARG_T6963C_setPtr_p
0x09EA	0xF197C07D  	MOVFF       _T6963C_txtCols+1, FARG_T6963C_setPtr_p+1
0x09EE	0x0E41      	MOVLW       65
0x09F0	0x0101      	MOVLB       1
0x09F2	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x09F4	0xDCC7      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,562 :: 		
0x09F6	0x506E      	MOVF        _T6963C_txtMemSize, 0 
0x09F8	0x2470      	ADDWF       _T6963C_grMemSize, 0 
0x09FA	0x0101      	MOVLB       1
0x09FC	0x6F80      	MOVWF       FARG_T6963C_fill_len, 1
0x09FE	0x506F      	MOVF        _T6963C_txtMemSize+1, 0 
0x0A00	0x2071      	ADDWFC      _T6963C_grMemSize+1, 0 
0x0A02	0x6F81      	MOVWF       FARG_T6963C_fill_len+1, 1
0x0A04	0x6A68      	CLRF        _T6963C_grHomeAddr 
0x0A06	0x6A69      	CLRF        _T6963C_grHomeAddr+1 
;__Lib_T6963C.c,563 :: 		
0x0A08	0xF06AC070  	MOVFF       _T6963C_grMemSize, _T6963C_textHomeAddr
0x0A0C	0xF06BC071  	MOVFF       _T6963C_grMemSize+1, _T6963C_textHomeAddr+1
;__Lib_T6963C.c,568 :: 		
0x0A10	0x6B7D      	CLRF        FARG_T6963C_fill_v, 1
0x0A12	0x6B7E      	CLRF        FARG_T6963C_fill_start, 1
0x0A14	0x6B7F      	CLRF        FARG_T6963C_fill_start+1, 1
0x0A16	0xDF63      	RCALL       _T6963C_fill
;__Lib_T6963C.c,573 :: 		
0x0A18	0x0E90      	MOVLW       144
0x0A1A	0x6E65      	MOVWF       _T6963C_display 
;__Lib_T6963C.c,578 :: 		
0x0A1C	0x0101      	MOVLB       1
0x0A1E	0x6B96      	CLRF        FARG_T6963C_setPtr_p, 1
0x0A20	0x6B97      	CLRF        FARG_T6963C_setPtr_p+1, 1
0x0A22	0x0E42      	MOVLW       66
0x0A24	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x0A26	0xDCAE      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,579 :: 		
0x0A28	0xF196C070  	MOVFF       _T6963C_grMemSize, FARG_T6963C_setPtr_p
0x0A2C	0xF197C071  	MOVFF       _T6963C_grMemSize+1, FARG_T6963C_setPtr_p+1
0x0A30	0x0E40      	MOVLW       64
0x0A32	0x0101      	MOVLB       1
0x0A34	0x6F98      	MOVWF       FARG_T6963C_setPtr_c, 1
0x0A36	0xDCA6      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,580 :: 		
0x0A38	0x0012      	RETURN      0
; end of _T6963C_init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0A3A	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0A3C	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0A40	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0A42	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0A44	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0A46	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
0x0A48	0x0012      	RETURN      0
; end of ___CC2DW
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x0A4A	0x0EFF      	MOVLW       _UART1_Write
0x0A4C	0x0100      	MOVLB       0
0x0A4E	0x6F81      	MOVWF       _UART_Wr_Ptr, 1
0x0A50	0x0EFF      	MOVLW       hi_addr(_UART1_Write)
0x0A52	0x6F82      	MOVWF       _UART_Wr_Ptr+1, 1
0x0A54	0x0EFF      	MOVLW       FARG_UART1_Write_data_
0x0A56	0x6F83      	MOVWF       _UART_Wr_Ptr+2, 1
0x0A58	0x0EFF      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0A5A	0x6F84      	MOVWF       _UART_Wr_Ptr+3, 1
;__Lib_UART_c67.c,19 :: 		
0x0A5C	0x0EFF      	MOVLW       _UART1_Read
0x0A5E	0x6F85      	MOVWF       _UART_Rd_Ptr, 1
0x0A60	0x0EFF      	MOVLW       hi_addr(_UART1_Read)
0x0A62	0x6F86      	MOVWF       _UART_Rd_Ptr+1, 1
0x0A64	0x0E00      	MOVLW       0
0x0A66	0x6F87      	MOVWF       _UART_Rd_Ptr+2, 1
0x0A68	0x0E00      	MOVLW       0
0x0A6A	0x6F88      	MOVWF       _UART_Rd_Ptr+3, 1
;__Lib_UART_c67.c,20 :: 		
0x0A6C	0x0EFF      	MOVLW       _UART1_Data_Ready
0x0A6E	0x6E74      	MOVWF       _UART_Rdy_Ptr 
0x0A70	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0A72	0x6E75      	MOVWF       _UART_Rdy_Ptr+1 
0x0A74	0x0E00      	MOVLW       0
0x0A76	0x6E76      	MOVWF       _UART_Rdy_Ptr+2 
0x0A78	0x0E00      	MOVLW       0
0x0A7A	0x6E77      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67.c,21 :: 		
0x0A7C	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0A7E	0x6E78      	MOVWF       _UART_Tx_Idle_Ptr 
0x0A80	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0A82	0x6E79      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x0A84	0x0E00      	MOVLW       0
0x0A86	0x6E7A      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x0A88	0x0E00      	MOVLW       0
0x0A8A	0x6E7B      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67.c,23 :: 		
0x0A8C	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0A8E	0x0E90      	MOVLW       144
0x0A90	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x0A92	0x8E94      	BSF         TRISC7_bit, 7 
;__Lib_UART_c67.c,26 :: 		
0x0A94	0x9C94      	BCF         TRISC6_bit, 6 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x0A96	0xAA9E      	BTFSS       PIR1, 5 
0x0A98	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x0A9A	0xF000CFAE  	MOVFF       RCREG, R0
0x0A9E	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
0x0AA0	0x0012      	RETURN      0
; end of _UART1_Init
_Div_16x16_S:
;__Lib_Math.c,200 :: 		
;__Lib_Math.c,208 :: 		
0x0AA2	0x5004      	MOVF        R4, 0 
0x0AA4	0x0A00      	XORLW       0
0x0AA6	0xE108      	BNZ         L_Div_16x16_S0
;__Lib_Math.c,209 :: 		
0x0AA8	0x5005      	MOVF        R5, 0 
0x0AAA	0x0A00      	XORLW       0
0x0AAC	0xE105      	BNZ         L_Div_16x16_S1
;__Lib_Math.c,210 :: 		
0x0AAE	0x0EFF      	MOVLW       255
0x0AB0	0x6E00      	MOVWF       R0 
;__Lib_Math.c,211 :: 		
0x0AB2	0x0E7F      	MOVLW       127
0x0AB4	0x6E01      	MOVWF       R1 
;__Lib_Math.c,212 :: 		
0x0AB6	0x0012      	RETURN      0
;__Lib_Math.c,213 :: 		
L_Div_16x16_S1:
L_Div_16x16_S0:
;__Lib_Math.c,216 :: 		
0x0AB8	0x6A0D      	CLRF        R13, 0
;__Lib_Math.c,217 :: 		
0x0ABA	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,218 :: 		
0x0ABC	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,219 :: 		
0x0ABE	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,220 :: 		
0x0AC0	0x1000      	IORWF       R0, 0, 0
;__Lib_Math.c,221 :: 		
0x0AC2	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,222 :: 		
0x0AC4	0x0C00      	RETLW       0
;__Lib_Math.c,224 :: 		
0x0AC6	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,225 :: 		
0x0AC8	0x1805      	XORWF       R5, 0, 0
;__Lib_Math.c,226 :: 		
0x0ACA	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,227 :: 		
0x0ACC	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,228 :: 		
0x0ACE	0x1E0D      	COMF        R13, 1, 0
;__Lib_Math.c,230 :: 		
0x0AD0	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,232 :: 		
0x0AD2	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,233 :: 		
0x0AD4	0xD005      	BRA         $+12
;__Lib_Math.c,235 :: 		
0x0AD6	0x1E04      	COMF        R4, 1, 0
;__Lib_Math.c,236 :: 		
0x0AD8	0x1E05      	COMF        R5, 1, 0
;__Lib_Math.c,237 :: 		
0x0ADA	0x2A04      	INCF        R4, 1, 0
;__Lib_Math.c,238 :: 		
0x0ADC	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,239 :: 		
0x0ADE	0x2A05      	INCF        R5, 1, 0
;__Lib_Math.c,241 :: 		
0x0AE0	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,242 :: 		
0x0AE2	0xD005      	BRA         $+12
;__Lib_Math.c,244 :: 		
0x0AE4	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,245 :: 		
0x0AE6	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,246 :: 		
0x0AE8	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,247 :: 		
0x0AEA	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,248 :: 		
0x0AEC	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,250 :: 		
0x0AEE	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,251 :: 		
0x0AF0	0x1005      	IORWF       R5, 0, 0
;__Lib_Math.c,252 :: 		
0x0AF2	0x6E0A      	MOVWF       R10, 0
;__Lib_Math.c,253 :: 		
0x0AF4	0xBE0A      	BTFSC       R10, 7, 0
;__Lib_Math.c,254 :: 		
0x0AF6	0xD010      	BRA         $+34
;__Lib_Math.c,256 :: 		
0x0AF8	0xDE4A      	RCALL       _Div_16x16_S_L
;__Lib_Math.c,258 :: 		
0x0AFA	0xB00B      	BTFSC       R11, 0, 0
;__Lib_Math.c,259 :: 		
0x0AFC	0xD020      	BRA         $+66
;__Lib_Math.c,261 :: 		
0x0AFE	0xAE0D      	BTFSS       R13, 7, 0
;__Lib_Math.c,262 :: 		
0x0B00	0x0C00      	RETLW       0
;__Lib_Math.c,264 :: 		
0x0B02	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,265 :: 		
0x0B04	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,266 :: 		
0x0B06	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,267 :: 		
0x0B08	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,268 :: 		
0x0B0A	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,270 :: 		
0x0B0C	0x1E08      	COMF        R8, 1, 0
;__Lib_Math.c,271 :: 		
0x0B0E	0x1E09      	COMF        R9, 1, 0
;__Lib_Math.c,272 :: 		
0x0B10	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,273 :: 		
0x0B12	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,274 :: 		
0x0B14	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,276 :: 		
0x0B16	0x0C00      	RETLW       0
;__Lib_Math.c,278 :: 		
0x0B18	0xAE05      	BTFSS       R5, 7, 0
;__Lib_Math.c,279 :: 		
0x0B1A	0xD00D      	BRA         $+28
;__Lib_Math.c,280 :: 		
0x0B1C	0xBE01      	BTFSC       R1, 7, 0
;__Lib_Math.c,281 :: 		
0x0B1E	0xD007      	BRA         $+16
;__Lib_Math.c,282 :: 		
0x0B20	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,283 :: 		
0x0B22	0x6E09      	MOVWF       R9, 0
;__Lib_Math.c,284 :: 		
0x0B24	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,285 :: 		
0x0B26	0x6E08      	MOVWF       R8, 0
;__Lib_Math.c,286 :: 		
0x0B28	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,287 :: 		
0x0B2A	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,288 :: 		
0x0B2C	0xD7E8      	BRA         $-46
;__Lib_Math.c,289 :: 		
0x0B2E	0x6A01      	CLRF        R1, 0
;__Lib_Math.c,290 :: 		
0x0B30	0x6A00      	CLRF        R0, 0
;__Lib_Math.c,291 :: 		
0x0B32	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,292 :: 		
0x0B34	0x0C00      	RETLW       0
;__Lib_Math.c,294 :: 		
0x0B36	0x1E01      	COMF        R1, 1, 0
;__Lib_Math.c,295 :: 		
0x0B38	0x1E00      	COMF        R0, 1, 0
;__Lib_Math.c,296 :: 		
0x0B3A	0x2A0B      	INCF        R11, 1, 0
;__Lib_Math.c,297 :: 		
0x0B3C	0xD7DD      	BRA         $-68
;__Lib_Math.c,299 :: 		
0x0B3E	0x2A08      	INCF        R8, 1, 0
;__Lib_Math.c,300 :: 		
0x0B40	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,301 :: 		
0x0B42	0x2A09      	INCF        R9, 1, 0
;__Lib_Math.c,302 :: 		
0x0B44	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,303 :: 		
0x0B46	0x5C08      	SUBWF       R8, 0, 0
;__Lib_Math.c,304 :: 		
0x0B48	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,305 :: 		
0x0B4A	0xD7D9      	BRA         $-76
;__Lib_Math.c,306 :: 		
0x0B4C	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,307 :: 		
0x0B4E	0x5C09      	SUBWF       R9, 0, 0
;__Lib_Math.c,308 :: 		
0x0B50	0xA4D8      	BTFSS       STATUS, 2, 0
;__Lib_Math.c,309 :: 		
0x0B52	0xD7D5      	BRA         $-84
;__Lib_Math.c,310 :: 		
0x0B54	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,311 :: 		
0x0B56	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,312 :: 		
0x0B58	0x2A00      	INCF        R0, 1, 0
;__Lib_Math.c,313 :: 		
0x0B5A	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,314 :: 		
0x0B5C	0x2A01      	INCF        R1, 1, 0
;__Lib_Math.c,315 :: 		
0x0B5E	0xAE01      	BTFSS       R1, 7, 0
;__Lib_Math.c,316 :: 		
0x0B60	0xD7CE      	BRA         $-98
;__Lib_Math.c,317 :: 		
0x0B62	0x0000      	NOP
;__Lib_Math.c,318 :: 		
0x0B64	0x0CFF      	RETLW       255
;__Lib_Math.c,320 :: 		
0x0B66	0x0012      	RETURN      0
; end of _Div_16x16_S
_I2C1_Init:
;__Lib_I2C_c34.c,2 :: 		
;__Lib_I2C_c34.c,9 :: 		
0x0B68	0x9894      	BCF         TRISC4_bit, 4 
;__Lib_I2C_c34.c,10 :: 		
0x0B6A	0x9694      	BCF         TRISC3_bit, 3 
;__Lib_I2C_c34.c,13 :: 		
0x0B6C	0x988B      	BCF         LATC4_bit, 4 
;__Lib_I2C_c34.c,14 :: 		
0x0B6E	0x968B      	BCF         LATC3_bit, 3 
;__Lib_I2C_c34.c,17 :: 		
0x0B70	0x8894      	BSF         TRISC4_bit, 4 
;__Lib_I2C_c34.c,18 :: 		
0x0B72	0x8694      	BSF         TRISC3_bit, 3 
;__Lib_I2C_c34.c,20 :: 		
0x0B74	0x9EC7      	BCF         SSPSTAT, 7 
;__Lib_I2C_c34.c,21 :: 		
0x0B76	0x9CC7      	BCF         SSPSTAT, 6 
;__Lib_I2C_c34.c,22 :: 		
0x0B78	0x0E38      	MOVLW       56
0x0B7A	0x6EC6      	MOVWF       SSPCON1 
;__Lib_I2C_c34.c,25 :: 		
0x0B7C	0x0012      	RETURN      0
; end of _I2C1_Init
_Finish:
;compy.c,449 :: 		void Finish() {
;compy.c,450 :: 		for(i = 0; i < 15; ++i) {
0x0B7E	0x6A46      	CLRF        _i 
0x0B80	0x6A47      	CLRF        _i+1 
L_Finish120:
0x0B82	0x0E80      	MOVLW       128
0x0B84	0x1847      	XORWF       _i+1, 0 
0x0B86	0x6E00      	MOVWF       R0 
0x0B88	0x0E80      	MOVLW       128
0x0B8A	0x5C00      	SUBWF       R0, 0 
0x0B8C	0xE102      	BNZ         L__Finish169
0x0B8E	0x0E0F      	MOVLW       15
0x0B90	0x5C46      	SUBWF       _i, 0 
L__Finish169:
0x0B92	0xE231      	BC          L_Finish121
;compy.c,451 :: 		for(j = 0; j < 8; ++j) {
0x0B94	0x6A44      	CLRF        _j 
0x0B96	0x6A45      	CLRF        _j+1 
L_Finish123:
0x0B98	0x0E80      	MOVLW       128
0x0B9A	0x1845      	XORWF       _j+1, 0 
0x0B9C	0x6E00      	MOVWF       R0 
0x0B9E	0x0E80      	MOVLW       128
0x0BA0	0x5C00      	SUBWF       R0, 0 
0x0BA2	0xE102      	BNZ         L__Finish170
0x0BA4	0x0E08      	MOVLW       8
0x0BA6	0x5C44      	SUBWF       _j, 0 
L__Finish170:
0x0BA8	0xE223      	BC          L_Finish124
;compy.c,452 :: 		world[i][j] = ' ';
0x0BAA	0xF000C046  	MOVFF       _i, R0
0x0BAE	0xF001C047  	MOVFF       _i+1, R1
0x0BB2	0x0E1E      	MOVLW       30
0x0BB4	0x6E04      	MOVWF       R4 
0x0BB6	0x0E00      	MOVLW       0
0x0BB8	0x6E05      	MOVWF       R5 
0x0BBA	0xDC0E      	RCALL       _Mul_16x16_U
0x0BBC	0x0E89      	MOVLW       _world
0x0BBE	0x2400      	ADDWF       R0, 0 
0x0BC0	0x6E03      	MOVWF       R3 
0x0BC2	0x0E00      	MOVLW       hi_addr(_world)
0x0BC4	0x2001      	ADDWFC      R1, 0 
0x0BC6	0x6E04      	MOVWF       R4 
0x0BC8	0xF000C044  	MOVFF       _j, R0
0x0BCC	0xF001C045  	MOVFF       _j+1, R1
0x0BD0	0x3600      	RLCF        R0, 1 
0x0BD2	0x9000      	BCF         R0, 0 
0x0BD4	0x3601      	RLCF        R1, 1 
0x0BD6	0x5000      	MOVF        R0, 0 
0x0BD8	0x2403      	ADDWF       R3, 0 
0x0BDA	0x6EE1      	MOVWF       FSR1L 
0x0BDC	0x5001      	MOVF        R1, 0 
0x0BDE	0x2004      	ADDWFC      R4, 0 
0x0BE0	0x6EE2      	MOVWF       FSR1H 
0x0BE2	0x0E20      	MOVLW       32
0x0BE4	0x6EE6      	MOVWF       POSTINC1 
0x0BE6	0x0E00      	MOVLW       0
0x0BE8	0x6EE6      	MOVWF       POSTINC1 
;compy.c,451 :: 		for(j = 0; j < 8; ++j) {
0x0BEA	0x4A44      	INFSNZ      _j, 1 
0x0BEC	0x2A45      	INCF        _j+1, 1 
;compy.c,453 :: 		}
0x0BEE	0xD7D4      	BRA         L_Finish123
L_Finish124:
;compy.c,450 :: 		for(i = 0; i < 15; ++i) {
0x0BF0	0x4A46      	INFSNZ      _i, 1 
0x0BF2	0x2A47      	INCF        _i+1, 1 
;compy.c,454 :: 		}
0x0BF4	0xD7C6      	BRA         L_Finish120
L_Finish121:
;compy.c,455 :: 		Print_World();
0x0BF6	0xDD2B      	RCALL       _Print_World
;compy.c,456 :: 		if (IS_GAME_OVER) {
0x0BF8	0x503C      	MOVF        _IS_GAME_OVER, 0 
0x0BFA	0x103D      	IORWF       _IS_GAME_OVER+1, 0 
0x0BFC	0xE00B      	BZ          L_Finish126
;compy.c,457 :: 		print_text(2, 1, "Game over");
0x0BFE	0x0E02      	MOVLW       2
0x0C00	0x0101      	MOVLB       1
0x0C02	0x6F7D      	MOVWF       FARG_print_text_line, 1
0x0C04	0x0E01      	MOVLW       1
0x0C06	0x6F7E      	MOVWF       FARG_print_text_column, 1
0x0C08	0x0E2C      	MOVLW       ?lstr3_compy
0x0C0A	0x6F7F      	MOVWF       FARG_print_text_text, 1
0x0C0C	0x0E00      	MOVLW       hi_addr(?lstr3_compy)
0x0C0E	0x6F80      	MOVWF       FARG_print_text_text+1, 1
0x0C10	0xDD09      	RCALL       _print_text
;compy.c,458 :: 		} else {
0x0C12	0xD00A      	BRA         L_Finish127
L_Finish126:
;compy.c,459 :: 		print_text(2, 1, "Win");
0x0C14	0x0E02      	MOVLW       2
0x0C16	0x0101      	MOVLB       1
0x0C18	0x6F7D      	MOVWF       FARG_print_text_line, 1
0x0C1A	0x0E01      	MOVLW       1
0x0C1C	0x6F7E      	MOVWF       FARG_print_text_column, 1
0x0C1E	0x0E28      	MOVLW       ?lstr4_compy
0x0C20	0x6F7F      	MOVWF       FARG_print_text_text, 1
0x0C22	0x0E00      	MOVLW       hi_addr(?lstr4_compy)
0x0C24	0x6F80      	MOVWF       FARG_print_text_text+1, 1
0x0C26	0xDCFE      	RCALL       _print_text
;compy.c,460 :: 		}
L_Finish127:
;compy.c,461 :: 		}
0x0C28	0x0012      	RETURN      0
; end of _Finish
_update_pacman:
;compy.c,351 :: 		void update_pacman(short direction) {
;compy.c,352 :: 		if (direction == 0) {
0x0C2A	0x507E      	MOVF        FARG_update_pacman_direction, 0 
0x0C2C	0x0A00      	XORLW       0
0x0C2E	0xE10B      	BNZ         L_update_pacman103
;compy.c,353 :: 		newPacman_x = pacman_x;
0x0C30	0xF04EC050  	MOVFF       _pacman_x, _newPacman_x
0x0C34	0xF04FC051  	MOVFF       _pacman_x+1, _newPacman_x+1
;compy.c,354 :: 		newPacman_y = pacman_y - 1;
0x0C38	0x0E01      	MOVLW       1
0x0C3A	0x5C60      	SUBWF       _pacman_y, 0 
0x0C3C	0x6E5A      	MOVWF       _newPacman_y 
0x0C3E	0x0E00      	MOVLW       0
0x0C40	0x5861      	SUBWFB      _pacman_y+1, 0 
0x0C42	0x6E5B      	MOVWF       _newPacman_y+1 
;compy.c,355 :: 		} else if (direction == 1) {
0x0C44	0xD029      	BRA         L_update_pacman104
L_update_pacman103:
0x0C46	0x507E      	MOVF        FARG_update_pacman_direction, 0 
0x0C48	0x0A01      	XORLW       1
0x0C4A	0xE10B      	BNZ         L_update_pacman105
;compy.c,356 :: 		newPacman_x = pacman_x;
0x0C4C	0xF04EC050  	MOVFF       _pacman_x, _newPacman_x
0x0C50	0xF04FC051  	MOVFF       _pacman_x+1, _newPacman_x+1
;compy.c,357 :: 		newPacman_y = pacman_y + 1;
0x0C54	0x0E01      	MOVLW       1
0x0C56	0x2460      	ADDWF       _pacman_y, 0 
0x0C58	0x6E5A      	MOVWF       _newPacman_y 
0x0C5A	0x0E00      	MOVLW       0
0x0C5C	0x2061      	ADDWFC      _pacman_y+1, 0 
0x0C5E	0x6E5B      	MOVWF       _newPacman_y+1 
;compy.c,358 :: 		} else if (direction == 2) {
0x0C60	0xD01B      	BRA         L_update_pacman106
L_update_pacman105:
0x0C62	0x507E      	MOVF        FARG_update_pacman_direction, 0 
0x0C64	0x0A02      	XORLW       2
0x0C66	0xE10B      	BNZ         L_update_pacman107
;compy.c,359 :: 		newPacman_x = pacman_x + 1;
0x0C68	0x0E01      	MOVLW       1
0x0C6A	0x2450      	ADDWF       _pacman_x, 0 
0x0C6C	0x6E4E      	MOVWF       _newPacman_x 
0x0C6E	0x0E00      	MOVLW       0
0x0C70	0x2051      	ADDWFC      _pacman_x+1, 0 
0x0C72	0x6E4F      	MOVWF       _newPacman_x+1 
;compy.c,360 :: 		newPacman_y = pacman_y;
0x0C74	0xF05AC060  	MOVFF       _pacman_y, _newPacman_y
0x0C78	0xF05BC061  	MOVFF       _pacman_y+1, _newPacman_y+1
;compy.c,361 :: 		} else if (direction == 3) {
0x0C7C	0xD00D      	BRA         L_update_pacman108
L_update_pacman107:
0x0C7E	0x507E      	MOVF        FARG_update_pacman_direction, 0 
0x0C80	0x0A03      	XORLW       3
0x0C82	0xE10A      	BNZ         L_update_pacman109
;compy.c,362 :: 		newPacman_x = pacman_x - 1;
0x0C84	0x0E01      	MOVLW       1
0x0C86	0x5C50      	SUBWF       _pacman_x, 0 
0x0C88	0x6E4E      	MOVWF       _newPacman_x 
0x0C8A	0x0E00      	MOVLW       0
0x0C8C	0x5851      	SUBWFB      _pacman_x+1, 0 
0x0C8E	0x6E4F      	MOVWF       _newPacman_x+1 
;compy.c,363 :: 		newPacman_y = pacman_y;
0x0C90	0xF05AC060  	MOVFF       _pacman_y, _newPacman_y
0x0C94	0xF05BC061  	MOVFF       _pacman_y+1, _newPacman_y+1
;compy.c,364 :: 		}
L_update_pacman109:
L_update_pacman108:
L_update_pacman106:
L_update_pacman104:
;compy.c,366 :: 		newPacmanOrientation = update_pacman_orientation(newPacman_x, newPacman_y);
0x0C98	0xF17DC04E  	MOVFF       _newPacman_x, FARG_update_pacman_orientation_newX
0x0C9C	0xF17EC04F  	MOVFF       _newPacman_x+1, FARG_update_pacman_orientation_newX+1
0x0CA0	0xF17FC05A  	MOVFF       _newPacman_y, FARG_update_pacman_orientation_newY
0x0CA4	0xF180C05B  	MOVFF       _newPacman_y+1, FARG_update_pacman_orientation_newY+1
0x0CA8	0xDDE3      	RCALL       _update_pacman_orientation
0x0CAA	0xF05CC000  	MOVFF       R0, _newPacmanOrientation
0x0CAE	0x0E00      	MOVLW       0
0x0CB0	0x6E5D      	MOVWF       _newPacmanOrientation+1 
;compy.c,368 :: 		if (newPacman_x < 0) newPacman_x = 14;
0x0CB2	0x0E80      	MOVLW       128
0x0CB4	0x184F      	XORWF       _newPacman_x+1, 0 
0x0CB6	0x6E00      	MOVWF       R0 
0x0CB8	0x0E80      	MOVLW       128
0x0CBA	0x5C00      	SUBWF       R0, 0 
0x0CBC	0xE102      	BNZ         L__update_pacman162
0x0CBE	0x0E00      	MOVLW       0
0x0CC0	0x5C4E      	SUBWF       _newPacman_x, 0 
L__update_pacman162:
0x0CC2	0xE204      	BC          L_update_pacman110
0x0CC4	0x0E0E      	MOVLW       14
0x0CC6	0x6E4E      	MOVWF       _newPacman_x 
0x0CC8	0x0E00      	MOVLW       0
0x0CCA	0x6E4F      	MOVWF       _newPacman_x+1 
L_update_pacman110:
;compy.c,369 :: 		if (newPacman_x >= 14) newPacman_x = 0;
0x0CCC	0x0E80      	MOVLW       128
0x0CCE	0x184F      	XORWF       _newPacman_x+1, 0 
0x0CD0	0x6E00      	MOVWF       R0 
0x0CD2	0x0E80      	MOVLW       128
0x0CD4	0x5C00      	SUBWF       R0, 0 
0x0CD6	0xE102      	BNZ         L__update_pacman163
0x0CD8	0x0E0E      	MOVLW       14
0x0CDA	0x5C4E      	SUBWF       _newPacman_x, 0 
L__update_pacman163:
0x0CDC	0xE302      	BNC         L_update_pacman111
0x0CDE	0x6A4E      	CLRF        _newPacman_x 
0x0CE0	0x6A4F      	CLRF        _newPacman_x+1 
L_update_pacman111:
;compy.c,371 :: 		if (newPacman_y < 0) newPacman_y = 14;
0x0CE2	0x0E80      	MOVLW       128
0x0CE4	0x185B      	XORWF       _newPacman_y+1, 0 
0x0CE6	0x6E00      	MOVWF       R0 
0x0CE8	0x0E80      	MOVLW       128
0x0CEA	0x5C00      	SUBWF       R0, 0 
0x0CEC	0xE102      	BNZ         L__update_pacman164
0x0CEE	0x0E00      	MOVLW       0
0x0CF0	0x5C5A      	SUBWF       _newPacman_y, 0 
L__update_pacman164:
0x0CF2	0xE204      	BC          L_update_pacman112
0x0CF4	0x0E0E      	MOVLW       14
0x0CF6	0x6E5A      	MOVWF       _newPacman_y 
0x0CF8	0x0E00      	MOVLW       0
0x0CFA	0x6E5B      	MOVWF       _newPacman_y+1 
L_update_pacman112:
;compy.c,372 :: 		if (newPacman_y >= 14) newPacman_y = 0;
0x0CFC	0x0E80      	MOVLW       128
0x0CFE	0x185B      	XORWF       _newPacman_y+1, 0 
0x0D00	0x6E00      	MOVWF       R0 
0x0D02	0x0E80      	MOVLW       128
0x0D04	0x5C00      	SUBWF       R0, 0 
0x0D06	0xE102      	BNZ         L__update_pacman165
0x0D08	0x0E0E      	MOVLW       14
0x0D0A	0x5C5A      	SUBWF       _newPacman_y, 0 
L__update_pacman165:
0x0D0C	0xE302      	BNC         L_update_pacman113
0x0D0E	0x6A5A      	CLRF        _newPacman_y 
0x0D10	0x6A5B      	CLRF        _newPacman_y+1 
L_update_pacman113:
;compy.c,374 :: 		if (world[newPacman_x][newPacman_y] != barrier_orientation) {
0x0D12	0xF000C04E  	MOVFF       _newPacman_x, R0
0x0D16	0xF001C04F  	MOVFF       _newPacman_x+1, R1
0x0D1A	0x0E1E      	MOVLW       30
0x0D1C	0x6E04      	MOVWF       R4 
0x0D1E	0x0E00      	MOVLW       0
0x0D20	0x6E05      	MOVWF       R5 
0x0D22	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0D26	0x0E89      	MOVLW       _world
0x0D28	0x2400      	ADDWF       R0, 0 
0x0D2A	0x6E03      	MOVWF       R3 
0x0D2C	0x0E00      	MOVLW       hi_addr(_world)
0x0D2E	0x2001      	ADDWFC      R1, 0 
0x0D30	0x6E04      	MOVWF       R4 
0x0D32	0xF000C05A  	MOVFF       _newPacman_y, R0
0x0D36	0xF001C05B  	MOVFF       _newPacman_y+1, R1
0x0D3A	0x3600      	RLCF        R0, 1 
0x0D3C	0x9000      	BCF         R0, 0 
0x0D3E	0x3601      	RLCF        R1, 1 
0x0D40	0x5000      	MOVF        R0, 0 
0x0D42	0x2403      	ADDWF       R3, 0 
0x0D44	0x6EE9      	MOVWF       FSR0L 
0x0D46	0x5001      	MOVF        R1, 0 
0x0D48	0x2004      	ADDWFC      R4, 0 
0x0D4A	0x6EEA      	MOVWF       FSR0H 
0x0D4C	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0D50	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0D54	0x0E00      	MOVLW       0
0x0D56	0x1802      	XORWF       R2, 0 
0x0D58	0xE102      	BNZ         L__update_pacman166
0x0D5A	0x505E      	MOVF        _barrier_orientation, 0 
0x0D5C	0x1801      	XORWF       R1, 0 
L__update_pacman166:
0x0D5E	0xB4D8      	BTFSC       STATUS, 2 
0x0D60	0xD083      	BRA         L_update_pacman114
;compy.c,375 :: 		if (world[newPacman_x][newPacman_y] == food_orientation) {
0x0D62	0xF000C04E  	MOVFF       _newPacman_x, R0
0x0D66	0xF001C04F  	MOVFF       _newPacman_x+1, R1
0x0D6A	0x0E1E      	MOVLW       30
0x0D6C	0x6E04      	MOVWF       R4 
0x0D6E	0x0E00      	MOVLW       0
0x0D70	0x6E05      	MOVWF       R5 
0x0D72	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0D76	0x0E89      	MOVLW       _world
0x0D78	0x2400      	ADDWF       R0, 0 
0x0D7A	0x6E03      	MOVWF       R3 
0x0D7C	0x0E00      	MOVLW       hi_addr(_world)
0x0D7E	0x2001      	ADDWFC      R1, 0 
0x0D80	0x6E04      	MOVWF       R4 
0x0D82	0xF000C05A  	MOVFF       _newPacman_y, R0
0x0D86	0xF001C05B  	MOVFF       _newPacman_y+1, R1
0x0D8A	0x3600      	RLCF        R0, 1 
0x0D8C	0x9000      	BCF         R0, 0 
0x0D8E	0x3601      	RLCF        R1, 1 
0x0D90	0x5000      	MOVF        R0, 0 
0x0D92	0x2403      	ADDWF       R3, 0 
0x0D94	0x6EE9      	MOVWF       FSR0L 
0x0D96	0x5001      	MOVF        R1, 0 
0x0D98	0x2004      	ADDWFC      R4, 0 
0x0D9A	0x6EEA      	MOVWF       FSR0H 
0x0D9C	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0DA0	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0DA4	0x0E00      	MOVLW       0
0x0DA6	0x1802      	XORWF       R2, 0 
0x0DA8	0xE102      	BNZ         L__update_pacman167
0x0DAA	0x505F      	MOVF        _food_orientation, 0 
0x0DAC	0x1801      	XORWF       R1, 0 
L__update_pacman167:
0x0DAE	0xE104      	BNZ         L_update_pacman115
;compy.c,376 :: 		QTD_FOOD --;
0x0DB0	0x0E01      	MOVLW       1
0x0DB2	0x5E4B      	SUBWF       _QTD_FOOD, 1 
0x0DB4	0x0E00      	MOVLW       0
0x0DB6	0x5A4C      	SUBWFB      _QTD_FOOD+1, 1 
;compy.c,377 :: 		}
L_update_pacman115:
;compy.c,378 :: 		if (QTD_FOOD == 0) {
0x0DB8	0x0E00      	MOVLW       0
0x0DBA	0x184C      	XORWF       _QTD_FOOD+1, 0 
0x0DBC	0xE102      	BNZ         L__update_pacman168
0x0DBE	0x0E00      	MOVLW       0
0x0DC0	0x184B      	XORWF       _QTD_FOOD, 0 
L__update_pacman168:
0x0DC2	0xE106      	BNZ         L_update_pacman116
;compy.c,379 :: 		IS_FINISH = 1;
0x0DC4	0x0E01      	MOVLW       1
0x0DC6	0x6E3E      	MOVWF       _IS_FINISH 
0x0DC8	0x0E00      	MOVLW       0
0x0DCA	0x6E3F      	MOVWF       _IS_FINISH+1 
;compy.c,380 :: 		IS_GAME_OVER = 0;
0x0DCC	0x6A3C      	CLRF        _IS_GAME_OVER 
0x0DCE	0x6A3D      	CLRF        _IS_GAME_OVER+1 
;compy.c,381 :: 		}
L_update_pacman116:
;compy.c,383 :: 		pacman_orientation = newPacmanOrientation;
0x0DD0	0xF03BC05C  	MOVFF       _newPacmanOrientation, _pacman_orientation
;compy.c,385 :: 		world[pacman_x][pacman_y] = ' ';
0x0DD4	0xF000C050  	MOVFF       _pacman_x, R0
0x0DD8	0xF001C051  	MOVFF       _pacman_x+1, R1
0x0DDC	0x0E1E      	MOVLW       30
0x0DDE	0x6E04      	MOVWF       R4 
0x0DE0	0x0E00      	MOVLW       0
0x0DE2	0x6E05      	MOVWF       R5 
0x0DE4	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0DE8	0x0E89      	MOVLW       _world
0x0DEA	0x2400      	ADDWF       R0, 0 
0x0DEC	0x6E03      	MOVWF       R3 
0x0DEE	0x0E00      	MOVLW       hi_addr(_world)
0x0DF0	0x2001      	ADDWFC      R1, 0 
0x0DF2	0x6E04      	MOVWF       R4 
0x0DF4	0xF000C060  	MOVFF       _pacman_y, R0
0x0DF8	0xF001C061  	MOVFF       _pacman_y+1, R1
0x0DFC	0x3600      	RLCF        R0, 1 
0x0DFE	0x9000      	BCF         R0, 0 
0x0E00	0x3601      	RLCF        R1, 1 
0x0E02	0x5000      	MOVF        R0, 0 
0x0E04	0x2403      	ADDWF       R3, 0 
0x0E06	0x6EE1      	MOVWF       FSR1L 
0x0E08	0x5001      	MOVF        R1, 0 
0x0E0A	0x2004      	ADDWFC      R4, 0 
0x0E0C	0x6EE2      	MOVWF       FSR1H 
0x0E0E	0x0E20      	MOVLW       32
0x0E10	0x6EE6      	MOVWF       POSTINC1 
0x0E12	0x0E00      	MOVLW       0
0x0E14	0x6EE6      	MOVWF       POSTINC1 
;compy.c,386 :: 		world[newPacman_x][newPacman_y] = pacman_orientation;
0x0E16	0xF000C04E  	MOVFF       _newPacman_x, R0
0x0E1A	0xF001C04F  	MOVFF       _newPacman_x+1, R1
0x0E1E	0x0E1E      	MOVLW       30
0x0E20	0x6E04      	MOVWF       R4 
0x0E22	0x0E00      	MOVLW       0
0x0E24	0x6E05      	MOVWF       R5 
0x0E26	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0E2A	0x0E89      	MOVLW       _world
0x0E2C	0x2400      	ADDWF       R0, 0 
0x0E2E	0x6E03      	MOVWF       R3 
0x0E30	0x0E00      	MOVLW       hi_addr(_world)
0x0E32	0x2001      	ADDWFC      R1, 0 
0x0E34	0x6E04      	MOVWF       R4 
0x0E36	0xF000C05A  	MOVFF       _newPacman_y, R0
0x0E3A	0xF001C05B  	MOVFF       _newPacman_y+1, R1
0x0E3E	0x3600      	RLCF        R0, 1 
0x0E40	0x9000      	BCF         R0, 0 
0x0E42	0x3601      	RLCF        R1, 1 
0x0E44	0x5000      	MOVF        R0, 0 
0x0E46	0x2403      	ADDWF       R3, 0 
0x0E48	0x6EE1      	MOVWF       FSR1L 
0x0E4A	0x5001      	MOVF        R1, 0 
0x0E4C	0x2004      	ADDWFC      R4, 0 
0x0E4E	0x6EE2      	MOVWF       FSR1H 
0x0E50	0xFFE6C03B  	MOVFF       _pacman_orientation, POSTINC1
0x0E54	0x0E00      	MOVLW       0
0x0E56	0x6EE6      	MOVWF       POSTINC1 
;compy.c,388 :: 		pacman_x = newPacman_x;
0x0E58	0xF050C04E  	MOVFF       _newPacman_x, _pacman_x
0x0E5C	0xF051C04F  	MOVFF       _newPacman_x+1, _pacman_x+1
;compy.c,389 :: 		pacman_y = newPacman_y;
0x0E60	0xF060C05A  	MOVFF       _newPacman_y, _pacman_y
0x0E64	0xF061C05B  	MOVFF       _newPacman_y+1, _pacman_y+1
;compy.c,390 :: 		}
L_update_pacman114:
;compy.c,391 :: 		}
0x0E68	0x0012      	RETURN      0
; end of _update_pacman
_Create_World:
;compy.c,277 :: 		void Create_World() {
;compy.c,278 :: 		for(i = 0; i < 15; ++i) {
0x0E6A	0x6A46      	CLRF        _i 
0x0E6C	0x6A47      	CLRF        _i+1 
L_Create_World66:
0x0E6E	0x0E80      	MOVLW       128
0x0E70	0x1847      	XORWF       _i+1, 0 
0x0E72	0x6E00      	MOVWF       R0 
0x0E74	0x0E80      	MOVLW       128
0x0E76	0x5C00      	SUBWF       R0, 0 
0x0E78	0xE102      	BNZ         L__Create_World152
0x0E7A	0x0E0F      	MOVLW       15
0x0E7C	0x5C46      	SUBWF       _i, 0 
L__Create_World152:
0x0E7E	0xE232      	BC          L_Create_World67
;compy.c,279 :: 		for(j = 0; j < 15 ; ++j)
0x0E80	0x6A44      	CLRF        _j 
0x0E82	0x6A45      	CLRF        _j+1 
L_Create_World69:
0x0E84	0x0E80      	MOVLW       128
0x0E86	0x1845      	XORWF       _j+1, 0 
0x0E88	0x6E00      	MOVWF       R0 
0x0E8A	0x0E80      	MOVLW       128
0x0E8C	0x5C00      	SUBWF       R0, 0 
0x0E8E	0xE102      	BNZ         L__Create_World153
0x0E90	0x0E0F      	MOVLW       15
0x0E92	0x5C44      	SUBWF       _j, 0 
L__Create_World153:
0x0E94	0xE224      	BC          L_Create_World70
;compy.c,281 :: 		world[i][j] = ' ';
0x0E96	0xF000C046  	MOVFF       _i, R0
0x0E9A	0xF001C047  	MOVFF       _i+1, R1
0x0E9E	0x0E1E      	MOVLW       30
0x0EA0	0x6E04      	MOVWF       R4 
0x0EA2	0x0E00      	MOVLW       0
0x0EA4	0x6E05      	MOVWF       R5 
0x0EA6	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0EAA	0x0E89      	MOVLW       _world
0x0EAC	0x2400      	ADDWF       R0, 0 
0x0EAE	0x6E03      	MOVWF       R3 
0x0EB0	0x0E00      	MOVLW       hi_addr(_world)
0x0EB2	0x2001      	ADDWFC      R1, 0 
0x0EB4	0x6E04      	MOVWF       R4 
0x0EB6	0xF000C044  	MOVFF       _j, R0
0x0EBA	0xF001C045  	MOVFF       _j+1, R1
0x0EBE	0x3600      	RLCF        R0, 1 
0x0EC0	0x9000      	BCF         R0, 0 
0x0EC2	0x3601      	RLCF        R1, 1 
0x0EC4	0x5000      	MOVF        R0, 0 
0x0EC6	0x2403      	ADDWF       R3, 0 
0x0EC8	0x6EE1      	MOVWF       FSR1L 
0x0ECA	0x5001      	MOVF        R1, 0 
0x0ECC	0x2004      	ADDWFC      R4, 0 
0x0ECE	0x6EE2      	MOVWF       FSR1H 
0x0ED0	0x0E20      	MOVLW       32
0x0ED2	0x6EE6      	MOVWF       POSTINC1 
0x0ED4	0x0E00      	MOVLW       0
0x0ED6	0x6EE6      	MOVWF       POSTINC1 
;compy.c,279 :: 		for(j = 0; j < 15 ; ++j)
0x0ED8	0x4A44      	INFSNZ      _j, 1 
0x0EDA	0x2A45      	INCF        _j+1, 1 
;compy.c,282 :: 		}
0x0EDC	0xD7D3      	BRA         L_Create_World69
L_Create_World70:
;compy.c,278 :: 		for(i = 0; i < 15; ++i) {
0x0EDE	0x4A46      	INFSNZ      _i, 1 
0x0EE0	0x2A47      	INCF        _i+1, 1 
;compy.c,283 :: 		}
0x0EE2	0xD7C5      	BRA         L_Create_World66
L_Create_World67:
;compy.c,285 :: 		world[4][myrand(rands * 5) & 0b000000000000000111] = barrier_orientation;
0x0EE4	0xF000C038  	MOVFF       _rands, R0
0x0EE8	0xF001C039  	MOVFF       _rands+1, R1
0x0EEC	0x0E05      	MOVLW       5
0x0EEE	0x6E04      	MOVWF       R4 
0x0EF0	0x0E00      	MOVLW       0
0x0EF2	0x6E05      	MOVWF       R5 
0x0EF4	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0EF8	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x0EFC	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x0F00	0xDC72      	RCALL       _myrand
0x0F02	0x0E07      	MOVLW       7
0x0F04	0x1400      	ANDWF       R0, 0 
0x0F06	0x6E03      	MOVWF       R3 
0x0F08	0xF004C001  	MOVFF       R1, R4
0x0F0C	0x0E00      	MOVLW       0
0x0F0E	0x1604      	ANDWF       R4, 1 
0x0F10	0xF000C003  	MOVFF       R3, R0
0x0F14	0xF001C004  	MOVFF       R4, R1
0x0F18	0x3600      	RLCF        R0, 1 
0x0F1A	0x9000      	BCF         R0, 0 
0x0F1C	0x3601      	RLCF        R1, 1 
0x0F1E	0x0E01      	MOVLW       _world+120
0x0F20	0x2400      	ADDWF       R0, 0 
0x0F22	0x6EE1      	MOVWF       FSR1L 
0x0F24	0x0E01      	MOVLW       hi_addr(_world+120)
0x0F26	0x2001      	ADDWFC      R1, 0 
0x0F28	0x6EE2      	MOVWF       FSR1H 
0x0F2A	0xFFE6C05E  	MOVFF       _barrier_orientation, POSTINC1
0x0F2E	0x0E00      	MOVLW       0
0x0F30	0x6EE6      	MOVWF       POSTINC1 
;compy.c,286 :: 		world[myrand(rands * 1) & 0b000000000000000111][myrand(rands * 1) & 0b000000000000000111] = barrier_orientation;
0x0F32	0xF17DC038  	MOVFF       _rands, FARG_myrand_seed
0x0F36	0xF17EC039  	MOVFF       _rands+1, FARG_myrand_seed+1
0x0F3A	0xDC55      	RCALL       _myrand
0x0F3C	0x0E07      	MOVLW       7
0x0F3E	0x1600      	ANDWF       R0, 1 
0x0F40	0x0E00      	MOVLW       0
0x0F42	0x1601      	ANDWF       R1, 1 
0x0F44	0x0E1E      	MOVLW       30
0x0F46	0x6E04      	MOVWF       R4 
0x0F48	0x0E00      	MOVLW       0
0x0F4A	0x6E05      	MOVWF       R5 
0x0F4C	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0F50	0x0E89      	MOVLW       _world
0x0F52	0x2400      	ADDWF       R0, 0 
0x0F54	0x6E7E      	MOVWF       FLOC__Create_World 
0x0F56	0x0E00      	MOVLW       hi_addr(_world)
0x0F58	0x2001      	ADDWFC      R1, 0 
0x0F5A	0x6E7F      	MOVWF       FLOC__Create_World+1 
0x0F5C	0xF17DC038  	MOVFF       _rands, FARG_myrand_seed
0x0F60	0xF17EC039  	MOVFF       _rands+1, FARG_myrand_seed+1
0x0F64	0xDC40      	RCALL       _myrand
0x0F66	0x0E07      	MOVLW       7
0x0F68	0x1400      	ANDWF       R0, 0 
0x0F6A	0x6E03      	MOVWF       R3 
0x0F6C	0xF004C001  	MOVFF       R1, R4
0x0F70	0x0E00      	MOVLW       0
0x0F72	0x1604      	ANDWF       R4, 1 
0x0F74	0xF000C003  	MOVFF       R3, R0
0x0F78	0xF001C004  	MOVFF       R4, R1
0x0F7C	0x3600      	RLCF        R0, 1 
0x0F7E	0x9000      	BCF         R0, 0 
0x0F80	0x3601      	RLCF        R1, 1 
0x0F82	0x5000      	MOVF        R0, 0 
0x0F84	0x247E      	ADDWF       FLOC__Create_World, 0 
0x0F86	0x6EE1      	MOVWF       FSR1L 
0x0F88	0x5001      	MOVF        R1, 0 
0x0F8A	0x207F      	ADDWFC      FLOC__Create_World+1, 0 
0x0F8C	0x6EE2      	MOVWF       FSR1H 
0x0F8E	0xFFE6C05E  	MOVFF       _barrier_orientation, POSTINC1
0x0F92	0x0E00      	MOVLW       0
0x0F94	0x6EE6      	MOVWF       POSTINC1 
;compy.c,287 :: 		world[myrand(rands * 50) & 0b000000000000000111][myrand(rands * 26) & 0b000000000000000111] = barrier_orientation;
0x0F96	0xF000C038  	MOVFF       _rands, R0
0x0F9A	0xF001C039  	MOVFF       _rands+1, R1
0x0F9E	0x0E32      	MOVLW       50
0x0FA0	0x6E04      	MOVWF       R4 
0x0FA2	0x0E00      	MOVLW       0
0x0FA4	0x6E05      	MOVWF       R5 
0x0FA6	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0FAA	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x0FAE	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x0FB2	0xDC19      	RCALL       _myrand
0x0FB4	0x0E07      	MOVLW       7
0x0FB6	0x1600      	ANDWF       R0, 1 
0x0FB8	0x0E00      	MOVLW       0
0x0FBA	0x1601      	ANDWF       R1, 1 
0x0FBC	0x0E1E      	MOVLW       30
0x0FBE	0x6E04      	MOVWF       R4 
0x0FC0	0x0E00      	MOVLW       0
0x0FC2	0x6E05      	MOVWF       R5 
0x0FC4	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0FC8	0x0E89      	MOVLW       _world
0x0FCA	0x2400      	ADDWF       R0, 0 
0x0FCC	0x6E7E      	MOVWF       FLOC__Create_World 
0x0FCE	0x0E00      	MOVLW       hi_addr(_world)
0x0FD0	0x2001      	ADDWFC      R1, 0 
0x0FD2	0x6E7F      	MOVWF       FLOC__Create_World+1 
0x0FD4	0xF000C038  	MOVFF       _rands, R0
0x0FD8	0xF001C039  	MOVFF       _rands+1, R1
0x0FDC	0x0E1A      	MOVLW       26
0x0FDE	0x6E04      	MOVWF       R4 
0x0FE0	0x0E00      	MOVLW       0
0x0FE2	0x6E05      	MOVWF       R5 
0x0FE4	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x0FE8	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x0FEC	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x0FF0	0xF003ECF3  	CALL        _myrand, 0
0x0FF4	0x0E07      	MOVLW       7
0x0FF6	0x1400      	ANDWF       R0, 0 
0x0FF8	0x6E03      	MOVWF       R3 
0x0FFA	0xF004C001  	MOVFF       R1, R4
0x0FFE	0x0E00      	MOVLW       0
0x1000	0x1604      	ANDWF       R4, 1 
0x1002	0xF000C003  	MOVFF       R3, R0
0x1006	0xF001C004  	MOVFF       R4, R1
0x100A	0x3600      	RLCF        R0, 1 
0x100C	0x9000      	BCF         R0, 0 
0x100E	0x3601      	RLCF        R1, 1 
0x1010	0x5000      	MOVF        R0, 0 
0x1012	0x247E      	ADDWF       FLOC__Create_World, 0 
0x1014	0x6EE1      	MOVWF       FSR1L 
0x1016	0x5001      	MOVF        R1, 0 
0x1018	0x207F      	ADDWFC      FLOC__Create_World+1, 0 
0x101A	0x6EE2      	MOVWF       FSR1H 
0x101C	0xFFE6C05E  	MOVFF       _barrier_orientation, POSTINC1
0x1020	0x0E00      	MOVLW       0
0x1022	0x6EE6      	MOVWF       POSTINC1 
;compy.c,288 :: 		world[myrand(rands * 985) & 0b000000000000000111][myrand(rands * 76) & 0b000000000000000111] = barrier_orientation;
0x1024	0xF000C038  	MOVFF       _rands, R0
0x1028	0xF001C039  	MOVFF       _rands+1, R1
0x102C	0x0ED9      	MOVLW       217
0x102E	0x6E04      	MOVWF       R4 
0x1030	0x0E03      	MOVLW       3
0x1032	0x6E05      	MOVWF       R5 
0x1034	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1038	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x103C	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x1040	0xF003ECF3  	CALL        _myrand, 0
0x1044	0x0E07      	MOVLW       7
0x1046	0x1600      	ANDWF       R0, 1 
0x1048	0x0E00      	MOVLW       0
0x104A	0x1601      	ANDWF       R1, 1 
0x104C	0x0E1E      	MOVLW       30
0x104E	0x6E04      	MOVWF       R4 
0x1050	0x0E00      	MOVLW       0
0x1052	0x6E05      	MOVWF       R5 
0x1054	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1058	0x0E89      	MOVLW       _world
0x105A	0x2400      	ADDWF       R0, 0 
0x105C	0x6E7E      	MOVWF       FLOC__Create_World 
0x105E	0x0E00      	MOVLW       hi_addr(_world)
0x1060	0x2001      	ADDWFC      R1, 0 
0x1062	0x6E7F      	MOVWF       FLOC__Create_World+1 
0x1064	0xF000C038  	MOVFF       _rands, R0
0x1068	0xF001C039  	MOVFF       _rands+1, R1
0x106C	0x0E4C      	MOVLW       76
0x106E	0x6E04      	MOVWF       R4 
0x1070	0x0E00      	MOVLW       0
0x1072	0x6E05      	MOVWF       R5 
0x1074	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1078	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x107C	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x1080	0xF003ECF3  	CALL        _myrand, 0
0x1084	0x0E07      	MOVLW       7
0x1086	0x1400      	ANDWF       R0, 0 
0x1088	0x6E03      	MOVWF       R3 
0x108A	0xF004C001  	MOVFF       R1, R4
0x108E	0x0E00      	MOVLW       0
0x1090	0x1604      	ANDWF       R4, 1 
0x1092	0xF000C003  	MOVFF       R3, R0
0x1096	0xF001C004  	MOVFF       R4, R1
0x109A	0x3600      	RLCF        R0, 1 
0x109C	0x9000      	BCF         R0, 0 
0x109E	0x3601      	RLCF        R1, 1 
0x10A0	0x5000      	MOVF        R0, 0 
0x10A2	0x247E      	ADDWF       FLOC__Create_World, 0 
0x10A4	0x6EE1      	MOVWF       FSR1L 
0x10A6	0x5001      	MOVF        R1, 0 
0x10A8	0x207F      	ADDWFC      FLOC__Create_World+1, 0 
0x10AA	0x6EE2      	MOVWF       FSR1H 
0x10AC	0xFFE6C05E  	MOVFF       _barrier_orientation, POSTINC1
0x10B0	0x0E00      	MOVLW       0
0x10B2	0x6EE6      	MOVWF       POSTINC1 
;compy.c,290 :: 		world[myrand(rands * 12)& 0b000000000000000111][myrand(rands * 500)& 0b000000000000000111] = food_orientation;
0x10B4	0xF000C038  	MOVFF       _rands, R0
0x10B8	0xF001C039  	MOVFF       _rands+1, R1
0x10BC	0x0E0C      	MOVLW       12
0x10BE	0x6E04      	MOVWF       R4 
0x10C0	0x0E00      	MOVLW       0
0x10C2	0x6E05      	MOVWF       R5 
0x10C4	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x10C8	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x10CC	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x10D0	0xF003ECF3  	CALL        _myrand, 0
0x10D4	0x0E07      	MOVLW       7
0x10D6	0x1600      	ANDWF       R0, 1 
0x10D8	0x0E00      	MOVLW       0
0x10DA	0x1601      	ANDWF       R1, 1 
0x10DC	0x0E1E      	MOVLW       30
0x10DE	0x6E04      	MOVWF       R4 
0x10E0	0x0E00      	MOVLW       0
0x10E2	0x6E05      	MOVWF       R5 
0x10E4	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x10E8	0x0E89      	MOVLW       _world
0x10EA	0x2400      	ADDWF       R0, 0 
0x10EC	0x6E7E      	MOVWF       FLOC__Create_World 
0x10EE	0x0E00      	MOVLW       hi_addr(_world)
0x10F0	0x2001      	ADDWFC      R1, 0 
0x10F2	0x6E7F      	MOVWF       FLOC__Create_World+1 
0x10F4	0xF000C038  	MOVFF       _rands, R0
0x10F8	0xF001C039  	MOVFF       _rands+1, R1
0x10FC	0x0EF4      	MOVLW       244
0x10FE	0x6E04      	MOVWF       R4 
0x1100	0x0E01      	MOVLW       1
0x1102	0x6E05      	MOVWF       R5 
0x1104	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1108	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x110C	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x1110	0xF003ECF3  	CALL        _myrand, 0
0x1114	0x0E07      	MOVLW       7
0x1116	0x1400      	ANDWF       R0, 0 
0x1118	0x6E03      	MOVWF       R3 
0x111A	0xF004C001  	MOVFF       R1, R4
0x111E	0x0E00      	MOVLW       0
0x1120	0x1604      	ANDWF       R4, 1 
0x1122	0xF000C003  	MOVFF       R3, R0
0x1126	0xF001C004  	MOVFF       R4, R1
0x112A	0x3600      	RLCF        R0, 1 
0x112C	0x9000      	BCF         R0, 0 
0x112E	0x3601      	RLCF        R1, 1 
0x1130	0x5000      	MOVF        R0, 0 
0x1132	0x247E      	ADDWF       FLOC__Create_World, 0 
0x1134	0x6EE1      	MOVWF       FSR1L 
0x1136	0x5001      	MOVF        R1, 0 
0x1138	0x207F      	ADDWFC      FLOC__Create_World+1, 0 
0x113A	0x6EE2      	MOVWF       FSR1H 
0x113C	0xFFE6C05F  	MOVFF       _food_orientation, POSTINC1
0x1140	0x0E00      	MOVLW       0
0x1142	0x6EE6      	MOVWF       POSTINC1 
;compy.c,291 :: 		world[myrand(rands * 85)& 0b000000000000000111][myrand(rands * 1)& 0b000000000000000111] = food_orientation;
0x1144	0xF000C038  	MOVFF       _rands, R0
0x1148	0xF001C039  	MOVFF       _rands+1, R1
0x114C	0x0E55      	MOVLW       85
0x114E	0x6E04      	MOVWF       R4 
0x1150	0x0E00      	MOVLW       0
0x1152	0x6E05      	MOVWF       R5 
0x1154	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1158	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x115C	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x1160	0xF003ECF3  	CALL        _myrand, 0
0x1164	0x0E07      	MOVLW       7
0x1166	0x1600      	ANDWF       R0, 1 
0x1168	0x0E00      	MOVLW       0
0x116A	0x1601      	ANDWF       R1, 1 
0x116C	0x0E1E      	MOVLW       30
0x116E	0x6E04      	MOVWF       R4 
0x1170	0x0E00      	MOVLW       0
0x1172	0x6E05      	MOVWF       R5 
0x1174	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1178	0x0E89      	MOVLW       _world
0x117A	0x2400      	ADDWF       R0, 0 
0x117C	0x6E7E      	MOVWF       FLOC__Create_World 
0x117E	0x0E00      	MOVLW       hi_addr(_world)
0x1180	0x2001      	ADDWFC      R1, 0 
0x1182	0x6E7F      	MOVWF       FLOC__Create_World+1 
0x1184	0xF17DC038  	MOVFF       _rands, FARG_myrand_seed
0x1188	0xF17EC039  	MOVFF       _rands+1, FARG_myrand_seed+1
0x118C	0xF003ECF3  	CALL        _myrand, 0
0x1190	0x0E07      	MOVLW       7
0x1192	0x1400      	ANDWF       R0, 0 
0x1194	0x6E03      	MOVWF       R3 
0x1196	0xF004C001  	MOVFF       R1, R4
0x119A	0x0E00      	MOVLW       0
0x119C	0x1604      	ANDWF       R4, 1 
0x119E	0xF000C003  	MOVFF       R3, R0
0x11A2	0xF001C004  	MOVFF       R4, R1
0x11A6	0x3600      	RLCF        R0, 1 
0x11A8	0x9000      	BCF         R0, 0 
0x11AA	0x3601      	RLCF        R1, 1 
0x11AC	0x5000      	MOVF        R0, 0 
0x11AE	0x247E      	ADDWF       FLOC__Create_World, 0 
0x11B0	0x6EE1      	MOVWF       FSR1L 
0x11B2	0x5001      	MOVF        R1, 0 
0x11B4	0x207F      	ADDWFC      FLOC__Create_World+1, 0 
0x11B6	0x6EE2      	MOVWF       FSR1H 
0x11B8	0xFFE6C05F  	MOVFF       _food_orientation, POSTINC1
0x11BC	0x0E00      	MOVLW       0
0x11BE	0x6EE6      	MOVWF       POSTINC1 
;compy.c,292 :: 		world[myrand(rands * 552)& 0b000000000000000111][myrand(rands * 63)& 0b000000000000000111] = food_orientation;
0x11C0	0xF000C038  	MOVFF       _rands, R0
0x11C4	0xF001C039  	MOVFF       _rands+1, R1
0x11C8	0x0E28      	MOVLW       40
0x11CA	0x6E04      	MOVWF       R4 
0x11CC	0x0E02      	MOVLW       2
0x11CE	0x6E05      	MOVWF       R5 
0x11D0	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x11D4	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x11D8	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x11DC	0xF003ECF3  	CALL        _myrand, 0
0x11E0	0x0E07      	MOVLW       7
0x11E2	0x1600      	ANDWF       R0, 1 
0x11E4	0x0E00      	MOVLW       0
0x11E6	0x1601      	ANDWF       R1, 1 
0x11E8	0x0E1E      	MOVLW       30
0x11EA	0x6E04      	MOVWF       R4 
0x11EC	0x0E00      	MOVLW       0
0x11EE	0x6E05      	MOVWF       R5 
0x11F0	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x11F4	0x0E89      	MOVLW       _world
0x11F6	0x2400      	ADDWF       R0, 0 
0x11F8	0x6E7E      	MOVWF       FLOC__Create_World 
0x11FA	0x0E00      	MOVLW       hi_addr(_world)
0x11FC	0x2001      	ADDWFC      R1, 0 
0x11FE	0x6E7F      	MOVWF       FLOC__Create_World+1 
0x1200	0xF000C038  	MOVFF       _rands, R0
0x1204	0xF001C039  	MOVFF       _rands+1, R1
0x1208	0x0E3F      	MOVLW       63
0x120A	0x6E04      	MOVWF       R4 
0x120C	0x0E00      	MOVLW       0
0x120E	0x6E05      	MOVWF       R5 
0x1210	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1214	0xF17DC000  	MOVFF       R0, FARG_myrand_seed
0x1218	0xF17EC001  	MOVFF       R1, FARG_myrand_seed+1
0x121C	0xF003ECF3  	CALL        _myrand, 0
0x1220	0x0E07      	MOVLW       7
0x1222	0x1400      	ANDWF       R0, 0 
0x1224	0x6E03      	MOVWF       R3 
0x1226	0xF004C001  	MOVFF       R1, R4
0x122A	0x0E00      	MOVLW       0
0x122C	0x1604      	ANDWF       R4, 1 
0x122E	0xF000C003  	MOVFF       R3, R0
0x1232	0xF001C004  	MOVFF       R4, R1
0x1236	0x3600      	RLCF        R0, 1 
0x1238	0x9000      	BCF         R0, 0 
0x123A	0x3601      	RLCF        R1, 1 
0x123C	0x5000      	MOVF        R0, 0 
0x123E	0x247E      	ADDWF       FLOC__Create_World, 0 
0x1240	0x6EE1      	MOVWF       FSR1L 
0x1242	0x5001      	MOVF        R1, 0 
0x1244	0x207F      	ADDWFC      FLOC__Create_World+1, 0 
0x1246	0x6EE2      	MOVWF       FSR1H 
0x1248	0xFFE6C05F  	MOVFF       _food_orientation, POSTINC1
0x124C	0x0E00      	MOVLW       0
0x124E	0x6EE6      	MOVWF       POSTINC1 
;compy.c,293 :: 		world[5][11] = food_orientation;
0x1250	0xF135C05F  	MOVFF       _food_orientation, _world+172
0x1254	0x0E00      	MOVLW       0
0x1256	0x0101      	MOVLB       1
0x1258	0x6F36      	MOVWF       _world+173, 1
;compy.c,294 :: 		world[3][5] = food_orientation;
0x125A	0xF0EDC05F  	MOVFF       _food_orientation, _world+100
0x125E	0x0E00      	MOVLW       0
0x1260	0x0100      	MOVLB       0
0x1262	0x6FEE      	MOVWF       _world+101, 1
;compy.c,295 :: 		world[2][8] = food_orientation;
0x1264	0xF0D5C05F  	MOVFF       _food_orientation, _world+76
0x1268	0x0E00      	MOVLW       0
0x126A	0x6FD6      	MOVWF       _world+77, 1
;compy.c,296 :: 		world[7][7] = food_orientation;
0x126C	0xF169C05F  	MOVFF       _food_orientation, _world+224
0x1270	0x0E00      	MOVLW       0
0x1272	0x0101      	MOVLB       1
0x1274	0x6F6A      	MOVWF       _world+225, 1
;compy.c,298 :: 		if (world[ghost_x][ghost_y] == food_orientation) --QTD_FOOD;
0x1276	0xF000C036  	MOVFF       _ghost_x, R0
0x127A	0xF001C037  	MOVFF       _ghost_x+1, R1
0x127E	0x0E1E      	MOVLW       30
0x1280	0x6E04      	MOVWF       R4 
0x1282	0x0E00      	MOVLW       0
0x1284	0x6E05      	MOVWF       R5 
0x1286	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x128A	0x0E89      	MOVLW       _world
0x128C	0x2400      	ADDWF       R0, 0 
0x128E	0x6E03      	MOVWF       R3 
0x1290	0x0E00      	MOVLW       hi_addr(_world)
0x1292	0x2001      	ADDWFC      R1, 0 
0x1294	0x6E04      	MOVWF       R4 
0x1296	0xF000C048  	MOVFF       _ghost_y, R0
0x129A	0xF001C049  	MOVFF       _ghost_y+1, R1
0x129E	0x3600      	RLCF        R0, 1 
0x12A0	0x9000      	BCF         R0, 0 
0x12A2	0x3601      	RLCF        R1, 1 
0x12A4	0x5000      	MOVF        R0, 0 
0x12A6	0x2403      	ADDWF       R3, 0 
0x12A8	0x6EE9      	MOVWF       FSR0L 
0x12AA	0x5001      	MOVF        R1, 0 
0x12AC	0x2004      	ADDWFC      R4, 0 
0x12AE	0x6EEA      	MOVWF       FSR0H 
0x12B0	0xF001CFEE  	MOVFF       POSTINC0, R1
0x12B4	0xF002CFEE  	MOVFF       POSTINC0, R2
0x12B8	0x0E00      	MOVLW       0
0x12BA	0x1802      	XORWF       R2, 0 
0x12BC	0xE102      	BNZ         L__Create_World154
0x12BE	0x505F      	MOVF        _food_orientation, 0 
0x12C0	0x1801      	XORWF       R1, 0 
L__Create_World154:
0x12C2	0xE104      	BNZ         L_Create_World72
0x12C4	0x0E01      	MOVLW       1
0x12C6	0x5E4B      	SUBWF       _QTD_FOOD, 1 
0x12C8	0x0E00      	MOVLW       0
0x12CA	0x5A4C      	SUBWFB      _QTD_FOOD+1, 1 
L_Create_World72:
;compy.c,299 :: 		if (world[pacman_x][pacman_y] == food_orientation) --QTD_FOOD;
0x12CC	0xF000C050  	MOVFF       _pacman_x, R0
0x12D0	0xF001C051  	MOVFF       _pacman_x+1, R1
0x12D4	0x0E1E      	MOVLW       30
0x12D6	0x6E04      	MOVWF       R4 
0x12D8	0x0E00      	MOVLW       0
0x12DA	0x6E05      	MOVWF       R5 
0x12DC	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x12E0	0x0E89      	MOVLW       _world
0x12E2	0x2400      	ADDWF       R0, 0 
0x12E4	0x6E03      	MOVWF       R3 
0x12E6	0x0E00      	MOVLW       hi_addr(_world)
0x12E8	0x2001      	ADDWFC      R1, 0 
0x12EA	0x6E04      	MOVWF       R4 
0x12EC	0xF000C060  	MOVFF       _pacman_y, R0
0x12F0	0xF001C061  	MOVFF       _pacman_y+1, R1
0x12F4	0x3600      	RLCF        R0, 1 
0x12F6	0x9000      	BCF         R0, 0 
0x12F8	0x3601      	RLCF        R1, 1 
0x12FA	0x5000      	MOVF        R0, 0 
0x12FC	0x2403      	ADDWF       R3, 0 
0x12FE	0x6EE9      	MOVWF       FSR0L 
0x1300	0x5001      	MOVF        R1, 0 
0x1302	0x2004      	ADDWFC      R4, 0 
0x1304	0x6EEA      	MOVWF       FSR0H 
0x1306	0xF001CFEE  	MOVFF       POSTINC0, R1
0x130A	0xF002CFEE  	MOVFF       POSTINC0, R2
0x130E	0x0E00      	MOVLW       0
0x1310	0x1802      	XORWF       R2, 0 
0x1312	0xE102      	BNZ         L__Create_World155
0x1314	0x505F      	MOVF        _food_orientation, 0 
0x1316	0x1801      	XORWF       R1, 0 
L__Create_World155:
0x1318	0xE104      	BNZ         L_Create_World73
0x131A	0x0E01      	MOVLW       1
0x131C	0x5E4B      	SUBWF       _QTD_FOOD, 1 
0x131E	0x0E00      	MOVLW       0
0x1320	0x5A4C      	SUBWFB      _QTD_FOOD+1, 1 
L_Create_World73:
;compy.c,300 :: 		world[ghost_x][ghost_y] = ghost_orientation;
0x1322	0xF000C036  	MOVFF       _ghost_x, R0
0x1326	0xF001C037  	MOVFF       _ghost_x+1, R1
0x132A	0x0E1E      	MOVLW       30
0x132C	0x6E04      	MOVWF       R4 
0x132E	0x0E00      	MOVLW       0
0x1330	0x6E05      	MOVWF       R5 
0x1332	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1336	0x0E89      	MOVLW       _world
0x1338	0x2400      	ADDWF       R0, 0 
0x133A	0x6E03      	MOVWF       R3 
0x133C	0x0E00      	MOVLW       hi_addr(_world)
0x133E	0x2001      	ADDWFC      R1, 0 
0x1340	0x6E04      	MOVWF       R4 
0x1342	0xF000C048  	MOVFF       _ghost_y, R0
0x1346	0xF001C049  	MOVFF       _ghost_y+1, R1
0x134A	0x3600      	RLCF        R0, 1 
0x134C	0x9000      	BCF         R0, 0 
0x134E	0x3601      	RLCF        R1, 1 
0x1350	0x5000      	MOVF        R0, 0 
0x1352	0x2403      	ADDWF       R3, 0 
0x1354	0x6EE1      	MOVWF       FSR1L 
0x1356	0x5001      	MOVF        R1, 0 
0x1358	0x2004      	ADDWFC      R4, 0 
0x135A	0x6EE2      	MOVWF       FSR1H 
0x135C	0xFFE6C03A  	MOVFF       _ghost_orientation, POSTINC1
0x1360	0x0E00      	MOVLW       0
0x1362	0x6EE6      	MOVWF       POSTINC1 
;compy.c,301 :: 		world[pacman_x][pacman_y] = (char) pacman_orientation;
0x1364	0xF000C050  	MOVFF       _pacman_x, R0
0x1368	0xF001C051  	MOVFF       _pacman_x+1, R1
0x136C	0x0E1E      	MOVLW       30
0x136E	0x6E04      	MOVWF       R4 
0x1370	0x0E00      	MOVLW       0
0x1372	0x6E05      	MOVWF       R5 
0x1374	0xF001ECEC  	CALL        _Mul_16x16_U, 0
0x1378	0x0E89      	MOVLW       _world
0x137A	0x2400      	ADDWF       R0, 0 
0x137C	0x6E03      	MOVWF       R3 
0x137E	0x0E00      	MOVLW       hi_addr(_world)
0x1380	0x2001      	ADDWFC      R1, 0 
0x1382	0x6E04      	MOVWF       R4 
0x1384	0xF000C060  	MOVFF       _pacman_y, R0
0x1388	0xF001C061  	MOVFF       _pacman_y+1, R1
0x138C	0x3600      	RLCF        R0, 1 
0x138E	0x9000      	BCF         R0, 0 
0x1390	0x3601      	RLCF        R1, 1 
0x1392	0x5000      	MOVF        R0, 0 
0x1394	0x2403      	ADDWF       R3, 0 
0x1396	0x6EE1      	MOVWF       FSR1L 
0x1398	0x5001      	MOVF        R1, 0 
0x139A	0x2004      	ADDWFC      R4, 0 
0x139C	0x6EE2      	MOVWF       FSR1H 
0x139E	0xFFE6C03B  	MOVFF       _pacman_orientation, POSTINC1
0x13A2	0x0E00      	MOVLW       0
0x13A4	0x6EE6      	MOVWF       POSTINC1 
;compy.c,302 :: 		}
0x13A6	0x0012      	RETURN      0
; end of _Create_World
_Le_Teclado:
;compy.c,162 :: 		char Le_Teclado()
;compy.c,164 :: 		PORTD = 0B00010000; // VOCÊ SELECIONOU LA
0x13A8	0x0E10      	MOVLW       16
0x13AA	0x6E83      	MOVWF       PORTD 
;compy.c,165 :: 		if (PORTA.RA5 == 1) {
0x13AC	0xAA80      	BTFSS       PORTA, 5 
0x13AE	0xD006      	BRA         L_Le_Teclado17
;compy.c,166 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado18:
0x13B0	0xAA80      	BTFSS       PORTA, 5 
0x13B2	0xD001      	BRA         L_Le_Teclado19
0x13B4	0xD7FD      	BRA         L_Le_Teclado18
L_Le_Teclado19:
;compy.c,167 :: 		return '7';
0x13B6	0x0E37      	MOVLW       55
0x13B8	0x6E00      	MOVWF       R0 
0x13BA	0x0012      	RETURN      0
;compy.c,168 :: 		}
L_Le_Teclado17:
;compy.c,169 :: 		if (PORTB.RB1 == 1) {
0x13BC	0xA281      	BTFSS       PORTB, 1 
0x13BE	0xD006      	BRA         L_Le_Teclado20
;compy.c,170 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado21:
0x13C0	0xA281      	BTFSS       PORTB, 1 
0x13C2	0xD001      	BRA         L_Le_Teclado22
0x13C4	0xD7FD      	BRA         L_Le_Teclado21
L_Le_Teclado22:
;compy.c,171 :: 		return '8';
0x13C6	0x0E38      	MOVLW       56
0x13C8	0x6E00      	MOVWF       R0 
0x13CA	0x0012      	RETURN      0
;compy.c,172 :: 		}
L_Le_Teclado20:
;compy.c,173 :: 		if (PORTB.RB2 == 1) {
0x13CC	0xA481      	BTFSS       PORTB, 2 
0x13CE	0xD006      	BRA         L_Le_Teclado23
;compy.c,174 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado24:
0x13D0	0xA481      	BTFSS       PORTB, 2 
0x13D2	0xD001      	BRA         L_Le_Teclado25
0x13D4	0xD7FD      	BRA         L_Le_Teclado24
L_Le_Teclado25:
;compy.c,175 :: 		return '9';
0x13D6	0x0E39      	MOVLW       57
0x13D8	0x6E00      	MOVWF       R0 
0x13DA	0x0012      	RETURN      0
;compy.c,176 :: 		}
L_Le_Teclado23:
;compy.c,177 :: 		if (PORTB.RB3 == 1) {
0x13DC	0xA681      	BTFSS       PORTB, 3 
0x13DE	0xD006      	BRA         L_Le_Teclado26
;compy.c,178 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado27:
0x13E0	0xA681      	BTFSS       PORTB, 3 
0x13E2	0xD001      	BRA         L_Le_Teclado28
0x13E4	0xD7FD      	BRA         L_Le_Teclado27
L_Le_Teclado28:
;compy.c,179 :: 		return '%';
0x13E6	0x0E25      	MOVLW       37
0x13E8	0x6E00      	MOVWF       R0 
0x13EA	0x0012      	RETURN      0
;compy.c,180 :: 		}
L_Le_Teclado26:
;compy.c,182 :: 		PORTD = 0B00100000; // VOCÊ SELECIONOU LB
0x13EC	0x0E20      	MOVLW       32
0x13EE	0x6E83      	MOVWF       PORTD 
;compy.c,183 :: 		if (PORTA.RA5 == 1) {
0x13F0	0xAA80      	BTFSS       PORTA, 5 
0x13F2	0xD006      	BRA         L_Le_Teclado29
;compy.c,184 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado30:
0x13F4	0xAA80      	BTFSS       PORTA, 5 
0x13F6	0xD001      	BRA         L_Le_Teclado31
0x13F8	0xD7FD      	BRA         L_Le_Teclado30
L_Le_Teclado31:
;compy.c,185 :: 		return '4';
0x13FA	0x0E34      	MOVLW       52
0x13FC	0x6E00      	MOVWF       R0 
0x13FE	0x0012      	RETURN      0
;compy.c,186 :: 		}
L_Le_Teclado29:
;compy.c,187 :: 		if (PORTB.RB1 == 1) {
0x1400	0xA281      	BTFSS       PORTB, 1 
0x1402	0xD006      	BRA         L_Le_Teclado32
;compy.c,188 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado33:
0x1404	0xA281      	BTFSS       PORTB, 1 
0x1406	0xD001      	BRA         L_Le_Teclado34
0x1408	0xD7FD      	BRA         L_Le_Teclado33
L_Le_Teclado34:
;compy.c,189 :: 		return '5';
0x140A	0x0E35      	MOVLW       53
0x140C	0x6E00      	MOVWF       R0 
0x140E	0x0012      	RETURN      0
;compy.c,190 :: 		}
L_Le_Teclado32:
;compy.c,191 :: 		if (PORTB.RB2 == 1) {
0x1410	0xA481      	BTFSS       PORTB, 2 
0x1412	0xD006      	BRA         L_Le_Teclado35
;compy.c,192 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado36:
0x1414	0xA481      	BTFSS       PORTB, 2 
0x1416	0xD001      	BRA         L_Le_Teclado37
0x1418	0xD7FD      	BRA         L_Le_Teclado36
L_Le_Teclado37:
;compy.c,193 :: 		return '6';
0x141A	0x0E36      	MOVLW       54
0x141C	0x6E00      	MOVWF       R0 
0x141E	0x0012      	RETURN      0
;compy.c,194 :: 		}
L_Le_Teclado35:
;compy.c,195 :: 		if (PORTB.RB3 == 1) {
0x1420	0xA681      	BTFSS       PORTB, 3 
0x1422	0xD006      	BRA         L_Le_Teclado38
;compy.c,196 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado39:
0x1424	0xA681      	BTFSS       PORTB, 3 
0x1426	0xD001      	BRA         L_Le_Teclado40
0x1428	0xD7FD      	BRA         L_Le_Teclado39
L_Le_Teclado40:
;compy.c,197 :: 		return '*';
0x142A	0x0E2A      	MOVLW       42
0x142C	0x6E00      	MOVWF       R0 
0x142E	0x0012      	RETURN      0
;compy.c,198 :: 		}
L_Le_Teclado38:
;compy.c,200 :: 		PORTD = 0B01000000; // VOCÊ SELECIONOU LC
0x1430	0x0E40      	MOVLW       64
0x1432	0x6E83      	MOVWF       PORTD 
;compy.c,201 :: 		if (PORTA.RA5 == 1) {
0x1434	0xAA80      	BTFSS       PORTA, 5 
0x1436	0xD006      	BRA         L_Le_Teclado41
;compy.c,202 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado42:
0x1438	0xAA80      	BTFSS       PORTA, 5 
0x143A	0xD001      	BRA         L_Le_Teclado43
0x143C	0xD7FD      	BRA         L_Le_Teclado42
L_Le_Teclado43:
;compy.c,203 :: 		return '1';
0x143E	0x0E31      	MOVLW       49
0x1440	0x6E00      	MOVWF       R0 
0x1442	0x0012      	RETURN      0
;compy.c,204 :: 		}
L_Le_Teclado41:
;compy.c,205 :: 		if (PORTB.RB1 == 1) {
0x1444	0xA281      	BTFSS       PORTB, 1 
0x1446	0xD006      	BRA         L_Le_Teclado44
;compy.c,206 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado45:
0x1448	0xA281      	BTFSS       PORTB, 1 
0x144A	0xD001      	BRA         L_Le_Teclado46
0x144C	0xD7FD      	BRA         L_Le_Teclado45
L_Le_Teclado46:
;compy.c,207 :: 		return '2';
0x144E	0x0E32      	MOVLW       50
0x1450	0x6E00      	MOVWF       R0 
0x1452	0x0012      	RETURN      0
;compy.c,208 :: 		}
L_Le_Teclado44:
;compy.c,209 :: 		if (PORTB.RB2 == 1) {
0x1454	0xA481      	BTFSS       PORTB, 2 
0x1456	0xD006      	BRA         L_Le_Teclado47
;compy.c,210 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado48:
0x1458	0xA481      	BTFSS       PORTB, 2 
0x145A	0xD001      	BRA         L_Le_Teclado49
0x145C	0xD7FD      	BRA         L_Le_Teclado48
L_Le_Teclado49:
;compy.c,211 :: 		return '3';
0x145E	0x0E33      	MOVLW       51
0x1460	0x6E00      	MOVWF       R0 
0x1462	0x0012      	RETURN      0
;compy.c,212 :: 		}
L_Le_Teclado47:
;compy.c,213 :: 		if (PORTB.RB3 == 1) {
0x1464	0xA681      	BTFSS       PORTB, 3 
0x1466	0xD006      	BRA         L_Le_Teclado50
;compy.c,214 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado51:
0x1468	0xA681      	BTFSS       PORTB, 3 
0x146A	0xD001      	BRA         L_Le_Teclado52
0x146C	0xD7FD      	BRA         L_Le_Teclado51
L_Le_Teclado52:
;compy.c,215 :: 		return '-';
0x146E	0x0E2D      	MOVLW       45
0x1470	0x6E00      	MOVWF       R0 
0x1472	0x0012      	RETURN      0
;compy.c,216 :: 		}
L_Le_Teclado50:
;compy.c,218 :: 		PORTD = 0B10000000; // VOCÊ SELECIONOU LD
0x1474	0x0E80      	MOVLW       128
0x1476	0x6E83      	MOVWF       PORTD 
;compy.c,219 :: 		if (PORTA.RA5 == 1) {
0x1478	0xAA80      	BTFSS       PORTA, 5 
0x147A	0xD006      	BRA         L_Le_Teclado53
;compy.c,220 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado54:
0x147C	0xAA80      	BTFSS       PORTA, 5 
0x147E	0xD001      	BRA         L_Le_Teclado55
0x1480	0xD7FD      	BRA         L_Le_Teclado54
L_Le_Teclado55:
;compy.c,221 :: 		return 'C';
0x1482	0x0E43      	MOVLW       67
0x1484	0x6E00      	MOVWF       R0 
0x1486	0x0012      	RETURN      0
;compy.c,222 :: 		}
L_Le_Teclado53:
;compy.c,223 :: 		if (PORTB.RB1 == 1) {
0x1488	0xA281      	BTFSS       PORTB, 1 
0x148A	0xD006      	BRA         L_Le_Teclado56
;compy.c,224 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado57:
0x148C	0xA281      	BTFSS       PORTB, 1 
0x148E	0xD001      	BRA         L_Le_Teclado58
0x1490	0xD7FD      	BRA         L_Le_Teclado57
L_Le_Teclado58:
;compy.c,225 :: 		return '0';
0x1492	0x0E30      	MOVLW       48
0x1494	0x6E00      	MOVWF       R0 
0x1496	0x0012      	RETURN      0
;compy.c,226 :: 		}
L_Le_Teclado56:
;compy.c,227 :: 		if (PORTB.RB2 == 1) {
0x1498	0xA481      	BTFSS       PORTB, 2 
0x149A	0xD006      	BRA         L_Le_Teclado59
;compy.c,228 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado60:
0x149C	0xA481      	BTFSS       PORTB, 2 
0x149E	0xD001      	BRA         L_Le_Teclado61
0x14A0	0xD7FD      	BRA         L_Le_Teclado60
L_Le_Teclado61:
;compy.c,229 :: 		return '=';
0x14A2	0x0E3D      	MOVLW       61
0x14A4	0x6E00      	MOVWF       R0 
0x14A6	0x0012      	RETURN      0
;compy.c,230 :: 		}
L_Le_Teclado59:
;compy.c,231 :: 		if (PORTB.RB3 == 1) {
0x14A8	0xA681      	BTFSS       PORTB, 3 
0x14AA	0xD006      	BRA         L_Le_Teclado62
;compy.c,232 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado63:
0x14AC	0xA681      	BTFSS       PORTB, 3 
0x14AE	0xD001      	BRA         L_Le_Teclado64
0x14B0	0xD7FD      	BRA         L_Le_Teclado63
L_Le_Teclado64:
;compy.c,233 :: 		return '+';
0x14B2	0x0E2B      	MOVLW       43
0x14B4	0x6E00      	MOVWF       R0 
0x14B6	0x0012      	RETURN      0
;compy.c,234 :: 		}
L_Le_Teclado62:
;compy.c,236 :: 		return (char) 255;
0x14B8	0x0EFF      	MOVLW       255
0x14BA	0x6E00      	MOVWF       R0 
;compy.c,237 :: 		}
0x14BC	0x0012      	RETURN      0
; end of _Le_Teclado
_InitTimer2:
;compy.c,104 :: 		void InitTimer2(){
;compy.c,105 :: 		T2CON         = 0x3C;
0x14BE	0x0E3C      	MOVLW       60
0x14C0	0x6ECA      	MOVWF       T2CON 
;compy.c,106 :: 		TMR2IE_bit         = 1;
0x14C2	0x829D      	BSF         TMR2IE_bit, 1 
;compy.c,107 :: 		PR2                 = 249;
0x14C4	0x0EF9      	MOVLW       249
0x14C6	0x6ECB      	MOVWF       PR2 
;compy.c,108 :: 		INTCON         = 0xD0;  //INTCON = 1100 0000 (HABILITA TMR2 INTERRUPT E INT0 INTERRUPT)
0x14C8	0x0ED0      	MOVLW       208
0x14CA	0x6EF2      	MOVWF       INTCON 
;compy.c,109 :: 		}
0x14CC	0x0012      	RETURN      0
; end of _InitTimer2
_main:
0x14CE	0xF00BEC6E  	CALL        5852, 0
;compy.c,463 :: 		void main() {           // General purpose register
;compy.c,464 :: 		UART1_Init(19200);
0x14D2	0x0E19      	MOVLW       25
0x14D4	0x6EAF      	MOVWF       SPBRG 
0x14D6	0x84AC      	BSF         TXSTA, 2, 0
0x14D8	0xF005EC25  	CALL        _UART1_Init, 0
;compy.c,465 :: 		I2C1_Init(100000);
0x14DC	0x0E14      	MOVLW       20
0x14DE	0x6EC8      	MOVWF       SSPADD 
0x14E0	0xF005ECB4  	CALL        _I2C1_Init, 0
;compy.c,466 :: 		ADCON1 = 0B00001110;
0x14E4	0x0E0E      	MOVLW       14
0x14E6	0x6EC1      	MOVWF       ADCON1 
;compy.c,467 :: 		TRISB = 0B00001111;
0x14E8	0x0E0F      	MOVLW       15
0x14EA	0x6E93      	MOVWF       TRISB 
;compy.c,468 :: 		TRISA = 0B00100001;
0x14EC	0x0E21      	MOVLW       33
0x14EE	0x6E92      	MOVWF       TRISA 
;compy.c,470 :: 		TRISA3_bit = 1;               // Set RA3 as input
0x14F0	0x8692      	BSF         TRISA3_bit, 3 
;compy.c,471 :: 		TRISA4_bit = 1;               // Set RA4 as input
0x14F2	0x8892      	BSF         TRISA4_bit, 4 
;compy.c,475 :: 		T6963C_init(240, 128, 8);
0x14F4	0x0EF0      	MOVLW       240
0x14F6	0x0101      	MOVLB       1
0x14F8	0x6F79      	MOVWF       FARG_T6963C_init_width, 1
0x14FA	0x0E00      	MOVLW       0
0x14FC	0x6F7A      	MOVWF       FARG_T6963C_init_width+1, 1
0x14FE	0x0E80      	MOVLW       128
0x1500	0x6F7B      	MOVWF       FARG_T6963C_init_height, 1
0x1502	0x0E08      	MOVLW       8
0x1504	0x6F7C      	MOVWF       FARG_T6963C_init_fntW, 1
0x1506	0xF004EC98  	CALL        _T6963C_init, 0
;compy.c,480 :: 		T6963C_graphics(1);
0x150A	0x8665      	BSF         _T6963C_display, 3 
0x150C	0xF199C065  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x1510	0xF001ECB8  	CALL        _T6963C_writeCommand, 0
;compy.c,481 :: 		T6963C_text(1);
0x1514	0x8465      	BSF         _T6963C_display, 2 
0x1516	0xF199C065  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x151A	0xF001ECB8  	CALL        _T6963C_writeCommand, 0
;compy.c,484 :: 		InitTimer2();
0x151E	0xDFCF      	RCALL       _InitTimer2
;compy.c,487 :: 		Create_World();
0x1520	0xDCA4      	RCALL       _Create_World
;compy.c,490 :: 		while (1) {
L_main128:
;compy.c,491 :: 		if (IS_FINISH) {
0x1522	0x503E      	MOVF        _IS_FINISH, 0 
0x1524	0x103F      	IORWF       _IS_FINISH+1, 0 
0x1526	0xE001      	BZ          L_main130
;compy.c,492 :: 		break;
0x1528	0xD038      	BRA         L_main129
;compy.c,493 :: 		}
L_main130:
;compy.c,494 :: 		command = Le_Teclado();
0x152A	0xDF3E      	RCALL       _Le_Teclado
0x152C	0xF04AC000  	MOVFF       R0, _command
;compy.c,495 :: 		if (command == '8') {
0x1530	0x5000      	MOVF        R0, 0 
0x1532	0x0A38      	XORLW       56
0x1534	0xE104      	BNZ         L_main131
;compy.c,496 :: 		update_pacman(0);
0x1536	0x6A7E      	CLRF        FARG_update_pacman_direction 
0x1538	0xF006EC15  	CALL        _update_pacman, 0
;compy.c,497 :: 		} else if (command == '2') {
0x153C	0xD017      	BRA         L_main132
L_main131:
0x153E	0x504A      	MOVF        _command, 0 
0x1540	0x0A32      	XORLW       50
0x1542	0xE105      	BNZ         L_main133
;compy.c,498 :: 		update_pacman(1);
0x1544	0x0E01      	MOVLW       1
0x1546	0x6E7E      	MOVWF       FARG_update_pacman_direction 
0x1548	0xF006EC15  	CALL        _update_pacman, 0
;compy.c,499 :: 		} else if (command == '6') {
0x154C	0xD00F      	BRA         L_main134
L_main133:
0x154E	0x504A      	MOVF        _command, 0 
0x1550	0x0A36      	XORLW       54
0x1552	0xE105      	BNZ         L_main135
;compy.c,500 :: 		update_pacman(2);
0x1554	0x0E02      	MOVLW       2
0x1556	0x6E7E      	MOVWF       FARG_update_pacman_direction 
0x1558	0xF006EC15  	CALL        _update_pacman, 0
;compy.c,501 :: 		} else if (command == '4') {
0x155C	0xD007      	BRA         L_main136
L_main135:
0x155E	0x504A      	MOVF        _command, 0 
0x1560	0x0A34      	XORLW       52
0x1562	0xE104      	BNZ         L_main137
;compy.c,502 :: 		update_pacman(3);
0x1564	0x0E03      	MOVLW       3
0x1566	0x6E7E      	MOVWF       FARG_update_pacman_direction 
0x1568	0xF006EC15  	CALL        _update_pacman, 0
;compy.c,503 :: 		}
L_main137:
L_main136:
L_main134:
L_main132:
;compy.c,504 :: 		Print_World();
0x156C	0xF003EC27  	CALL        _Print_World, 0
;compy.c,505 :: 		if (pacman_x == ghost_x && pacman_y == ghost_y) {
0x1570	0x5051      	MOVF        _pacman_x+1, 0 
0x1572	0x1837      	XORWF       _ghost_x+1, 0 
0x1574	0xE102      	BNZ         L__main171
0x1576	0x5036      	MOVF        _ghost_x, 0 
0x1578	0x1850      	XORWF       _pacman_x, 0 
L__main171:
0x157A	0xE10E      	BNZ         L_main140
0x157C	0x5061      	MOVF        _pacman_y+1, 0 
0x157E	0x1849      	XORWF       _ghost_y+1, 0 
0x1580	0xE102      	BNZ         L__main172
0x1582	0x5048      	MOVF        _ghost_y, 0 
0x1584	0x1860      	XORWF       _pacman_y, 0 
L__main172:
0x1586	0xE108      	BNZ         L_main140
L__main141:
;compy.c,506 :: 		IS_FINISH = 1;
0x1588	0x0E01      	MOVLW       1
0x158A	0x6E3E      	MOVWF       _IS_FINISH 
0x158C	0x0E00      	MOVLW       0
0x158E	0x6E3F      	MOVWF       _IS_FINISH+1 
;compy.c,507 :: 		IS_GAME_OVER = 1;
0x1590	0x0E01      	MOVLW       1
0x1592	0x6E3C      	MOVWF       _IS_GAME_OVER 
0x1594	0x0E00      	MOVLW       0
0x1596	0x6E3D      	MOVWF       _IS_GAME_OVER+1 
;compy.c,508 :: 		}
L_main140:
;compy.c,509 :: 		}
0x1598	0xD7C4      	BRA         L_main128
L_main129:
;compy.c,510 :: 		Finish();
0x159A	0xF005ECBF  	CALL        _Finish, 0
;compy.c,512 :: 		}
0x159E	0xD7FF      	BRA         $+0
; end of _main
0x16DC	0xF027EE10  	LFSR        1, 39
0x16E0	0x0E3B      	MOVLW       59
0x16E2	0x6E00      	MOVWF       R0 
0x16E4	0x0E01      	MOVLW       1
0x16E6	0x6E01      	MOVWF       R1 
0x16E8	0x0EA0      	MOVLW       160
0x16EA	0x6EF6      	MOVWF       4086 
0x16EC	0x0E15      	MOVLW       21
0x16EE	0x6EF7      	MOVWF       TBLPTRH 
0x16F0	0x0E00      	MOVLW       0
0x16F2	0x6EF8      	MOVWF       TBLPTRU 
0x16F4	0xF005EC1D  	CALL        2618, 0
0x16F8	0x0012      	RETURN      0
;compy.c,0 :: ?ICS_currentCharactere
0x15A0	0x00 ;?ICS_currentCharactere+0
; end of ?ICS_currentCharactere
;compy.c,0 :: ?ICS?lstr4_compy
0x15A1	0x6957 ;?ICS?lstr4_compy+0
0x15A3	0x006E ;?ICS?lstr4_compy+2
; end of ?ICS?lstr4_compy
;compy.c,0 :: ?ICS?lstr3_compy
0x15A5	0x6147 ;?ICS?lstr3_compy+0
0x15A7	0x656D ;?ICS?lstr3_compy+2
0x15A9	0x6F20 ;?ICS?lstr3_compy+4
0x15AB	0x6576 ;?ICS?lstr3_compy+6
0x15AD	0x0072 ;?ICS?lstr3_compy+8
; end of ?ICS?lstr3_compy
;compy.c,0 :: ?ICS_ghost_x
0x15AF	0x0001 ;?ICS_ghost_x+0
; end of ?ICS_ghost_x
;compy.c,0 :: ?ICS_rands
0x15B1	0x000D ;?ICS_rands+0
; end of ?ICS_rands
;compy.c,0 :: ?ICS_ghost_orientation
0x15B3	0x06 ;?ICS_ghost_orientation+0
; end of ?ICS_ghost_orientation
;compy.c,0 :: ?ICS_pacman_orientation
0x15B4	0x00 ;?ICS_pacman_orientation+0
; end of ?ICS_pacman_orientation
;compy.c,0 :: ?ICS_IS_GAME_OVER
0x15B5	0x0000 ;?ICS_IS_GAME_OVER+0
; end of ?ICS_IS_GAME_OVER
;compy.c,0 :: ?ICS_IS_FINISH
0x15B7	0x0000 ;?ICS_IS_FINISH+0
; end of ?ICS_IS_FINISH
;compy.c,0 :: ?ICS_next
0x15B9	0x0001 ;?ICS_next+0
0x15BB	0x0000 ;?ICS_next+2
; end of ?ICS_next
;compy.c,0 :: ?ICS_j
0x15BD	0x0000 ;?ICS_j+0
; end of ?ICS_j
;compy.c,0 :: ?ICS_i
0x15BF	0x0000 ;?ICS_i+0
; end of ?ICS_i
;compy.c,0 :: ?ICS_ghost_y
0x15C1	0x000E ;?ICS_ghost_y+0
; end of ?ICS_ghost_y
;compy.c,0 :: ?ICS_command
0x15C3	0x00 ;?ICS_command+0
; end of ?ICS_command
;compy.c,0 :: ?ICS_QTD_FOOD
0x15C4	0x0007 ;?ICS_QTD_FOOD+0
; end of ?ICS_QTD_FOOD
;compy.c,0 :: ?ICS_old_ghost_obj
0x15C6	0x00 ;?ICS_old_ghost_obj+0
; end of ?ICS_old_ghost_obj
;compy.c,0 :: ?ICS_newPacman_x
0x15C7	0x0000 ;?ICS_newPacman_x+0
; end of ?ICS_newPacman_x
;compy.c,0 :: ?ICS_pacman_x
0x15C9	0x0001 ;?ICS_pacman_x+0
; end of ?ICS_pacman_x
;compy.c,0 :: ?ICS_cnt
0x15CB	0x0000 ;?ICS_cnt+0
; end of ?ICS_cnt
;compy.c,0 :: ?ICS_new_ghost_x
0x15CD	0x0000 ;?ICS_new_ghost_x+0
; end of ?ICS_new_ghost_x
;compy.c,0 :: ?ICS_new_ghost_y
0x15CF	0x0000 ;?ICS_new_ghost_y+0
; end of ?ICS_new_ghost_y
;compy.c,0 :: ?ICS_cnt2
0x15D1	0x0000 ;?ICS_cnt2+0
; end of ?ICS_cnt2
;compy.c,0 :: ?ICS_newPacman_y
0x15D3	0x0000 ;?ICS_newPacman_y+0
; end of ?ICS_newPacman_y
;compy.c,0 :: ?ICS_newPacmanOrientation
0x15D5	0x0000 ;?ICS_newPacmanOrientation+0
; end of ?ICS_newPacmanOrientation
;compy.c,0 :: ?ICS_barrier_orientation
0x15D7	0x04 ;?ICS_barrier_orientation+0
; end of ?ICS_barrier_orientation
;compy.c,0 :: ?ICS_food_orientation
0x15D8	0x05 ;?ICS_food_orientation+0
; end of ?ICS_food_orientation
;compy.c,0 :: ?ICS_pacman_y
0x15D9	0x0001 ;?ICS_pacman_y+0
; end of ?ICS_pacman_y
;compy.c,26 :: _ghost
0x15DB	0x0000 ;_ghost+0
0x15DD	0xF00F ;_ghost+2
0x15DF	0xF81F ;_ghost+4
0x15E1	0xFC3F ;_ghost+6
0x15E3	0xFE7F ;_ghost+8
0x15E5	0xCE73 ;_ghost+10
0x15E7	0xCE73 ;_ghost+12
0x15E9	0xFE7F ;_ghost+14
0x15EB	0xFE7F ;_ghost+16
0x15ED	0xFE7F ;_ghost+18
0x15EF	0x9E79 ;_ghost+20
0x15F1	0x6E76 ;_ghost+22
0x15F3	0xFE7F ;_ghost+24
0x15F5	0xEE6E ;_ghost+26
0x15F7	0x4644 ;_ghost+28
0x15F9	0x0000 ;_ghost+30
; end of _ghost
;compy.c,31 :: _obstacle
0x15FB	0x0000 ;_obstacle+0
0x15FD	0xFC3F ;_obstacle+2
0x15FF	0xFA5F ;_obstacle+4
0x1601	0xF66F ;_obstacle+6
0x1603	0xEE77 ;_obstacle+8
0x1605	0xDE7B ;_obstacle+10
0x1607	0xBE7D ;_obstacle+12
0x1609	0x7E7E ;_obstacle+14
0x160B	0x7E7E ;_obstacle+16
0x160D	0xBE7D ;_obstacle+18
0x160F	0xDE7B ;_obstacle+20
0x1611	0xEE77 ;_obstacle+22
0x1613	0xF66F ;_obstacle+24
0x1615	0xFA5F ;_obstacle+26
0x1617	0xFC3F ;_obstacle+28
0x1619	0x0000 ;_obstacle+30
; end of _obstacle
;compy.c,16 :: _blank
0x161B	0x0000 ;_blank+0
0x161D	0x0000 ;_blank+2
0x161F	0x0000 ;_blank+4
0x1621	0x0000 ;_blank+6
0x1623	0x0000 ;_blank+8
0x1625	0x0000 ;_blank+10
0x1627	0x0000 ;_blank+12
0x1629	0x0000 ;_blank+14
0x162B	0x0000 ;_blank+16
0x162D	0x0000 ;_blank+18
0x162F	0x0000 ;_blank+20
0x1631	0x0000 ;_blank+22
0x1633	0x0000 ;_blank+24
0x1635	0x0000 ;_blank+26
0x1637	0x0000 ;_blank+28
0x1639	0x0000 ;_blank+30
; end of _blank
;compy.c,21 :: _food
0x163B	0x0000 ;_food+0
0x163D	0x0000 ;_food+2
0x163F	0x0000 ;_food+4
0x1641	0x0000 ;_food+6
0x1643	0x0000 ;_food+8
0x1645	0x0000 ;_food+10
0x1647	0x8001 ;_food+12
0x1649	0xC003 ;_food+14
0x164B	0xC003 ;_food+16
0x164D	0x8001 ;_food+18
0x164F	0x0000 ;_food+20
0x1651	0x0000 ;_food+22
0x1653	0x0000 ;_food+24
0x1655	0x0000 ;_food+26
0x1657	0x0000 ;_food+28
0x1659	0x0000 ;_food+30
; end of _food
;compy.c,46 :: _pacman_left
0x165B	0x0000 ;_pacman_left+0
0x165D	0xF00F ;_pacman_left+2
0x165F	0xF81F ;_pacman_left+4
0x1661	0xFC3F ;_pacman_left+6
0x1663	0xFE7C ;_pacman_left+8
0x1665	0xFE7C ;_pacman_left+10
0x1667	0xFE3F ;_pacman_left+12
0x1669	0xFE0F ;_pacman_left+14
0x166B	0xFE03 ;_pacman_left+16
0x166D	0xFE01 ;_pacman_left+18
0x166F	0xFE7F ;_pacman_left+20
0x1671	0xFE7F ;_pacman_left+22
0x1673	0xFC3F ;_pacman_left+24
0x1675	0xF81F ;_pacman_left+26
0x1677	0xF00F ;_pacman_left+28
0x1679	0x0000 ;_pacman_left+30
; end of _pacman_left
;compy.c,51 :: _pacman_right
0x167B	0x0000 ;_pacman_right+0
0x167D	0xF007 ;_pacman_right+2
0x167F	0xF81F ;_pacman_right+4
0x1681	0xFC3F ;_pacman_right+6
0x1683	0x3E3F ;_pacman_right+8
0x1685	0x3E7F ;_pacman_right+10
0x1687	0xFC7F ;_pacman_right+12
0x1689	0xF87F ;_pacman_right+14
0x168B	0xE07F ;_pacman_right+16
0x168D	0xC07F ;_pacman_right+18
0x168F	0xFE7F ;_pacman_right+20
0x1691	0xFE3F ;_pacman_right+22
0x1693	0xFC3F ;_pacman_right+24
0x1695	0xF81F ;_pacman_right+26
0x1697	0xF007 ;_pacman_right+28
0x1699	0x0000 ;_pacman_right+30
; end of _pacman_right
;compy.c,41 :: _pacman_down
0x169B	0x0000 ;_pacman_down+0
0x169D	0xF00F ;_pacman_down+2
0x169F	0xF81F ;_pacman_down+4
0x16A1	0xFC3F ;_pacman_down+6
0x16A3	0xFE7F ;_pacman_down+8
0x16A5	0xFE7F ;_pacman_down+10
0x16A7	0xFE7F ;_pacman_down+12
0x16A9	0xFE7F ;_pacman_down+14
0x16AB	0xCE7B ;_pacman_down+16
0x16AD	0xCE79 ;_pacman_down+18
0x16AF	0xFE78 ;_pacman_down+20
0x16B1	0x7E78 ;_pacman_down+22
0x16B3	0x3C38 ;_pacman_down+24
0x16B5	0x1818 ;_pacman_down+26
0x16B7	0x0008 ;_pacman_down+28
0x16B9	0x0000 ;_pacman_down+30
; end of _pacman_down
;compy.c,36 :: _pacman_up
0x16BB	0x0000 ;_pacman_up+0
0x16BD	0x0008 ;_pacman_up+2
0x16BF	0x1818 ;_pacman_up+4
0x16C1	0x3C38 ;_pacman_up+6
0x16C3	0x7E78 ;_pacman_up+8
0x16C5	0xFE78 ;_pacman_up+10
0x16C7	0xCE79 ;_pacman_up+12
0x16C9	0xCE7B ;_pacman_up+14
0x16CB	0xFE7F ;_pacman_up+16
0x16CD	0xFE7F ;_pacman_up+18
0x16CF	0xFE7F ;_pacman_up+20
0x16D1	0xFE7F ;_pacman_up+22
0x16D3	0xFC3F ;_pacman_up+24
0x16D5	0xF81F ;_pacman_up+26
0x16D7	0xF00F ;_pacman_up+28
0x16D9	0x0000 ;_pacman_up+30
; end of _pacman_up
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [820]    _interrupt
0x033C      [26]    _T6963C_waitReady
0x0356       [6]    _Delay_1us
0x035C      [20]    _T6963C_writeData
0x0370      [20]    _T6963C_writeCommand
0x0384      [30]    _T6963C_setPtr
0x03A2      [54]    _Div_16x16_U
0x03D8      [80]    _Mul_16x16_U
0x0428     [248]    _T6963C_sprite
0x0520      [96]    _T6963C_write_text
0x0580      [82]    _Mul_32x32_U
0x05D2      [82]    _print
0x0624      [42]    _print_text
0x064E     [320]    _Print_World
0x078E      [88]    _Div_16x16_S_L
0x07E6     [110]    _myrand
0x0854      [28]    _Delay_100ms
0x0870     [110]    _update_pacman_orientation
0x08DE      [82]    _T6963C_fill
0x0930     [266]    _T6963C_init
0x0A3A      [16]    ___CC2DW
0x0A4A      [88]    _UART1_Init
0x0AA2     [198]    _Div_16x16_S
0x0B68      [22]    _I2C1_Init
0x0B7E     [172]    _Finish
0x0C2A     [576]    _update_pacman
0x0E6A    [1342]    _Create_World
0x13A8     [278]    _Le_Teclado
0x14BE      [16]    _InitTimer2
0x14CE     [210]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    R0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    R1
0x0001       [1]    ispunct_rslt_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memchr_s_L0
0x0002       [1]    R2
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0002       [2]    memset_pp_L0
0x0003       [1]    R3
0x0003       [2]    memmove_tt_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [1]    R4
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0005       [2]    memmove_ff_L0
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0027       [1]    _currentCharactere
0x0028       [4]    ?lstr4_compy
0x002C      [10]    ?lstr3_compy
0x0036       [2]    _ghost_x
0x0038       [2]    _rands
0x003A       [1]    _ghost_orientation
0x003B       [1]    _pacman_orientation
0x003C       [2]    _IS_GAME_OVER
0x003E       [2]    _IS_FINISH
0x0040       [4]    _next
0x0044       [2]    _j
0x0046       [2]    _i
0x0048       [2]    _ghost_y
0x004A       [1]    _command
0x004B       [2]    _QTD_FOOD
0x004D       [1]    _old_ghost_obj
0x004E       [2]    _newPacman_x
0x0050       [2]    _pacman_x
0x0052       [2]    _cnt
0x0054       [2]    _new_ghost_x
0x0056       [2]    _new_ghost_y
0x0058       [2]    _cnt2
0x005A       [2]    _newPacman_y
0x005C       [2]    _newPacmanOrientation
0x005E       [1]    _barrier_orientation
0x005F       [1]    _food_orientation
0x0060       [2]    _pacman_y
0x0062       [3]    _currentSprite
0x0065       [1]    _T6963C_display
0x0066       [2]    _T6963C_grWidth
0x0068       [2]    _T6963C_grHomeAddr
0x006A       [2]    _T6963C_textHomeAddr
0x006C       [2]    _T6963C_grHeight
0x006E       [2]    _T6963C_txtMemSize
0x0070       [2]    _T6963C_grMemSize
0x0072       [2]    _T6963C_fontWidth
0x0074       [4]    _UART_Rdy_Ptr
0x0078       [4]    _UART_Tx_Idle_Ptr
0x007C       [2]    _T6963C_txtCols
0x007E       [1]    FARG_update_pacman_direction
0x007E       [2]    FLOC__Create_World
0x0080       [1]    T6963C_setPtr_addrH_L0
0x0081       [4]    _UART_Wr_Ptr
0x0085       [4]    _UART_Rd_Ptr
0x0089     [240]    _world
0x0179       [2]    FARG_T6963C_init_width
0x0179       [4]    FARG_I2C1_Init_clock
0x017B       [1]    FARG_T6963C_init_height
0x017C       [1]    FARG_T6963C_init_fntW
0x017D       [2]    FARG_myrand_seed
0x017D       [2]    FARG_update_pacman_orientation_newX
0x017D       [1]    FARG_print_text_line
0x017D       [1]    FARG_T6963C_fill_v
0x017E       [2]    FARG_T6963C_fill_start
0x017E       [1]    FARG_print_text_column
0x017F       [2]    FARG_print_text_text
0x017F       [2]    FARG_update_pacman_orientation_newY
0x0180       [2]    FARG_T6963C_fill_len
0x0182       [2]    T6963C_fill_addr_L0
0x0184       [1]    FARG_print_line
0x0184       [2]    FARG_T6963C_write_text_str
0x0185       [1]    FARG_print_column
0x0186       [1]    FARG_T6963C_write_text_x
0x0186       [3]    FARG_print_sprite
0x0187       [1]    FARG_T6963C_write_text_y
0x0188       [1]    FARG_T6963C_write_text_mode
0x0189       [1]    FARG_T6963C_sprite_px
0x018A       [1]    FARG_T6963C_sprite_py
0x018B       [3]    FARG_T6963C_sprite_pic
0x018E       [1]    FARG_T6963C_sprite_sx
0x018F       [1]    FARG_T6963C_sprite_sy
0x0190       [2]    T6963C_sprite_cx_L0
0x0192       [2]    T6963C_sprite_i_L0
0x0194       [2]    T6963C_sprite_addr_L0
0x0196       [2]    FARG_T6963C_setPtr_p
0x0198       [1]    FARG_T6963C_setPtr_c
0x0199       [1]    FARG_T6963C_writeData_mydata
0x0199       [1]    FARG_T6963C_writeCommand_mydata
0x0F80       [0]    AN4_bit
0x0F80       [0]    RA7_bit
0x0F80       [0]    RA5_bit
0x0F80       [0]    HLVDIN_bit
0x0F80       [0]    RA4_bit
0x0F80       [0]    RA2_bit
0x0F80       [0]    RA3_bit
0x0F80       [0]    NOT_SS_bit
0x0F80       [0]    SS_bit
0x0F80       [0]    LVDIN_bit
0x0F80       [0]    T0CKI_bit
0x0F80       [0]    RA6_bit
0x0F80       [1]    PORTA
0x0F80       [0]    RA1_bit
0x0F80       [0]    RA0_bit
0x0F81       [0]    AN9_bit
0x0F81       [0]    KBI0_bit
0x0F81       [0]    RB7_bit
0x0F81       [0]    KBI1_bit
0x0F81       [0]    PGM_bit
0x0F81       [0]    INT1_bit
0x0F81       [0]    INT0_bit
0x0F81       [0]    RB5_bit
0x0F81       [1]    PORTB
0x0F81       [0]    KBI2_bit
0x0F81       [0]    KBI3_bit
0x0F81       [0]    RB3_bit
0x0F81       [0]    AN10_bit
0x0F81       [0]    PGC_bit
0x0F81       [0]    CCP2_PORTB_bit
0x0F81       [0]    PGD_bit
0x0F81       [0]    RB2_bit
0x0F81       [0]    AN8_bit
0x0F81       [0]    RB4_bit
0x0F81       [0]    INT2_bit
0x0F81       [0]    AN11_bit
0x0F81       [0]    RB0_bit
0x0F81       [0]    AN12_bit
0x0F81       [0]    RB6_bit
0x0F81       [0]    RB1_bit
0x0F82       [1]    PORTC
0x0F82       [0]    SDI_bit
0x0F82       [0]    RC6_bit
0x0F82       [0]    RC5_bit
0x0F82       [0]    SDA_bit
0x0F82       [0]    RC2_bit
0x0F82       [0]    SCL_bit
0x0F82       [0]    RC7_bit
0x0F82       [0]    RC4_bit
0x0F82       [0]    RC3_bit
0x0F82       [0]    TX_bit
0x0F82       [0]    T1CKI_bit
0x0F82       [0]    CCP1_bit
0x0F82       [0]    T13CKI_bit
0x0F82       [0]    CCP2_PORTC_bit
0x0F82       [0]    RX__bit
0x0F82       [0]    T1OSO_bit
0x0F82       [0]    RC0_bit
0x0F82       [0]    T6963C_ctrlwr
0x0F82       [0]    T6963C_ctrlrst
0x0F82       [0]    T6963C_ctrlcd
0x0F82       [0]    RC1_bit
0x0F82       [0]    SCK_bit
0x0F82       [0]    SDO_bit
0x0F82       [0]    T6963C_ctrlrd
0x0F82       [0]    CK_bit
0x0F82       [0]    T1OSI_bit
0x0F83       [0]    PSP6_bit
0x0F83       [0]    PSP3_bit
0x0F83       [0]    RD3_bit
0x0F83       [0]    PSP7_bit
0x0F83       [0]    RD5_bit
0x0F83       [0]    RD4_bit
0x0F83       [1]    T6963C_dataPort
0x0F83       [0]    P1D_bit
0x0F83       [0]    RD7_bit
0x0F83       [0]    P1B_bit
0x0F83       [0]    PSP5_bit
0x0F83       [0]    RD6_bit
0x0F83       [0]    P1C_bit
0x0F83       [0]    PSP4_bit
0x0F83       [0]    PSP1_bit
0x0F83       [0]    PSP0_bit
0x0F83       [0]    RD1_bit
0x0F83       [1]    PORTD
0x0F83       [0]    RD0_bit
0x0F83       [0]    RD2_bit
0x0F83       [0]    PSP2_bit
0x0F84       [1]    PORTE
0x0F84       [0]    NOT_CS_bit
0x0F84       [0]    NOT_MCLR_bit
0x0F84       [0]    CS_bit
0x0F84       [0]    RD_bit
0x0F84       [0]    VPP_bit
0x0F84       [0]    AN6_bit
0x0F84       [0]    AN7_bit
0x0F84       [0]    RE2_bit
0x0F84       [0]    AN5_bit
0x0F84       [0]    MCLR_bit
0x0F84       [0]    WR_bit
0x0F84       [0]    NOT_RD_bit
0x0F84       [0]    RE0_bit
0x0F84       [0]    RE3_bit
0x0F84       [0]    NOT_WR_bit
0x0F84       [0]    RE1_bit
0x0F89       [0]    LATA1_bit
0x0F89       [0]    LATA3_bit
0x0F89       [0]    LATA0_bit
0x0F89       [0]    LATA5_bit
0x0F89       [1]    LATA
0x0F89       [0]    LATA7_bit
0x0F89       [0]    LATA6_bit
0x0F89       [0]    LATA4_bit
0x0F89       [0]    LATA2_bit
0x0F8A       [0]    LATB3_bit
0x0F8A       [0]    LATB1_bit
0x0F8A       [0]    LATB0_bit
0x0F8A       [0]    LATB2_bit
0x0F8A       [1]    LATB
0x0F8A       [0]    LATB7_bit
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    LATB6_bit
0x0F8A       [0]    LATB4_bit
0x0F8B       [0]    LATC7_bit
0x0F8B       [0]    LATC4_bit
0x0F8B       [0]    LATC1_bit
0x0F8B       [0]    LATC3_bit
0x0F8B       [0]    LATC5_bit
0x0F8B       [0]    LATC0_bit
0x0F8B       [0]    LATC2_bit
0x0F8B       [1]    LATC
0x0F8B       [0]    LATC6_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD0_bit
0x0F8C       [1]    LATD
0x0F8C       [0]    LATD5_bit
0x0F8C       [0]    LATD2_bit
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD3_bit
0x0F8C       [0]    LATD4_bit
0x0F8D       [0]    LATE2_bit
0x0F8D       [0]    LATE0_bit
0x0F8D       [1]    LATE
0x0F8D       [0]    LATE1_bit
0x0F92       [0]    TRISA3_bit
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA2_bit
0x0F92       [1]    TRISA
0x0F92       [0]    TRISA6_bit
0x0F92       [0]    TRISA5_bit
0x0F92       [0]    TRISA7_bit
0x0F92       [0]    TRISA0_bit
0x0F92       [0]    TRISA4_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TRISB0_bit
0x0F93       [0]    TRISB1_bit
0x0F93       [0]    TRISB7_bit
0x0F93       [1]    TRISB
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    TRISB6_bit
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    TRISC1_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [0]    T6963C_ctrlwr_Direction
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    T6963C_ctrlcd_Direction
0x0F94       [0]    T6963C_ctrlrst_Direction
0x0F94       [1]    TRISC
0x0F94       [0]    T6963C_ctrlrd_Direction
0x0F94       [0]    TRISC3_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD0_bit
0x0F95       [1]    TRISD
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD4_bit
0x0F96       [0]    IBOV_TRISE_bit
0x0F96       [0]    OBF_TRISE_bit
0x0F96       [0]    PSPMODE_TRISE_bit
0x0F96       [0]    IBOV_bit
0x0F96       [1]    TRISE
0x0F96       [0]    OBF_bit
0x0F96       [0]    IBF_TRISE_bit
0x0F96       [0]    PSPMODE_bit
0x0F96       [0]    TRISE1_bit
0x0F96       [0]    IBF_bit
0x0F96       [0]    TRISE0_bit
0x0F96       [0]    TRISE2_bit
0x0F9B       [0]    TUN1_bit
0x0F9B       [0]    TUN3_bit
0x0F9B       [0]    TUN2_bit
0x0F9B       [0]    TUN0_bit
0x0F9B       [0]    PLLEN_bit
0x0F9B       [0]    INTSRC_bit
0x0F9B       [1]    OSCTUNE
0x0F9B       [0]    TUN4_bit
0x0F9D       [0]    RCIE_bit
0x0F9D       [0]    TMR2IE_bit
0x0F9D       [0]    TMR1IE_bit
0x0F9D       [0]    CCP1IE_bit
0x0F9D       [0]    TXIE_bit
0x0F9D       [0]    SSPIE_bit
0x0F9D       [0]    PSPIE_bit
0x0F9D       [1]    PIE1
0x0F9D       [0]    ADIE_bit
0x0F9E       [1]    PIR1
0x0F9E       [0]    SSPIF_bit
0x0F9E       [0]    ADIF_bit
0x0F9E       [0]    TMR2IF_bit
0x0F9E       [0]    PSPIF_bit
0x0F9E       [0]    CCP1IF_bit
0x0F9E       [0]    TMR1IF_bit
0x0F9E       [0]    RCIF_bit
0x0F9E       [0]    TXIF_bit
0x0F9F       [0]    TXIP_bit
0x0F9F       [0]    CCP1IP_bit
0x0F9F       [0]    RCIP_bit
0x0F9F       [0]    TMR1IP_bit
0x0F9F       [0]    ADIP_bit
0x0F9F       [0]    TMR2IP_bit
0x0F9F       [0]    PSPIP_bit
0x0F9F       [1]    IPR1
0x0F9F       [0]    SSPIP_bit
0x0FA0       [0]    HLVDIE_bit
0x0FA0       [0]    LVDIE_bit
0x0FA0       [0]    TMR3IE_bit
0x0FA0       [0]    CCP2IE_bit
0x0FA0       [0]    BCLIE_bit
0x0FA0       [0]    OSCFIE_bit
0x0FA0       [0]    CMIE_bit
0x0FA0       [0]    EEIE_bit
0x0FA0       [1]    PIE2
0x0FA1       [0]    OSCFIF_bit
0x0FA1       [0]    CMIF_bit
0x0FA1       [1]    PIR2
0x0FA1       [0]    HLVDIF_bit
0x0FA1       [0]    TMR3IF_bit
0x0FA1       [0]    LVDIF_bit
0x0FA1       [0]    BCLIF_bit
0x0FA1       [0]    EEIF_bit
0x0FA1       [0]    CCP2IF_bit
0x0FA2       [0]    OSCFIP_bit
0x0FA2       [0]    HLVDIP_bit
0x0FA2       [1]    IPR2
0x0FA2       [0]    CMIP_bit
0x0FA2       [0]    CCP2IP_bit
0x0FA2       [0]    TMR3IP_bit
0x0FA2       [0]    LVDIP_bit
0x0FA2       [0]    EEIP_bit
0x0FA2       [0]    BCLIP_bit
0x0FA6       [0]    EEPGD_bit
0x0FA6       [1]    EECON1
0x0FA6       [0]    CFGS_bit
0x0FA6       [0]    WR_EECON1_bit
0x0FA6       [0]    RD_EECON1_bit
0x0FA6       [0]    WREN_bit
0x0FA6       [0]    FREE_bit
0x0FA6       [0]    WRERR_bit
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FAA       [1]    EEADRH
0x0FAB       [1]    RCSTA
0x0FAB       [0]    SREN_bit
0x0FAB       [0]    CREN_bit
0x0FAB       [0]    SPEN_bit
0x0FAB       [0]    RX9_bit
0x0FAB       [0]    OERR_bit
0x0FAB       [0]    RX9D_bit
0x0FAB       [0]    ADEN_bit
0x0FAB       [0]    FERR_bit
0x0FAB       [0]    ADDEN_bit
0x0FAC       [0]    TX9D_bit
0x0FAC       [0]    SENDB_bit
0x0FAC       [0]    BRGH_bit
0x0FAC       [0]    TRMT_bit
0x0FAC       [0]    SYNC_bit
0x0FAC       [0]    TX9_bit
0x0FAC       [0]    CSRC_bit
0x0FAC       [1]    TXSTA
0x0FAC       [0]    TXEN_bit
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB1       [1]    T3CON
0x0FB1       [0]    T3SYNC_bit
0x0FB1       [0]    T3CCP1_bit
0x0FB1       [0]    TMR3ON_bit
0x0FB1       [0]    TMR3CS_bit
0x0FB1       [0]    T3CKPS0_bit
0x0FB1       [0]    RD16_bit
0x0FB1       [0]    NOT_T3SYNC_bit
0x0FB1       [0]    T3CKPS1_bit
0x0FB1       [0]    T3CCP2_bit
0x0FB2       [1]    TMR3L
0x0FB3       [1]    TMR3H
0x0FB4       [0]    C1OUT_bit
0x0FB4       [0]    CM0_bit
0x0FB4       [0]    CM2_bit
0x0FB4       [0]    C2OUT_bit
0x0FB4       [0]    CIS_bit
0x0FB4       [0]    CM1_bit
0x0FB4       [0]    C2INV_bit
0x0FB4       [0]    C1INV_bit
0x0FB4       [1]    CMCON
0x0FB5       [1]    CVRCON
0x0FB5       [0]    CVRR_bit
0x0FB5       [0]    CVRSS_bit
0x0FB5       [0]    CVREN_bit
0x0FB5       [0]    CVROE_bit
0x0FB5       [0]    CVR1_bit
0x0FB5       [0]    CVR0_bit
0x0FB5       [0]    CVR3_bit
0x0FB5       [0]    CVR2_bit
0x0FB6       [0]    PSSAC1_bit
0x0FB6       [0]    ECCPAS0_bit
0x0FB6       [0]    PSSAC0_bit
0x0FB6       [0]    PSSBD0_bit
0x0FB6       [0]    PSSBD1_bit
0x0FB6       [0]    ECCPASE_bit
0x0FB6       [1]    ECCP1AS
0x0FB6       [0]    ECCPAS1_bit
0x0FB6       [0]    ECCPAS2_bit
0x0FB7       [1]    PWM1CON
0x0FB7       [0]    PDC5_bit
0x0FB7       [0]    PDC4_bit
0x0FB7       [0]    PRSEN_bit
0x0FB7       [0]    PDC6_bit
0x0FB7       [0]    PDC1_bit
0x0FB7       [0]    PDC0_bit
0x0FB7       [0]    PDC3_bit
0x0FB7       [0]    PDC2_bit
0x0FB8       [0]    RXDTP_bit
0x0FB8       [0]    TXCKP_bit
0x0FB8       [0]    RCMT_bit
0x0FB8       [1]    BAUDCTL
0x0FB8       [1]    BAUDCON
0x0FB8       [0]    ABDOVF_bit
0x0FB8       [0]    WUE_bit
0x0FB8       [0]    ABDEN_bit
0x0FB8       [0]    BRG16_bit
0x0FB8       [0]    RCIDL_bit
0x0FB8       [0]    SCKP_bit
0x0FBA       [0]    DC2B0_bit
0x0FBA       [0]    DC2B1_bit
0x0FBA       [1]    CCP2CON
0x0FBA       [0]    CCP2X_bit
0x0FBA       [0]    CCP2M1_bit
0x0FBA       [0]    CCP2M2_bit
0x0FBA       [0]    CCP2M0_bit
0x0FBA       [0]    CCP2Y_bit
0x0FBA       [0]    CCP2M3_bit
0x0FBB       [1]    CCPR2L
0x0FBB       [2]    CCPR2
0x0FBC       [1]    CCPR2H
0x0FBD       [0]    P1M1_bit
0x0FBD       [1]    CCP1CON
0x0FBD       [0]    P1M0_bit
0x0FBD       [0]    CCP1M3_bit
0x0FBD       [0]    CCP1Y_bit
0x0FBD       [0]    CCP1X_bit
0x0FBD       [0]    CCP1M0_bit
0x0FBD       [0]    CCP1M1_bit
0x0FBD       [0]    CCP1M2_bit
0x0FBD       [0]    DC1B1_bit
0x0FBD       [0]    DC1B0_bit
0x0FBE       [1]    CCPR1L
0x0FBE       [2]    CCPR1
0x0FBF       [1]    CCPR1H
0x0FC0       [1]    ADCON2
0x0FC0       [0]    ACQT1_bit
0x0FC0       [0]    ACQT0_bit
0x0FC0       [0]    ADCS2_bit
0x0FC0       [0]    ACQT2_bit
0x0FC0       [0]    ADFM_bit
0x0FC0       [0]    ADCS1_bit
0x0FC0       [0]    ADCS0_bit
0x0FC1       [0]    PCFG3_bit
0x0FC1       [0]    VCFG1_bit
0x0FC1       [1]    ADCON1
0x0FC1       [0]    PCFG2_bit
0x0FC1       [0]    VCFG0_bit
0x0FC1       [0]    PCFG0_bit
0x0FC1       [0]    PCFG1_bit
0x0FC2       [0]    ADON_bit
0x0FC2       [1]    ADCON0
0x0FC2       [0]    NOT_DONE_bit
0x0FC2       [0]    GO_DONE_bit
0x0FC2       [0]    CHS3_bit
0x0FC2       [0]    DONE_bit
0x0FC2       [0]    CHS0_bit
0x0FC2       [0]    GO_bit
0x0FC2       [0]    CHS2_bit
0x0FC2       [0]    CHS1_bit
0x0FC3       [1]    ADRESL
0x0FC3       [2]    ADRES
0x0FC4       [1]    ADRESH
0x0FC5       [1]    SSPCON2
0x0FC5       [0]    PEN_bit
0x0FC5       [0]    RCEN_bit
0x0FC5       [0]    SEN_bit
0x0FC5       [0]    RSEN_bit
0x0FC5       [0]    ACKSTAT_bit
0x0FC5       [0]    GCEN_bit
0x0FC5       [0]    ACKEN_bit
0x0FC5       [0]    ACKDT_bit
0x0FC6       [1]    SSPCON1
0x0FC6       [0]    SSPM2_bit
0x0FC6       [0]    SSPM3_bit
0x0FC6       [0]    SSPM0_bit
0x0FC6       [0]    SSPM1_bit
0x0FC6       [0]    SSPOV_bit
0x0FC6       [0]    WCOL_bit
0x0FC6       [0]    CKP_bit
0x0FC6       [0]    SSPEN_bit
0x0FC7       [0]    S_bit
0x0FC7       [0]    P_bit
0x0FC7       [0]    R_bit
0x0FC7       [0]    BF_bit
0x0FC7       [0]    UA_bit
0x0FC7       [1]    SSPSTAT
0x0FC7       [0]    CKE_bit
0x0FC7       [0]    D_bit
0x0FC7       [0]    SMP_bit
0x0FC7       [0]    NOT_A_bit
0x0FC7       [0]    NOT_W_bit
0x0FC7       [0]    NOT_WRITE_bit
0x0FC7       [0]    NOT_ADDRESS_bit
0x0FC7       [0]    R_W_bit
0x0FC7       [0]    D_A_bit
0x0FC8       [1]    SSPADD
0x0FC9       [1]    SSPBUF
0x0FCA       [0]    TMR2ON_bit
0x0FCA       [0]    T2OUTPS0_bit
0x0FCA       [0]    T2OUTPS1_bit
0x0FCA       [0]    T2OUTPS2_bit
0x0FCA       [0]    T2OUTPS3_bit
0x0FCA       [0]    T2CKPS0_bit
0x0FCA       [1]    T2CON
0x0FCA       [0]    T2CKPS1_bit
0x0FCB       [1]    PR2
0x0FCC       [1]    TMR2
0x0FCD       [0]    T1OSCEN_bit
0x0FCD       [0]    T1CKPS0_bit
0x0FCD       [0]    T1CKPS1_bit
0x0FCD       [0]    TMR1ON_bit
0x0FCD       [0]    TMR1CS_bit
0x0FCD       [0]    T1SYNC_bit
0x0FCD       [0]    T1RUN_bit
0x0FCD       [1]    T1CON
0x0FCD       [0]    NOT_T1SYNC_bit
0x0FCD       [0]    RD16_T1CON_bit
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD0       [1]    RCON
0x0FD0       [0]    NOT_POR_bit
0x0FD0       [0]    NOT_BOR_bit
0x0FD0       [0]    IPEN_bit
0x0FD0       [0]    NOT_RI_bit
0x0FD0       [0]    NOT_TO_bit
0x0FD0       [0]    NOT_PD_bit
0x0FD0       [0]    PD_bit
0x0FD0       [0]    POR_bit
0x0FD0       [0]    BOR_bit
0x0FD0       [0]    SBOREN_bit
0x0FD0       [0]    RI_bit
0x0FD0       [0]    TO__bit
0x0FD1       [1]    WDTCON
0x0FD1       [0]    SWDTE_bit
0x0FD1       [0]    SWDTEN_bit
0x0FD2       [0]    LVDL1_bit
0x0FD2       [0]    LVDL0_bit
0x0FD2       [0]    LVDEN_bit
0x0FD2       [0]    IRVST_bit
0x0FD2       [0]    LVDL2_bit
0x0FD2       [0]    LVDL3_bit
0x0FD2       [0]    HLVDL0_bit
0x0FD2       [0]    HLVDL3_bit
0x0FD2       [0]    HLVDEN_bit
0x0FD2       [1]    LVDCON
0x0FD2       [1]    HLVDCON
0x0FD2       [0]    HLVDL2_bit
0x0FD2       [0]    HLVDL1_bit
0x0FD2       [0]    VDIRMAG_bit
0x0FD2       [0]    IVRST_bit
0x0FD2       [0]    LVV2_bit
0x0FD2       [0]    LVV3_bit
0x0FD2       [0]    LVV0_bit
0x0FD2       [0]    LVV1_bit
0x0FD2       [0]    BGST_bit
0x0FD3       [0]    IRCF1_bit
0x0FD3       [0]    IOFS_bit
0x0FD3       [0]    OSTS_bit
0x0FD3       [1]    OSCCON
0x0FD3       [0]    IDLEN_bit
0x0FD3       [0]    IRCF2_bit
0x0FD3       [0]    SCS1_bit
0x0FD3       [0]    SCS0_bit
0x0FD3       [0]    IRCF0_bit
0x0FD4       [1]    DEBUG
0x0FD5       [0]    TMR0ON_bit
0x0FD5       [0]    T0PS0_bit
0x0FD5       [1]    T0CON
0x0FD5       [0]    T08BIT_bit
0x0FD5       [0]    T016BIT_bit
0x0FD5       [0]    T0PS2_bit
0x0FD5       [0]    T0PS1_bit
0x0FD5       [0]    PSA_bit
0x0FD5       [0]    T0CS_bit
0x0FD5       [0]    T0SE_bit
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [0]    Z_bit
0x0FD8       [0]    DC_bit
0x0FD8       [1]    STATUS
0x0FD8       [0]    C_bit
0x0FD8       [0]    OV_bit
0x0FD8       [0]    N_bit
0x0FD9       [2]    FSR2PTR
0x0FD9       [1]    FSR2L
0x0FD9       [2]    FSR2
0x0FDA       [1]    FSR2H
0x0FDB       [1]    PLUSW2
0x0FDC       [1]    PREINC2
0x0FDD       [1]    POSTDEC2
0x0FDE       [1]    POSTINC2
0x0FDF       [1]    INDF2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE1       [2]    FSR1PTR
0x0FE1       [2]    FSR1
0x0FE2       [1]    FSR1H
0x0FE3       [1]    PLUSW1
0x0FE4       [1]    PREINC1
0x0FE5       [1]    POSTDEC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0PTR
0x0FE9       [1]    FSR0L
0x0FE9       [2]    FSR0
0x0FEA       [1]    FSR0H
0x0FEB       [1]    PLUSW0
0x0FEC       [1]    PREINC0
0x0FED       [1]    POSTDEC0
0x0FEE       [1]    POSTINC0
0x0FEF       [1]    INDF0
0x0FF0       [0]    INT1IE_bit
0x0FF0       [0]    INT2IF_bit
0x0FF0       [0]    INT1IF_bit
0x0FF0       [0]    INT2IP_bit
0x0FF0       [0]    INT1IP_bit
0x0FF0       [0]    INT2IE_bit
0x0FF0       [0]    INT2P_bit
0x0FF0       [0]    INT2F_bit
0x0FF0       [0]    INT1F_bit
0x0FF0       [1]    INTCON3
0x0FF0       [0]    INT1P_bit
0x0FF0       [0]    INT2E_bit
0x0FF0       [0]    INT1E_bit
0x0FF1       [0]    INTEDG0_bit
0x0FF1       [0]    RBPU_bit
0x0FF1       [0]    NOT_RBPU_bit
0x0FF1       [0]    INTEDG1_bit
0x0FF1       [0]    RBIP_bit
0x0FF1       [0]    TMR0IP_bit
0x0FF1       [0]    INTEDG2_bit
0x0FF1       [1]    INTCON2
0x0FF2       [0]    RBIF_bit
0x0FF2       [0]    INT0F_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [0]    GIEH_bit
0x0FF2       [1]    INTCON
0x0FF2       [0]    T0IE_bit
0x0FF2       [0]    GIEL_bit
0x0FF2       [0]    INT0IF_bit
0x0FF2       [0]    GIE_bit
0x0FF2       [0]    INT0IE_bit
0x0FF2       [0]    T0IF_bit
0x0FF2       [0]    INT0E_bit
0x0FF2       [0]    RBIE_bit
0x0FF2       [0]    PEIE_bit
0x0FF2       [0]    TMR0IE_bit
0x0FF3       [1]    PRODL
0x0FF3       [2]    PROD
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF6       [3]    TBLPTR
0x0FF7       [1]    TBLPTRH
0x0FF8       [0]    TBLPTRU2_bit
0x0FF8       [0]    TBLPTRU1_bit
0x0FF8       [0]    TBLPTRU0_bit
0x0FF8       [0]    ACSS_bit
0x0FF8       [0]    TBLPTRU4_bit
0x0FF8       [0]    TBLPTRU3_bit
0x0FF8       [1]    TBLPTRU
0x0FF9       [1]    PCL
0x0FF9       [1]    PC
0x0FFA       [1]    PCLATH
0x0FFB       [0]    PCU2_bit
0x0FFB       [0]    PCU4_bit
0x0FFB       [0]    PCU3_bit
0x0FFB       [1]    PCLATU
0x0FFB       [0]    PCU0_bit
0x0FFB       [0]    PCU1_bit
0x0FFC       [0]    SP1_bit
0x0FFC       [0]    STKOVF_bit
0x0FFC       [0]    SP0_bit
0x0FFC       [0]    SP2_bit
0x0FFC       [0]    STKFUL_bit
0x0FFC       [0]    SP4_bit
0x0FFC       [0]    SP3_bit
0x0FFC       [0]    STKUNF_bit
0x0FFC       [0]    STKPTR1_bit
0x0FFC       [0]    STKPTR0_bit
0x0FFC       [1]    STKPTR
0x0FFC       [0]    STKPTR4_bit
0x0FFC       [0]    STKPTR3_bit
0x0FFC       [0]    STKPTR2_bit
0x0FFD       [1]    TOSL
0x0FFD       [1]    TOS
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x15A0       [1]    ?ICS_currentCharactere
0x15A1       [4]    ?ICS?lstr4_compy
0x15A5      [10]    ?ICS?lstr3_compy
0x15AF       [2]    ?ICS_ghost_x
0x15B1       [2]    ?ICS_rands
0x15B3       [1]    ?ICS_ghost_orientation
0x15B4       [1]    ?ICS_pacman_orientation
0x15B5       [2]    ?ICS_IS_GAME_OVER
0x15B7       [2]    ?ICS_IS_FINISH
0x15B9       [4]    ?ICS_next
0x15BD       [2]    ?ICS_j
0x15BF       [2]    ?ICS_i
0x15C1       [2]    ?ICS_ghost_y
0x15C3       [1]    ?ICS_command
0x15C4       [2]    ?ICS_QTD_FOOD
0x15C6       [1]    ?ICS_old_ghost_obj
0x15C7       [2]    ?ICS_newPacman_x
0x15C9       [2]    ?ICS_pacman_x
0x15CB       [2]    ?ICS_cnt
0x15CD       [2]    ?ICS_new_ghost_x
0x15CF       [2]    ?ICS_new_ghost_y
0x15D1       [2]    ?ICS_cnt2
0x15D3       [2]    ?ICS_newPacman_y
0x15D5       [2]    ?ICS_newPacmanOrientation
0x15D7       [1]    ?ICS_barrier_orientation
0x15D8       [1]    ?ICS_food_orientation
0x15D9       [2]    ?ICS_pacman_y
0x15DB      [32]    _ghost
0x15FB      [32]    _obstacle
0x161B      [32]    _blank
0x163B      [32]    _food
0x165B      [32]    _pacman_left
0x167B      [32]    _pacman_right
0x169B      [32]    _pacman_down
0x16BB      [32]    _pacman_up
//** Label List: ** 
//----------------------------------------------
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_Le_Teclado17
  L_Le_Teclado18
  L_Le_Teclado19
  L_Le_Teclado20
  L_Le_Teclado21
  L_Le_Teclado22
  L_Le_Teclado23
  L_Le_Teclado24
  L_Le_Teclado25
  L_Le_Teclado26
  L_Le_Teclado27
  L_Le_Teclado28
  L_Le_Teclado29
  L_Le_Teclado30
  L_Le_Teclado31
  L_Le_Teclado32
  L_Le_Teclado33
  L_Le_Teclado34
  L_Le_Teclado35
  L_Le_Teclado36
  L_Le_Teclado37
  L_Le_Teclado38
  L_Le_Teclado39
  L_Le_Teclado40
  L_Le_Teclado41
  L_Le_Teclado42
  L_Le_Teclado43
  L_Le_Teclado44
  L_Le_Teclado45
  L_Le_Teclado46
  L_Le_Teclado47
  L_Le_Teclado48
  L_Le_Teclado49
  L_Le_Teclado50
  L_Le_Teclado51
  L_Le_Teclado52
  L_Le_Teclado53
  L_Le_Teclado54
  L_Le_Teclado55
  L_Le_Teclado56
  L_Le_Teclado57
  L_Le_Teclado58
  L_Le_Teclado59
  L_Le_Teclado60
  L_Le_Teclado61
  L_Le_Teclado62
  L_Le_Teclado63
  L_Le_Teclado64
  L_Move_Delay65
  L_Create_World66
  L_Create_World67
  L_Create_World68
  L_Create_World69
  L_Create_World70
  L_Create_World71
  L_Create_World72
  L_Create_World73
  L_Print_World74
  L_Print_World75
  L_Print_World76
  L_Print_World77
  L_Print_World78
  L_Print_World79
  L_Print_World80
  L_Print_World81
  L_Print_World82
  L_Print_World83
  L_Print_World84
  L_Print_World85
  L_Print_World86
  L_Print_World87
  L_Print_World88
  L_Print_World89
  L_Print_World90
  L_Print_World91
  L_Print_World92
  L_Print_World93
  L_Print_World94
  L_Print_World95
  L_update_pacman_orientation96
  L_update_pacman_orientation97
  L_update_pacman_orientation98
  L_update_pacman_orientation99
  L_update_pacman_orientation100
  L_update_pacman_orientation101
  L_update_pacman_orientation102
  L_update_pacman103
  L_update_pacman104
  L_update_pacman105
  L_update_pacman106
  L_update_pacman107
  L_update_pacman108
  L_update_pacman109
  L_update_pacman110
  L_update_pacman111
  L_update_pacman112
  L_update_pacman113
  L_update_pacman114
  L_update_pacman115
  L_update_pacman116
  L_Write_EEPROM117
  L_Start_Screen118
  L_Start_Screen119
  L_Finish120
  L_Finish121
  L_Finish122
  L_Finish123
  L_Finish124
  L_Finish125
  L_Finish126
  L_Finish127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L__main141
  _print
  _print_text
  _InitTimer2
  _external_interrupt
  _interrupt
  L__interrupt142
  L__interrupt143
  L__interrupt144
  L__interrupt145
  L__interrupt146
  L__interrupt147
  L__interrupt148
  L__interrupt149
  L__interrupt150
  L__interrupt151
  _Le_Teclado
  _Pula_Linha
  _Move_Delay
  _myrand
  _mysrand
  _Read_RTC
  _Create_World
  L__Create_World152
  L__Create_World153
  L__Create_World154
  L__Create_World155
  _Print_World
  L__Print_World156
  L__Print_World157
  _update_pacman_orientation
  L__update_pacman_orientation158
  L__update_pacman_orientation159
  L__update_pacman_orientation160
  L__update_pacman_orientation161
  _update_pacman
  L__update_pacman162
  L__update_pacman163
  L__update_pacman164
  L__update_pacman165
  L__update_pacman166
  L__update_pacman167
  L__update_pacman168
  _Write_EEPROM
  _Write_EEPROM_Int
  _Read_EEPROM
  _Read_EEPROM_Int
  _Transform_Time
  _Start_Screen
  _Finish
  L__Finish169
  L__Finish170
  _main
  L__main171
  L__main172
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_8ms6
  L_Delay_100ms7
  L_Delay_10ms8
  L_Delay_1sec9
  L____Boot_Delay4k10
  L____Boot_Delay8k11
  L____Boot_Delay12k12
  L____Boot_Delay16k13
  L____Boot_Delay24k14
  L____Boot_Delay32k15
  L____Boot_Delay48k16
  L____Boot_Delay64k17
  L____Boot_Delay128k18
  L_Delay_Cyc19
  L_Delay_Cyc20
  L_VDelay_ms21
  L_VDelay_ms22
  L_VDelay_ms23
  L_VDelay_Advanced_ms24
  L_VDelay_Advanced_ms25
  L_VDelay_Advanced_ms26
  _Get_Fosc_kHz
  _Delay_1us
  _Delay_10us
  _Delay_22us
  _Delay_50us
  _Delay_80us
  _Delay_500us
  _Delay_5500us
  _Delay_8ms
  _Delay_100ms
  _Delay_10ms
  _Delay_1sec
  ____Boot_Delay4k
  ____Boot_Delay8k
  ____Boot_Delay12k
  ____Boot_Delay16k
  ____Boot_Delay24k
  ____Boot_Delay32k
  ____Boot_Delay48k
  ____Boot_Delay64k
  ____Boot_Delay128k
  _Delay_Cyc
  _VDelay_ms
  L__VDelay_ms27
  L__VDelay_ms28
  L__VDelay_ms29
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms30
  L__VDelay_Advanced_ms31
  L__VDelay_Advanced_ms32
  L_I2C1_Is_Idle0
  L_I2C1_Is_Idle1
  L_I2C1_Start2
  L_I2C1_Start3
  L_I2C1_Start4
  L_I2C1_Start5
  L_I2C1_Start6
  L_I2C1_Start7
  L_I2C1_Start8
  L_I2C1_Start9
  L_I2C1_Repeated_Start10
  L_I2C1_Repeated_Start11
  L_I2C1_Rd12
  L_I2C1_Rd13
  L_I2C1_Rd14
  L_I2C1_Rd15
  L_I2C1_Rd16
  L_I2C1_Rd17
  L_I2C1_Wr18
  L_I2C1_Wr19
  L_I2C1_Wr20
  L_I2C1_Wr21
  L_I2C1_Wr22
  L_I2C1_Wr23
  _I2C1_Init
  _I2C1_Is_Idle
  _I2C1_Start
  L__I2C1_Start24
  L__I2C1_Start25
  _I2C1_Repeated_Start
  _I2C1_Rd
  _I2C1_Wr
  _I2C1_Stop
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  _Div_8x8_U
  _Div_16x16_U
  _Div_16x16_S_L
  _Div_16x16_S
  _Div_8x8_S
  _Mul_8x8_S
  _Mul_16x16_U
  _Mul_16x16_S
  _SDIV3232L
  _COMFREM
  _Div_32x32_S
  _Div_32x32_U
  _Mul_32x32_U
  _Mul_32x32_S
  _CC2D_Loop1
  _CC2DL_Loop1
  L_longjmp2
  ___CC2D
  ___CC2DW
  _____DoIFC
  _Swap
  _setjmp
  _longjmp
  L_T6963C_waitReady0
  L_T6963C_waitReady1
  L_T6963C_fill2
  L_T6963C_fill3
  L_T6963C_image4
  L_T6963C_image5
  L_T6963C_sprite6
  L_T6963C_sprite7
  L_T6963C_sprite8
  L_T6963C_sprite9
  L_T6963C_sprite10
  L_T6963C_sprite11
  L_T6963C_write_text12
  L_T6963C_write_text13
  L_T6963C_circle14
  L_T6963C_circle15
  L_T6963C_circle16
  L_T6963C_circle17
  L_T6963C_box18
  L_T6963C_box19
  L_T6963C_line20
  L_T6963C_line21
  L_T6963C_line22
  L_T6963C_line23
  L_T6963C_line24
  L_T6963C_line25
  L_T6963C_line26
  L_T6963C_line27
  L_T6963C_line28
  L_T6963C_line29
  L_T6963C_line30
  L_T6963C_line31
  L_T6963C_dot32
  L_T6963C_dot33
  L_T6963C_dot34
  L_T6963C_dot35
  _T6963C_waitReady
  _T6963C_writeData
  _T6963C_writeCommand
  _T6963C_fill
  L__T6963C_fill36
  _T6963C_image
  L__T6963C_image37
  _T6963C_sprite
  L__T6963C_sprite38
  _T6963C_set_cursor
  _T6963C_write_char
  _T6963C_write_text
  _T6963C_circle
  L__T6963C_circle39
  L__T6963C_circle40
  _T6963C_box
  L__T6963C_box41
  _T6963C_rectangle
  _T6963C_line
  L__T6963C_line42
  L__T6963C_line43
  L__T6963C_line44
  L__T6963C_line45
  L__T6963C_line46
  L__T6963C_line47
  L__T6963C_line48
  _T6963C_setPtr
  _T6963C_dot
  L__T6963C_dot49
  L__T6963C_dot50
  L__T6963C_dot51
  L__T6963C_dot52
  _T6963C_init
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  _UART1_Init
  _UART1_Data_Ready
  _UART1_Read
  _UART1_Tx_Idle
  _UART1_Write
  _UART1_Write_Text
  _UART1_Read_Text
  _UART_Set_Active
  L_interrupt0
  L_interrupt1
  L_interrupt2
  L_interrupt3
  L_interrupt4
  L_interrupt5
  L_interrupt6
  L_interrupt7
  L_interrupt8
  L_interrupt9
  L_interrupt10
  L_interrupt11
  L_interrupt12
  L_interrupt13
  L_interrupt14
  L_interrupt15
  L_interrupt16
  L_Le_Teclado17
  L_Le_Teclado18
  L_Le_Teclado19
  L_Le_Teclado20
  L_Le_Teclado21
  L_Le_Teclado22
  L_Le_Teclado23
  L_Le_Teclado24
  L_Le_Teclado25
  L_Le_Teclado26
  L_Le_Teclado27
  L_Le_Teclado28
  L_Le_Teclado29
  L_Le_Teclado30
  L_Le_Teclado31
  L_Le_Teclado32
  L_Le_Teclado33
  L_Le_Teclado34
  L_Le_Teclado35
  L_Le_Teclado36
  L_Le_Teclado37
  L_Le_Teclado38
  L_Le_Teclado39
  L_Le_Teclado40
  L_Le_Teclado41
  L_Le_Teclado42
  L_Le_Teclado43
  L_Le_Teclado44
  L_Le_Teclado45
  L_Le_Teclado46
  L_Le_Teclado47
  L_Le_Teclado48
  L_Le_Teclado49
  L_Le_Teclado50
  L_Le_Teclado51
  L_Le_Teclado52
  L_Le_Teclado53
  L_Le_Teclado54
  L_Le_Teclado55
  L_Le_Teclado56
  L_Le_Teclado57
  L_Le_Teclado58
  L_Le_Teclado59
  L_Le_Teclado60
  L_Le_Teclado61
  L_Le_Teclado62
  L_Le_Teclado63
  L_Le_Teclado64
  L_Move_Delay65
  L_Create_World66
  L_Create_World67
  L_Create_World68
  L_Create_World69
  L_Create_World70
  L_Create_World71
  L_Create_World72
  L_Create_World73
  L_Print_World74
  L_Print_World75
  L_Print_World76
  L_Print_World77
  L_Print_World78
  L_Print_World79
  L_Print_World80
  L_Print_World81
  L_Print_World82
  L_Print_World83
  L_Print_World84
  L_Print_World85
  L_Print_World86
  L_Print_World87
  L_Print_World88
  L_Print_World89
  L_Print_World90
  L_Print_World91
  L_Print_World92
  L_Print_World93
  L_Print_World94
  L_Print_World95
  L_update_pacman_orientation96
  L_update_pacman_orientation97
  L_update_pacman_orientation98
  L_update_pacman_orientation99
  L_update_pacman_orientation100
  L_update_pacman_orientation101
  L_update_pacman_orientation102
  L_update_pacman103
  L_update_pacman104
  L_update_pacman105
  L_update_pacman106
  L_update_pacman107
  L_update_pacman108
  L_update_pacman109
  L_update_pacman110
  L_update_pacman111
  L_update_pacman112
  L_update_pacman113
  L_update_pacman114
  L_update_pacman115
  L_update_pacman116
  L_Write_EEPROM117
  L_Start_Screen118
  L_Start_Screen119
  L_Finish120
  L_Finish121
  L_Finish122
  L_Finish123
  L_Finish124
  L_Finish125
  L_Finish126
  L_Finish127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L_main138
  L_main139
  L_main140
  L__main141
  _print
  _print_text
  _InitTimer2
  _external_interrupt
  _interrupt
  L__interrupt142
  L__interrupt143
  L__interrupt144
  L__interrupt145
  L__interrupt146
  L__interrupt147
  L__interrupt148
  L__interrupt149
  L__interrupt150
  L__interrupt151
  _Le_Teclado
  _Pula_Linha
  _Move_Delay
  _myrand
  _mysrand
  _Read_RTC
  _Create_World
  L__Create_World152
  L__Create_World153
  L__Create_World154
  L__Create_World155
  _Print_World
  L__Print_World156
  L__Print_World157
  _update_pacman_orientation
  L__update_pacman_orientation158
  L__update_pacman_orientation159
  L__update_pacman_orientation160
  L__update_pacman_orientation161
  _update_pacman
  L__update_pacman162
  L__update_pacman163
  L__update_pacman164
  L__update_pacman165
  L__update_pacman166
  L__update_pacman167
  L__update_pacman168
  _Write_EEPROM
  _Write_EEPROM_Int
  _Read_EEPROM
  _Read_EEPROM_Int
  _Transform_Time
  _Start_Screen
  _Finish
  L__Finish169
  L__Finish170
  _main
  L__main171
  L__main172
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  _Div_8x8_U
  _Div_16x16_U
  _Div_16x16_S_L
  _Div_16x16_S
  _Div_8x8_S
  _Mul_8x8_S
  _Mul_16x16_U
  _Mul_16x16_S
  _SDIV3232L
  _COMFREM
  _Div_32x32_S
  _Div_32x32_U
  _Mul_32x32_U
  _Mul_32x32_S
