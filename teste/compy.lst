;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 10/06/2020 19:57:57
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF009EFD8  	GOTO        5040
_interrupt:
;compy.c,172 :: 		void interrupt() {
0x0008	0xF015C000  	MOVFF       R0, 21
;compy.c,173 :: 		if(int0if_bit)
0x000C	0xA2F2      	BTFSS       INT0IF_bit, 1 
0x000E	0xD014      	BRA         L_interrupt25
;compy.c,175 :: 		cnt2++;
0x0010	0x4A49      	INFSNZ      _cnt2, 1 
0x0012	0x2A4A      	INCF        _cnt2+1, 1 
;compy.c,176 :: 		if (cnt2 > 180) {
0x0014	0x0E80      	MOVLW       128
0x0016	0x6E00      	MOVWF       R0 
0x0018	0x0E80      	MOVLW       128
0x001A	0x184A      	XORWF       _cnt2+1, 0 
0x001C	0x5C00      	SUBWF       R0, 0 
0x001E	0xE102      	BNZ         L__interrupt146
0x0020	0x5049      	MOVF        _cnt2, 0 
0x0022	0x08B4      	SUBLW       180
L__interrupt146:
0x0024	0xE208      	BC          L_interrupt26
;compy.c,177 :: 		IS_FINISH = 1;
0x0026	0x0E01      	MOVLW       1
0x0028	0x6E25      	MOVWF       _IS_FINISH 
0x002A	0x0E00      	MOVLW       0
0x002C	0x6E26      	MOVWF       _IS_FINISH+1 
;compy.c,178 :: 		IS_GAME_OVER = 1;
0x002E	0x0E01      	MOVLW       1
0x0030	0x6E18      	MOVWF       _IS_GAME_OVER 
0x0032	0x0E00      	MOVLW       0
0x0034	0x6E19      	MOVWF       _IS_GAME_OVER+1 
;compy.c,179 :: 		}
L_interrupt26:
;compy.c,180 :: 		int0if_bit = 0;   // clear int0if_bit
0x0036	0x92F2      	BCF         INT0IF_bit, 1 
;compy.c,181 :: 		}
L_interrupt25:
;compy.c,183 :: 		if (TMR2IF_bit) {
0x0038	0xA29E      	BTFSS       TMR2IF_bit, 1 
0x003A	0xD014      	BRA         L_interrupt27
;compy.c,184 :: 		cnt++;
0x003C	0x4A4B      	INFSNZ      _cnt, 1 
0x003E	0x2A4C      	INCF        _cnt+1, 1 
;compy.c,185 :: 		if (cnt >= 1000) {
0x0040	0x0E80      	MOVLW       128
0x0042	0x184C      	XORWF       _cnt+1, 0 
0x0044	0x6E00      	MOVWF       R0 
0x0046	0x0E80      	MOVLW       128
0x0048	0x0A03      	XORLW       3
0x004A	0x5C00      	SUBWF       R0, 0 
0x004C	0xE102      	BNZ         L__interrupt147
0x004E	0x0EE8      	MOVLW       232
0x0050	0x5C4B      	SUBWF       _cnt, 0 
L__interrupt147:
0x0052	0xE307      	BNC         L_interrupt28
;compy.c,186 :: 		PORTA.F1 = ~PORTA.F1;
0x0054	0x7280      	BTG         PORTA, 1 
;compy.c,187 :: 		cnt = 0;
0x0056	0x6A4B      	CLRF        _cnt 
0x0058	0x6A4C      	CLRF        _cnt+1 
;compy.c,188 :: 		move_ghost_bool = 1;
0x005A	0x0E01      	MOVLW       1
0x005C	0x6E2D      	MOVWF       _move_ghost_bool 
0x005E	0x0E00      	MOVLW       0
0x0060	0x6E2E      	MOVWF       _move_ghost_bool+1 
;compy.c,189 :: 		}
L_interrupt28:
;compy.c,190 :: 		TMR2IF_bit = 0;        // clear TMR2IF
0x0062	0x929E      	BCF         TMR2IF_bit, 1 
;compy.c,191 :: 		}
L_interrupt27:
;compy.c,192 :: 		}
L__interrupt145:
0x0064	0xF000C015  	MOVFF       21, R0
0x0068	0x0011      	RETFIE      1
; end of _interrupt
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x006A	0x0000      	NOP
0x006C	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
0x006E	0x0012      	RETURN      0
; end of _Delay_1us
_T6963C_waitReady:
;__Lib_T6963C.c,60 :: 		
;__Lib_T6963C.c,62 :: 		
0x0070	0x8082      	BSF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,66 :: 		
0x0072	0x0EFF      	MOVLW       255
0x0074	0x6E95      	MOVWF       T6963C_dataPort+18 
;__Lib_T6963C.c,68 :: 		
0x0076	0x9282      	BCF         T6963C_ctrlrd, BitPos(T6963C_ctrlrd+0) 
;__Lib_T6963C.c,70 :: 		
L_T6963C_waitReady0:
0x0078	0x0E03      	MOVLW       3
0x007A	0x1483      	ANDWF       T6963C_dataPort, 0 
0x007C	0x6E01      	MOVWF       R1 
;__Lib_T6963C.c,71 :: 		
0x007E	0x5001      	MOVF        R1, 0 
0x0080	0x0A03      	XORLW       3
0x0082	0xE001      	BZ          L_T6963C_waitReady1
;__Lib_T6963C.c,72 :: 		
0x0084	0xD7F9      	BRA         L_T6963C_waitReady0
L_T6963C_waitReady1:
;__Lib_T6963C.c,73 :: 		
0x0086	0x8282      	BSF         T6963C_ctrlrd, BitPos(T6963C_ctrlrd+0) 
;__Lib_T6963C.c,74 :: 		
0x0088	0x0012      	RETURN      0
; end of _T6963C_waitReady
_T6963C_writeData:
;__Lib_T6963C.c,79 :: 		
;__Lib_T6963C.c,81 :: 		
0x008A	0x9082      	BCF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,84 :: 		
0x008C	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,85 :: 		
0x008E	0xFF83C18E  	MOVFF       FARG_T6963C_writeData_mydata, T6963C_dataPort
;__Lib_T6963C.c,86 :: 		
0x0092	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,87 :: 		
0x0094	0xDFEA      	RCALL       _Delay_1us
0x0096	0xDFE9      	RCALL       _Delay_1us
0x0098	0xDFE8      	RCALL       _Delay_1us
;__Lib_T6963C.c,91 :: 		
0x009A	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,92 :: 		
0x009C	0x0012      	RETURN      0
; end of _T6963C_writeData
_T6963C_writeCommand:
;__Lib_T6963C.c,97 :: 		
;__Lib_T6963C.c,99 :: 		
0x009E	0xDFE8      	RCALL       _T6963C_waitReady
;__Lib_T6963C.c,102 :: 		
0x00A0	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,103 :: 		
0x00A2	0xFF83C18E  	MOVFF       FARG_T6963C_writeCommand_mydata, T6963C_dataPort
;__Lib_T6963C.c,104 :: 		
0x00A6	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,105 :: 		
0x00A8	0xDFE0      	RCALL       _Delay_1us
0x00AA	0xDFDF      	RCALL       _Delay_1us
0x00AC	0xDFDE      	RCALL       _Delay_1us
;__Lib_T6963C.c,107 :: 		
0x00AE	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,108 :: 		
0x00B0	0x0012      	RETURN      0
; end of _T6963C_writeCommand
_Div_16x16_U:
;__Lib_Math.c,102 :: 		
;__Lib_Math.c,109 :: 		
0x00B2	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,110 :: 		
0x00B4	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,111 :: 		
0x00B6	0x0E10      	MOVLW       16
;__Lib_Math.c,112 :: 		
0x00B8	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,113 :: 		
0x00BA	0x3401      	RLCF        R1, 0, 0
;__Lib_Math.c,114 :: 		
0x00BC	0x3608      	RLCF        R8, 1, 0
;__Lib_Math.c,115 :: 		
0x00BE	0x3609      	RLCF        R9, 1, 0
;__Lib_Math.c,116 :: 		
0x00C0	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,117 :: 		
0x00C2	0x5E08      	SUBWF       R8, 1, 0
;__Lib_Math.c,118 :: 		
0x00C4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,119 :: 		
0x00C6	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,120 :: 		
0x00C8	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,121 :: 		
0x00CA	0x5E09      	SUBWF       R9, 1, 0
;__Lib_Math.c,122 :: 		
0x00CC	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,123 :: 		
0x00CE	0xD007      	BRA         $+16
;__Lib_Math.c,124 :: 		
0x00D0	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,125 :: 		
0x00D2	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,126 :: 		
0x00D4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,127 :: 		
0x00D6	0xB0D8      	BTFSC       STATUS, 0, 0
;__Lib_Math.c,128 :: 		
0x00D8	0x3C05      	INCFSZ      R5, 0, 0
;__Lib_Math.c,129 :: 		
0x00DA	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,130 :: 		
0x00DC	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,131 :: 		
0x00DE	0x3600      	RLCF        R0, 1, 0
;__Lib_Math.c,132 :: 		
0x00E0	0x3601      	RLCF        R1, 1, 0
;__Lib_Math.c,133 :: 		
0x00E2	0x2E0C      	DECFSZ      R12, 1, 0
;__Lib_Math.c,134 :: 		
0x00E4	0xD7EA      	BRA         $-42
;__Lib_Math.c,136 :: 		
0x00E6	0x0012      	RETURN      0
; end of _Div_16x16_U
_Mul_16x16_U:
;__Lib_Math.c,437 :: 		
;__Lib_Math.c,444 :: 		
0x00E8	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,445 :: 		
0x00EA	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,446 :: 		
0x00EC	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,447 :: 		
0x00EE	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,448 :: 		
0x00F0	0x0204      	MULWF       R4, 0
;__Lib_Math.c,450 :: 		
0x00F2	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,451 :: 		
0x00F6	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,452 :: 		
0x00FA	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,453 :: 		
0x00FC	0x0205      	MULWF       R5, 0
;__Lib_Math.c,455 :: 		
0x00FE	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,456 :: 		
0x0102	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,457 :: 		
0x0106	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,458 :: 		
0x0108	0x0205      	MULWF       R5, 0
;__Lib_Math.c,460 :: 		
0x010A	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,461 :: 		
0x010C	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,462 :: 		
0x010E	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,463 :: 		
0x0110	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,464 :: 		
0x0112	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,465 :: 		
0x0114	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,466 :: 		
0x0116	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,467 :: 		
0x0118	0x0204      	MULWF       R4, 0
;__Lib_Math.c,469 :: 		
0x011A	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,470 :: 		
0x011C	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,471 :: 		
0x011E	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,472 :: 		
0x0120	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,473 :: 		
0x0122	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,474 :: 		
0x0124	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,476 :: 		
0x0126	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,477 :: 		
0x012A	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,478 :: 		
0x012E	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,479 :: 		
0x0132	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,482 :: 		
0x0136	0x0012      	RETURN      0
; end of _Mul_16x16_U
_T6963C_setPtr:
;__Lib_T6963C.c,420 :: 		
;__Lib_T6963C.c,425 :: 		
0x0138	0xF000C18B  	MOVFF       FARG_T6963C_setPtr_p+1, R0
0x013C	0x6A01      	CLRF        R1 
0x013E	0xF18DC000  	MOVFF       R0, T6963C_setPtr_addrH_L0
;__Lib_T6963C.c,426 :: 		
0x0142	0xF18EC18A  	MOVFF       FARG_T6963C_setPtr_p, FARG_T6963C_writeData_mydata
0x0146	0xDFA1      	RCALL       _T6963C_writeData
;__Lib_T6963C.c,427 :: 		
0x0148	0xF18EC18D  	MOVFF       T6963C_setPtr_addrH_L0, FARG_T6963C_writeData_mydata
0x014C	0xDF9E      	RCALL       _T6963C_writeData
;__Lib_T6963C.c,428 :: 		
0x014E	0xF18EC18C  	MOVFF       FARG_T6963C_setPtr_c, FARG_T6963C_writeCommand_mydata
0x0152	0xDFA5      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,429 :: 		
0x0154	0x0012      	RETURN      0
; end of _T6963C_setPtr
_T6963C_sprite:
;__Lib_T6963C.c,184 :: 		
;__Lib_T6963C.c,190 :: 		
0x0156	0x0101      	MOVLB       1
0x0158	0x6B88      	CLRF        T6963C_sprite_addr_L0, 1
0x015A	0x6B89      	CLRF        T6963C_sprite_addr_L0+1, 1
;__Lib_T6963C.c,192 :: 		
0x015C	0xF004C062  	MOVFF       _T6963C_fontWidth, R4
0x0160	0xF005C063  	MOVFF       _T6963C_fontWidth+1, R5
0x0164	0xF000C17D  	MOVFF       FARG_T6963C_sprite_px, R0
0x0168	0x0E00      	MOVLW       0
0x016A	0x6E01      	MOVWF       R1 
0x016C	0xDFA2      	RCALL       _Div_16x16_U
0x016E	0xF184C000  	MOVFF       R0, T6963C_sprite_cx_L0
0x0172	0xF185C001  	MOVFF       R1, T6963C_sprite_cx_L0+1
;__Lib_T6963C.c,193 :: 		
0x0176	0xF000C17E  	MOVFF       FARG_T6963C_sprite_py, R0
0x017A	0x0E00      	MOVLW       0
0x017C	0x6E01      	MOVWF       R1 
0x017E	0xF004C057  	MOVFF       _T6963C_txtCols, R4
0x0182	0xF005C058  	MOVFF       _T6963C_txtCols+1, R5
0x0186	0xDFB0      	RCALL       _Mul_16x16_U
0x0188	0x5184      	MOVF        T6963C_sprite_cx_L0, 0, 1
0x018A	0x2400      	ADDWF       R0, 0 
0x018C	0x6F88      	MOVWF       T6963C_sprite_addr_L0, 1
0x018E	0x5185      	MOVF        T6963C_sprite_cx_L0+1, 0, 1
0x0190	0x2001      	ADDWFC      R1, 0 
0x0192	0x6F89      	MOVWF       T6963C_sprite_addr_L0+1, 1
0x0194	0x5164      	MOVF        _T6963C_grHomeAddr, 0, 1
0x0196	0x2788      	ADDWF       T6963C_sprite_addr_L0, 1, 1
0x0198	0x5165      	MOVF        _T6963C_grHomeAddr+1, 0, 1
0x019A	0x2389      	ADDWFC      T6963C_sprite_addr_L0+1, 1, 1
;__Lib_T6963C.c,198 :: 		
0x019C	0x0E07      	MOVLW       7
0x019E	0x1582      	ANDWF       FARG_T6963C_sprite_sx, 0, 1
0x01A0	0x6E01      	MOVWF       R1 
0x01A2	0x5001      	MOVF        R1, 0 
0x01A4	0x0800      	SUBLW       0
0x01A6	0xE20D      	BC          L_T6963C_sprite6
;__Lib_T6963C.c,200 :: 		
0x01A8	0x3382      	RRCF        FARG_T6963C_sprite_sx, 1, 1
0x01AA	0x9F82      	BCF         FARG_T6963C_sprite_sx, 7, 1
0x01AC	0x3382      	RRCF        FARG_T6963C_sprite_sx, 1, 1
0x01AE	0x9F82      	BCF         FARG_T6963C_sprite_sx, 7, 1
0x01B0	0x3382      	RRCF        FARG_T6963C_sprite_sx, 1, 1
0x01B2	0x9F82      	BCF         FARG_T6963C_sprite_sx, 7, 1
;__Lib_T6963C.c,201 :: 		
0x01B4	0x2B82      	INCF        FARG_T6963C_sprite_sx, 1, 1
;__Lib_T6963C.c,202 :: 		
0x01B6	0x3782      	RLCF        FARG_T6963C_sprite_sx, 1, 1
0x01B8	0x9182      	BCF         FARG_T6963C_sprite_sx, 0, 1
0x01BA	0x3782      	RLCF        FARG_T6963C_sprite_sx, 1, 1
0x01BC	0x9182      	BCF         FARG_T6963C_sprite_sx, 0, 1
0x01BE	0x3782      	RLCF        FARG_T6963C_sprite_sx, 1, 1
0x01C0	0x9182      	BCF         FARG_T6963C_sprite_sx, 0, 1
;__Lib_T6963C.c,203 :: 		
L_T6963C_sprite6:
;__Lib_T6963C.c,208 :: 		
L_T6963C_sprite7:
0x01C2	0xF000C183  	MOVFF       FARG_T6963C_sprite_sy, R0
0x01C6	0x0783      	DECF        FARG_T6963C_sprite_sy, 1, 1
0x01C8	0x5200      	MOVF        R0, 1 
0x01CA	0xE040      	BZ          L_T6963C_sprite8
;__Lib_T6963C.c,210 :: 		
0x01CC	0xDF51      	RCALL       _T6963C_waitReady
;__Lib_T6963C.c,212 :: 		
0x01CE	0xF18AC188  	MOVFF       T6963C_sprite_addr_L0, FARG_T6963C_setPtr_p
0x01D2	0xF18BC189  	MOVFF       T6963C_sprite_addr_L0+1, FARG_T6963C_setPtr_p+1
0x01D6	0x0E24      	MOVLW       36
0x01D8	0x0101      	MOVLB       1
0x01DA	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x01DC	0xDFAD      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,214 :: 		
0x01DE	0x0EB0      	MOVLW       176
0x01E0	0x0101      	MOVLB       1
0x01E2	0x6F8E      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x01E4	0xDF5C      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,216 :: 		
0x01E6	0x9082      	BCF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,220 :: 		
0x01E8	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,225 :: 		
0x01EA	0x0101      	MOVLB       1
0x01EC	0x6B86      	CLRF        T6963C_sprite_i_L0, 1
0x01EE	0x6B87      	CLRF        T6963C_sprite_i_L0+1, 1
L_T6963C_sprite9:
0x01F0	0xF004C062  	MOVFF       _T6963C_fontWidth, R4
0x01F4	0xF005C063  	MOVFF       _T6963C_fontWidth+1, R5
0x01F8	0xF000C182  	MOVFF       FARG_T6963C_sprite_sx, R0
0x01FC	0x0E00      	MOVLW       0
0x01FE	0x6E01      	MOVWF       R1 
0x0200	0xDF58      	RCALL       _Div_16x16_U
0x0202	0x5001      	MOVF        R1, 0 
0x0204	0x5D87      	SUBWF       T6963C_sprite_i_L0+1, 0, 1
0x0206	0xE102      	BNZ         L__T6963C_sprite38
0x0208	0x5000      	MOVF        R0, 0 
0x020A	0x5D86      	SUBWF       T6963C_sprite_i_L0, 0, 1
L__T6963C_sprite38:
0x020C	0xE216      	BC          L_T6963C_sprite10
;__Lib_T6963C.c,227 :: 		
0x020E	0xFFF6C17F  	MOVFF       FARG_T6963C_sprite_pic, 4086
0x0212	0xFFF7C180  	MOVFF       FARG_T6963C_sprite_pic+1, TBLPTRH
0x0216	0xFFF8C181  	MOVFF       FARG_T6963C_sprite_pic+2, TBLPTRU
0x021A	0x0009      	TBLRD*+
0x021C	0xFF83CFF5  	MOVFF       TABLAT, T6963C_dataPort
0x0220	0x0E01      	MOVLW       1
0x0222	0x277F      	ADDWF       FARG_T6963C_sprite_pic, 1, 1
0x0224	0x0E00      	MOVLW       0
0x0226	0x2380      	ADDWFC      FARG_T6963C_sprite_pic+1, 1, 1
0x0228	0x2381      	ADDWFC      FARG_T6963C_sprite_pic+2, 1, 1
;__Lib_T6963C.c,228 :: 		
0x022A	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,229 :: 		
0x022C	0xDF1E      	RCALL       _Delay_1us
0x022E	0xDF1D      	RCALL       _Delay_1us
0x0230	0xDF1C      	RCALL       _Delay_1us
;__Lib_T6963C.c,230 :: 		
0x0232	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,225 :: 		
0x0234	0x4B86      	INFSNZ      T6963C_sprite_i_L0, 1, 1
0x0236	0x2B87      	INCF        T6963C_sprite_i_L0+1, 1, 1
;__Lib_T6963C.c,231 :: 		
0x0238	0xD7DB      	BRA         L_T6963C_sprite9
L_T6963C_sprite10:
;__Lib_T6963C.c,233 :: 		
0x023A	0x0EB2      	MOVLW       178
0x023C	0x6F8E      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x023E	0xDF2F      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,235 :: 		
0x0240	0x5057      	MOVF        _T6963C_txtCols, 0 
0x0242	0x0101      	MOVLB       1
0x0244	0x2788      	ADDWF       T6963C_sprite_addr_L0, 1, 1
0x0246	0x5058      	MOVF        _T6963C_txtCols+1, 0 
0x0248	0x2389      	ADDWFC      T6963C_sprite_addr_L0+1, 1, 1
;__Lib_T6963C.c,236 :: 		
0x024A	0xD7BB      	BRA         L_T6963C_sprite7
L_T6963C_sprite8:
;__Lib_T6963C.c,237 :: 		
0x024C	0x0012      	RETURN      0
; end of _T6963C_sprite
_getSprite:
;compy.c,85 :: 		const unsigned char* getSprite(char charactereValue) {
;compy.c,86 :: 		if (charactereValue == 0) {
0x024E	0x0101      	MOVLB       1
0x0250	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x0252	0x0A00      	XORLW       0
0x0254	0xE107      	BNZ         L_getSprite0
;compy.c,87 :: 		return pacman_up;
0x0256	0x0E81      	MOVLW       _pacman_up
0x0258	0x6E00      	MOVWF       R0 
0x025A	0x0E15      	MOVLW       hi_addr(_pacman_up)
0x025C	0x6E01      	MOVWF       R1 
0x025E	0x0E00      	MOVLW       higher_addr(_pacman_up)
0x0260	0x6E02      	MOVWF       R2 
0x0262	0x0012      	RETURN      0
;compy.c,88 :: 		} else if (charactereValue == 1) {
L_getSprite0:
0x0264	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x0266	0x0A01      	XORLW       1
0x0268	0xE107      	BNZ         L_getSprite2
;compy.c,89 :: 		return pacman_right;
0x026A	0x0E61      	MOVLW       _pacman_right
0x026C	0x6E00      	MOVWF       R0 
0x026E	0x0E15      	MOVLW       hi_addr(_pacman_right)
0x0270	0x6E01      	MOVWF       R1 
0x0272	0x0E00      	MOVLW       higher_addr(_pacman_right)
0x0274	0x6E02      	MOVWF       R2 
0x0276	0x0012      	RETURN      0
;compy.c,90 :: 		} else if (charactereValue == 2) {
L_getSprite2:
0x0278	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x027A	0x0A02      	XORLW       2
0x027C	0xE107      	BNZ         L_getSprite4
;compy.c,91 :: 		return pacman_down;
0x027E	0x0EC1      	MOVLW       _pacman_down
0x0280	0x6E00      	MOVWF       R0 
0x0282	0x0E15      	MOVLW       hi_addr(_pacman_down)
0x0284	0x6E01      	MOVWF       R1 
0x0286	0x0E00      	MOVLW       higher_addr(_pacman_down)
0x0288	0x6E02      	MOVWF       R2 
0x028A	0x0012      	RETURN      0
;compy.c,92 :: 		} else if (charactereValue == 3) {
L_getSprite4:
0x028C	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x028E	0x0A03      	XORLW       3
0x0290	0xE107      	BNZ         L_getSprite6
;compy.c,93 :: 		return pacman_left;
0x0292	0x0EA1      	MOVLW       _pacman_left
0x0294	0x6E00      	MOVWF       R0 
0x0296	0x0E15      	MOVLW       hi_addr(_pacman_left)
0x0298	0x6E01      	MOVWF       R1 
0x029A	0x0E00      	MOVLW       higher_addr(_pacman_left)
0x029C	0x6E02      	MOVWF       R2 
0x029E	0x0012      	RETURN      0
;compy.c,94 :: 		} else if (charactereValue == food_orientation) {
L_getSprite6:
0x02A0	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x02A2	0x1816      	XORWF       _food_orientation, 0 
0x02A4	0xE107      	BNZ         L_getSprite8
;compy.c,95 :: 		return food;
0x02A6	0x0E41      	MOVLW       _food
0x02A8	0x6E00      	MOVWF       R0 
0x02AA	0x0E15      	MOVLW       hi_addr(_food)
0x02AC	0x6E01      	MOVWF       R1 
0x02AE	0x0E00      	MOVLW       higher_addr(_food)
0x02B0	0x6E02      	MOVWF       R2 
0x02B2	0x0012      	RETURN      0
;compy.c,96 :: 		} else if (charactereValue == ghost_orientation) {
L_getSprite8:
0x02B4	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x02B6	0x1843      	XORWF       _ghost_orientation, 0 
0x02B8	0xE107      	BNZ         L_getSprite10
;compy.c,97 :: 		return ghost;
0x02BA	0x0EE1      	MOVLW       _ghost
0x02BC	0x6E00      	MOVWF       R0 
0x02BE	0x0E14      	MOVLW       hi_addr(_ghost)
0x02C0	0x6E01      	MOVWF       R1 
0x02C2	0x0E00      	MOVLW       higher_addr(_ghost)
0x02C4	0x6E02      	MOVWF       R2 
0x02C6	0x0012      	RETURN      0
;compy.c,98 :: 		} else if (charactereValue == barrier_orientation) {
L_getSprite10:
0x02C8	0x5178      	MOVF        FARG_getSprite_charactereValue, 0, 1
0x02CA	0x1817      	XORWF       _barrier_orientation, 0 
0x02CC	0xE107      	BNZ         L_getSprite12
;compy.c,99 :: 		return obstacle;
0x02CE	0x0E01      	MOVLW       _obstacle
0x02D0	0x6E00      	MOVWF       R0 
0x02D2	0x0E15      	MOVLW       hi_addr(_obstacle)
0x02D4	0x6E01      	MOVWF       R1 
0x02D6	0x0E00      	MOVLW       higher_addr(_obstacle)
0x02D8	0x6E02      	MOVWF       R2 
0x02DA	0x0012      	RETURN      0
;compy.c,100 :: 		}
L_getSprite12:
;compy.c,101 :: 		return blank;
0x02DC	0x0E21      	MOVLW       _blank
0x02DE	0x6E00      	MOVWF       R0 
0x02E0	0x0E15      	MOVLW       hi_addr(_blank)
0x02E2	0x6E01      	MOVWF       R1 
0x02E4	0x0E00      	MOVLW       higher_addr(_blank)
0x02E6	0x6E02      	MOVWF       R2 
;compy.c,102 :: 		}
0x02E8	0x0012      	RETURN      0
; end of _getSprite
_print:
;compy.c,56 :: 		void print(unsigned char column, unsigned char line, code const unsigned char* sprite) {
;compy.c,57 :: 		T6963C_graphics(1);
0x02EA	0x865B      	BSF         _T6963C_display, 3 
0x02EC	0xF18EC05B  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x02F0	0xDED6      	RCALL       _T6963C_writeCommand
;compy.c,58 :: 		T6963C_text(0);
0x02F2	0x945B      	BCF         _T6963C_display, 2 
0x02F4	0xF18EC05B  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x02F8	0xDED2      	RCALL       _T6963C_writeCommand
;compy.c,59 :: 		T6963C_sprite(column * 16, line * 16, sprite, 16, 16);
0x02FA	0xF17DC178  	MOVFF       FARG_print_column, FARG_T6963C_sprite_px
0x02FE	0x0101      	MOVLB       1
0x0300	0x377D      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x0302	0x917D      	BCF         FARG_T6963C_sprite_px, 0, 1
0x0304	0x377D      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x0306	0x917D      	BCF         FARG_T6963C_sprite_px, 0, 1
0x0308	0x377D      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x030A	0x917D      	BCF         FARG_T6963C_sprite_px, 0, 1
0x030C	0x377D      	RLCF        FARG_T6963C_sprite_px, 1, 1
0x030E	0x917D      	BCF         FARG_T6963C_sprite_px, 0, 1
0x0310	0xF17EC179  	MOVFF       FARG_print_line, FARG_T6963C_sprite_py
0x0314	0x377E      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x0316	0x917E      	BCF         FARG_T6963C_sprite_py, 0, 1
0x0318	0x377E      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x031A	0x917E      	BCF         FARG_T6963C_sprite_py, 0, 1
0x031C	0x377E      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x031E	0x917E      	BCF         FARG_T6963C_sprite_py, 0, 1
0x0320	0x377E      	RLCF        FARG_T6963C_sprite_py, 1, 1
0x0322	0x917E      	BCF         FARG_T6963C_sprite_py, 0, 1
0x0324	0xF17FC17A  	MOVFF       FARG_print_sprite, FARG_T6963C_sprite_pic
0x0328	0xF180C17B  	MOVFF       FARG_print_sprite+1, FARG_T6963C_sprite_pic+1
0x032C	0xF181C17C  	MOVFF       FARG_print_sprite+2, FARG_T6963C_sprite_pic+2
0x0330	0x0E10      	MOVLW       16
0x0332	0x6F82      	MOVWF       FARG_T6963C_sprite_sx, 1
0x0334	0x0E10      	MOVLW       16
0x0336	0x6F83      	MOVWF       FARG_T6963C_sprite_sy, 1
0x0338	0xDF0E      	RCALL       _T6963C_sprite
;compy.c,60 :: 		}
0x033A	0x0012      	RETURN      0
; end of _print
_printCoordinate:
;compy.c,104 :: 		void printCoordinate(int x, int y) {
;compy.c,105 :: 		print(x, y, getSprite(world[x][y]));
0x033C	0xF000C173  	MOVFF       FARG_printCoordinate_x, R0
0x0340	0xF001C174  	MOVFF       FARG_printCoordinate_x+1, R1
0x0344	0x0E1E      	MOVLW       30
0x0346	0x6E04      	MOVWF       R4 
0x0348	0x0E00      	MOVLW       0
0x034A	0x6E05      	MOVWF       R5 
0x034C	0xDECD      	RCALL       _Mul_16x16_U
0x034E	0x0E74      	MOVLW       _world
0x0350	0x2400      	ADDWF       R0, 0 
0x0352	0x6E03      	MOVWF       R3 
0x0354	0x0E00      	MOVLW       hi_addr(_world)
0x0356	0x2001      	ADDWFC      R1, 0 
0x0358	0x6E04      	MOVWF       R4 
0x035A	0xF000C175  	MOVFF       FARG_printCoordinate_y, R0
0x035E	0xF001C176  	MOVFF       FARG_printCoordinate_y+1, R1
0x0362	0x3600      	RLCF        R0, 1 
0x0364	0x9000      	BCF         R0, 0 
0x0366	0x3601      	RLCF        R1, 1 
0x0368	0x5000      	MOVF        R0, 0 
0x036A	0x2403      	ADDWF       R3, 0 
0x036C	0x6EE9      	MOVWF       FSR0L 
0x036E	0x5001      	MOVF        R1, 0 
0x0370	0x2004      	ADDWFC      R4, 0 
0x0372	0x6EEA      	MOVWF       FSR0H 
0x0374	0xF178CFEE  	MOVFF       POSTINC0, FARG_getSprite_charactereValue
0x0378	0xDF6A      	RCALL       _getSprite
0x037A	0xF17AC000  	MOVFF       R0, FARG_print_sprite
0x037E	0xF17BC001  	MOVFF       R1, FARG_print_sprite+1
0x0382	0xF17CC002  	MOVFF       R2, FARG_print_sprite+2
0x0386	0xF178C173  	MOVFF       FARG_printCoordinate_x, FARG_print_column
0x038A	0xF179C175  	MOVFF       FARG_printCoordinate_y, FARG_print_line
0x038E	0xDFAD      	RCALL       _print
;compy.c,106 :: 		}
0x0390	0x0012      	RETURN      0
; end of _printCoordinate
_Mul_32x32_U:
;__Lib_Math.c,1613 :: 		
;__Lib_Math.c,1628 :: 		
0x0392	0x0E22      	MOVLW       34
;__Lib_Math.c,1629 :: 		
0x0394	0x6E0C      	MOVWF       R12, 0
;__Lib_Math.c,1630 :: 		
0x0396	0x6A08      	CLRF        R8, 0
;__Lib_Math.c,1631 :: 		
0x0398	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,1632 :: 		
0x039A	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,1633 :: 		
0x039C	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,1635 :: 		
_NEXT:
;__Lib_Math.c,1639 :: 		
0x039E	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1640 :: 		
0x03A0	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1641 :: 		
0x03A2	0xD01F      	BRA         _EXIT2
;__Lib_Math.c,1642 :: 		
0x03A4	0x90D8      	BCF         STATUS, 0, 0
;__Lib_Math.c,1644 :: 		
_LOOP:
;__Lib_Math.c,1653 :: 		
0x03A6	0x320B      	RRCF        R11, 1, 0
;__Lib_Math.c,1654 :: 		
0x03A8	0x320A      	RRCF        R10, 1, 0
;__Lib_Math.c,1655 :: 		
0x03AA	0x3209      	RRCF        R9, 1, 0
;__Lib_Math.c,1656 :: 		
0x03AC	0x3208      	RRCF        R8, 1, 0
;__Lib_Math.c,1657 :: 		
0x03AE	0x3203      	RRCF        R3, 1, 0
;__Lib_Math.c,1658 :: 		
0x03B0	0x3202      	RRCF        R2, 1, 0
;__Lib_Math.c,1659 :: 		
0x03B2	0x3201      	RRCF        R1, 1, 0
;__Lib_Math.c,1660 :: 		
0x03B4	0x3200      	RRCF        R0, 1, 0
;__Lib_Math.c,1665 :: 		
0x03B6	0xA0D8      	BTFSS       STATUS, 0, 0
;__Lib_Math.c,1666 :: 		
0x03B8	0xD7F2      	BRA         _NEXT
;__Lib_Math.c,1667 :: 		
0x03BA	0x060C      	DECF        R12, 1, 0
;__Lib_Math.c,1668 :: 		
0x03BC	0xB4D8      	BTFSC       STATUS, 2, 0
;__Lib_Math.c,1669 :: 		
0x03BE	0xD009      	BRA         _EXIT1
;__Lib_Math.c,1676 :: 		
0x03C0	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1677 :: 		
0x03C2	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1678 :: 		
0x03C4	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1681 :: 		
0x03C6	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1682 :: 		
0x03C8	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1685 :: 		
0x03CA	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1686 :: 		
0x03CC	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1689 :: 		
0x03CE	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1691 :: 		
0x03D0	0xD7EA      	BRA         _LOOP
;__Lib_Math.c,1693 :: 		
_EXIT1:
;__Lib_Math.c,1698 :: 		
0x03D2	0x5004      	MOVF        R4, 0, 0
;__Lib_Math.c,1699 :: 		
0x03D4	0x2608      	ADDWF       R8, 1, 0
;__Lib_Math.c,1700 :: 		
0x03D6	0x5005      	MOVF        R5, 0, 0
;__Lib_Math.c,1703 :: 		
0x03D8	0x2209      	ADDWFC      R9, 1, 0
;__Lib_Math.c,1704 :: 		
0x03DA	0x5006      	MOVF        R6, 0, 0
;__Lib_Math.c,1707 :: 		
0x03DC	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,1708 :: 		
0x03DE	0x5007      	MOVF        R7, 0, 0
;__Lib_Math.c,1711 :: 		
0x03E0	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,1714 :: 		
_EXIT2:
;__Lib_Math.c,1716 :: 		
0x03E2	0x0012      	RETURN      0
; end of _Mul_32x32_U
_T6963C_write_text:
;__Lib_T6963C.c,275 :: 		
;__Lib_T6963C.c,279 :: 		
0x03E4	0xF18EC177  	MOVFF       FARG_T6963C_write_text_mode, FARG_T6963C_writeCommand_mydata
0x03E8	0xDE5A      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,281 :: 		
0x03EA	0xF000C176  	MOVFF       FARG_T6963C_write_text_y, R0
0x03EE	0x0E00      	MOVLW       0
0x03F0	0x6E01      	MOVWF       R1 
0x03F2	0xF004C057  	MOVFF       _T6963C_txtCols, R4
0x03F6	0xF005C058  	MOVFF       _T6963C_txtCols+1, R5
0x03FA	0xDE76      	RCALL       _Mul_16x16_U
0x03FC	0x0101      	MOVLB       1
0x03FE	0x5175      	MOVF        FARG_T6963C_write_text_x, 0, 1
0x0400	0x2400      	ADDWF       R0, 0 
0x0402	0x6F8A      	MOVWF       FARG_T6963C_setPtr_p, 1
0x0404	0x0E00      	MOVLW       0
0x0406	0x2001      	ADDWFC      R1, 0 
0x0408	0x6F8B      	MOVWF       FARG_T6963C_setPtr_p+1, 1
0x040A	0x5059      	MOVF        _T6963C_textHomeAddr, 0 
0x040C	0x278A      	ADDWF       FARG_T6963C_setPtr_p, 1, 1
0x040E	0x505A      	MOVF        _T6963C_textHomeAddr+1, 0 
0x0410	0x238B      	ADDWFC      FARG_T6963C_setPtr_p+1, 1, 1
;__Lib_T6963C.c,283 :: 		
0x0412	0x0E24      	MOVLW       36
0x0414	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x0416	0xDE90      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,285 :: 		
L_T6963C_write_text12:
0x0418	0xFFE9C173  	MOVFF       FARG_T6963C_write_text_str, FSR0L
0x041C	0xFFEAC174  	MOVFF       FARG_T6963C_write_text_str+1, FSR0H
0x0420	0x52EE      	MOVF        POSTINC0, 1 
0x0422	0xE00F      	BZ          L_T6963C_write_text13
;__Lib_T6963C.c,287 :: 		
0x0424	0xFFE9C173  	MOVFF       FARG_T6963C_write_text_str, FSR0L
0x0428	0xFFEAC174  	MOVFF       FARG_T6963C_write_text_str+1, FSR0H
0x042C	0x0E20      	MOVLW       32
0x042E	0x5CEE      	SUBWF       POSTINC0, 0 
0x0430	0x0101      	MOVLB       1
0x0432	0x6F8E      	MOVWF       FARG_T6963C_writeData_mydata, 1
0x0434	0xDE2A      	RCALL       _T6963C_writeData
0x0436	0x4B73      	INFSNZ      FARG_T6963C_write_text_str, 1, 1
0x0438	0x2B74      	INCF        FARG_T6963C_write_text_str+1, 1, 1
;__Lib_T6963C.c,288 :: 		
0x043A	0x0EC0      	MOVLW       192
0x043C	0x6F8E      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x043E	0xDE2F      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,289 :: 		
0x0440	0xD7EB      	BRA         L_T6963C_write_text12
L_T6963C_write_text13:
;__Lib_T6963C.c,290 :: 		
0x0442	0x0012      	RETURN      0
; end of _T6963C_write_text
_print_text:
;compy.c,62 :: 		void print_text(unsigned char column, unsigned char line, unsigned char* text) {
;compy.c,63 :: 		T6963C_graphics(0);
0x0444	0x965B      	BCF         _T6963C_display, 3 
0x0446	0xF18EC05B  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x044A	0xDE29      	RCALL       _T6963C_writeCommand
;compy.c,64 :: 		T6963C_text(1);
0x044C	0x845B      	BSF         _T6963C_display, 2 
0x044E	0xF18EC05B  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x0452	0xDE25      	RCALL       _T6963C_writeCommand
;compy.c,65 :: 		T6963C_write_text(text, line - 1, column - 1, T6963C_ROM_MODE_XOR);
0x0454	0xF173C16E  	MOVFF       FARG_print_text_text, FARG_T6963C_write_text_str
0x0458	0xF174C16F  	MOVFF       FARG_print_text_text+1, FARG_T6963C_write_text_str+1
0x045C	0x0101      	MOVLB       1
0x045E	0x056D      	DECF        FARG_print_text_line, 0, 1
0x0460	0x6F75      	MOVWF       FARG_T6963C_write_text_x, 1
0x0462	0x056C      	DECF        FARG_print_text_column, 0, 1
0x0464	0x6F76      	MOVWF       FARG_T6963C_write_text_y, 1
0x0466	0x0E81      	MOVLW       129
0x0468	0x6F77      	MOVWF       FARG_T6963C_write_text_mode, 1
0x046A	0xDFBC      	RCALL       _T6963C_write_text
;compy.c,66 :: 		}
0x046C	0x0012      	RETURN      0
; end of _print_text
_update_pacman_orientation:
;compy.c,352 :: 		char update_pacman_orientation(int newX, int newY) {
;compy.c,353 :: 		if (newX > pacman_x) {
0x046E	0x0E80      	MOVLW       128
0x0470	0x1824      	XORWF       _pacman_x+1, 0 
0x0472	0x6E00      	MOVWF       R0 
0x0474	0x0E80      	MOVLW       128
0x0476	0x0101      	MOVLB       1
0x0478	0x196D      	XORWF       FARG_update_pacman_orientation_newX+1, 0, 1
0x047A	0x5C00      	SUBWF       R0, 0 
0x047C	0xE102      	BNZ         L__update_pacman_orientation154
0x047E	0x516C      	MOVF        FARG_update_pacman_orientation_newX, 0, 1
0x0480	0x5C23      	SUBWF       _pacman_x, 0 
L__update_pacman_orientation154:
0x0482	0xE203      	BC          L_update_pacman_orientation92
;compy.c,354 :: 		return (char) 1;
0x0484	0x0E01      	MOVLW       1
0x0486	0x6E00      	MOVWF       R0 
0x0488	0x0012      	RETURN      0
;compy.c,355 :: 		} else if (newX < pacman_x) {
L_update_pacman_orientation92:
0x048A	0x0E80      	MOVLW       128
0x048C	0x196D      	XORWF       FARG_update_pacman_orientation_newX+1, 0, 1
0x048E	0x6E00      	MOVWF       R0 
0x0490	0x0E80      	MOVLW       128
0x0492	0x1824      	XORWF       _pacman_x+1, 0 
0x0494	0x5C00      	SUBWF       R0, 0 
0x0496	0xE102      	BNZ         L__update_pacman_orientation155
0x0498	0x5023      	MOVF        _pacman_x, 0 
0x049A	0x5D6C      	SUBWF       FARG_update_pacman_orientation_newX, 0, 1
L__update_pacman_orientation155:
0x049C	0xE203      	BC          L_update_pacman_orientation94
;compy.c,356 :: 		return (char) 3;
0x049E	0x0E03      	MOVLW       3
0x04A0	0x6E00      	MOVWF       R0 
0x04A2	0x0012      	RETURN      0
;compy.c,357 :: 		} else if (newY > pacman_y) {
L_update_pacman_orientation94:
0x04A4	0x0E80      	MOVLW       128
0x04A6	0x1820      	XORWF       _pacman_y+1, 0 
0x04A8	0x6E00      	MOVWF       R0 
0x04AA	0x0E80      	MOVLW       128
0x04AC	0x196F      	XORWF       FARG_update_pacman_orientation_newY+1, 0, 1
0x04AE	0x5C00      	SUBWF       R0, 0 
0x04B0	0xE102      	BNZ         L__update_pacman_orientation156
0x04B2	0x516E      	MOVF        FARG_update_pacman_orientation_newY, 0, 1
0x04B4	0x5C1F      	SUBWF       _pacman_y, 0 
L__update_pacman_orientation156:
0x04B6	0xE203      	BC          L_update_pacman_orientation96
;compy.c,358 :: 		return (char) 2;
0x04B8	0x0E02      	MOVLW       2
0x04BA	0x6E00      	MOVWF       R0 
0x04BC	0x0012      	RETURN      0
;compy.c,359 :: 		} else if (newY < pacman_y) {
L_update_pacman_orientation96:
0x04BE	0x0E80      	MOVLW       128
0x04C0	0x196F      	XORWF       FARG_update_pacman_orientation_newY+1, 0, 1
0x04C2	0x6E00      	MOVWF       R0 
0x04C4	0x0E80      	MOVLW       128
0x04C6	0x1820      	XORWF       _pacman_y+1, 0 
0x04C8	0x5C00      	SUBWF       R0, 0 
0x04CA	0xE102      	BNZ         L__update_pacman_orientation157
0x04CC	0x501F      	MOVF        _pacman_y, 0 
0x04CE	0x5D6E      	SUBWF       FARG_update_pacman_orientation_newY, 0, 1
L__update_pacman_orientation157:
0x04D0	0xE202      	BC          L_update_pacman_orientation98
;compy.c,360 :: 		return 0;
0x04D2	0x6A00      	CLRF        R0 
0x04D4	0x0012      	RETURN      0
;compy.c,361 :: 		}
L_update_pacman_orientation98:
;compy.c,362 :: 		return pacman_orientation;
0x04D6	0xF000C01E  	MOVFF       _pacman_orientation, R0
;compy.c,363 :: 		}
0x04DA	0x0012      	RETURN      0
; end of _update_pacman_orientation
_UART1_Write:
;__Lib_UART_c67.c,59 :: 		
;__Lib_UART_c67.c,60 :: 		
L_UART1_Write3:
0x04DC	0xB2AC      	BTFSC       TXSTA, 1 
0x04DE	0xD002      	BRA         L_UART1_Write4
;__Lib_UART_c67.c,61 :: 		
0x04E0	0x0000      	NOP
0x04E2	0xD7FC      	BRA         L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c67.c,62 :: 		
0x04E4	0xFFADC16C  	MOVFF       FARG_UART1_Write_data_, TXREG
;__Lib_UART_c67.c,63 :: 		
0x04E8	0x0012      	RETURN      0
; end of _UART1_Write
_Delay_100ms:
;__Lib_Delays.c,39 :: 		void Delay_100ms() {
;__Lib_Delays.c,40 :: 		Delay_ms(100);
0x04EA	0x0E02      	MOVLW       2
0x04EC	0x6E0B      	MOVWF       R11, 0
0x04EE	0x0E04      	MOVLW       4
0x04F0	0x6E0C      	MOVWF       R12, 0
0x04F2	0x0EBA      	MOVLW       186
0x04F4	0x6E0D      	MOVWF       R13, 0
L_Delay_100ms7:
0x04F6	0x2E0D      	DECFSZ      R13, 1, 0
0x04F8	0xD7FE      	BRA         L_Delay_100ms7
0x04FA	0x2E0C      	DECFSZ      R12, 1, 0
0x04FC	0xD7FC      	BRA         L_Delay_100ms7
0x04FE	0x2E0B      	DECFSZ      R11, 1, 0
0x0500	0xD7FA      	BRA         L_Delay_100ms7
0x0502	0x0000      	NOP
;__Lib_Delays.c,41 :: 		}
0x0504	0x0012      	RETURN      0
; end of _Delay_100ms
_Print_World:
;compy.c,307 :: 		void Print_World() {
;compy.c,308 :: 		for(i = 0; i < 15; ++i) {
0x0506	0x6A4F      	CLRF        _i 
0x0508	0x6A50      	CLRF        _i+1 
L_Print_World78:
0x050A	0x0E80      	MOVLW       128
0x050C	0x1850      	XORWF       _i+1, 0 
0x050E	0x6E00      	MOVWF       R0 
0x0510	0x0E80      	MOVLW       128
0x0512	0x5C00      	SUBWF       R0, 0 
0x0514	0xE102      	BNZ         L__Print_World148
0x0516	0x0E0F      	MOVLW       15
0x0518	0x5C4F      	SUBWF       _i, 0 
L__Print_World148:
0x051A	0xE21A      	BC          L_Print_World79
;compy.c,309 :: 		for(j = 0; j < 8; ++j)
0x051C	0x6A4D      	CLRF        _j 
0x051E	0x6A4E      	CLRF        _j+1 
L_Print_World81:
0x0520	0x0E80      	MOVLW       128
0x0522	0x184E      	XORWF       _j+1, 0 
0x0524	0x6E00      	MOVWF       R0 
0x0526	0x0E80      	MOVLW       128
0x0528	0x5C00      	SUBWF       R0, 0 
0x052A	0xE102      	BNZ         L__Print_World149
0x052C	0x0E08      	MOVLW       8
0x052E	0x5C4D      	SUBWF       _j, 0 
L__Print_World149:
0x0530	0xE20C      	BC          L_Print_World82
;compy.c,311 :: 		printCoordinate(i, j);
0x0532	0xF173C04F  	MOVFF       _i, FARG_printCoordinate_x
0x0536	0xF174C050  	MOVFF       _i+1, FARG_printCoordinate_x+1
0x053A	0xF175C04D  	MOVFF       _j, FARG_printCoordinate_y
0x053E	0xF176C04E  	MOVFF       _j+1, FARG_printCoordinate_y+1
0x0542	0xDEFC      	RCALL       _printCoordinate
;compy.c,309 :: 		for(j = 0; j < 8; ++j)
0x0544	0x4A4D      	INFSNZ      _j, 1 
0x0546	0x2A4E      	INCF        _j+1, 1 
;compy.c,312 :: 		}
0x0548	0xD7EB      	BRA         L_Print_World81
L_Print_World82:
;compy.c,308 :: 		for(i = 0; i < 15; ++i) {
0x054A	0x4A4F      	INFSNZ      _i, 1 
0x054C	0x2A50      	INCF        _i+1, 1 
;compy.c,313 :: 		}
0x054E	0xD7DD      	BRA         L_Print_World78
L_Print_World79:
;compy.c,314 :: 		}
0x0550	0x0012      	RETURN      0
; end of _Print_World
_myrand:
;compy.c,284 :: 		int myrand(unsigned seed) {
;compy.c,285 :: 		next = seed;
0x0552	0xF053C16C  	MOVFF       FARG_myrand_seed, _next
0x0556	0xF054C16D  	MOVFF       FARG_myrand_seed+1, _next+1
0x055A	0x0E00      	MOVLW       0
0x055C	0x6E55      	MOVWF       _next+2 
0x055E	0x6E56      	MOVWF       _next+3 
;compy.c,286 :: 		next = next * 1103515245 + 12345;
0x0560	0xF000C053  	MOVFF       _next, R0
0x0564	0xF001C054  	MOVFF       _next+1, R1
0x0568	0xF002C055  	MOVFF       _next+2, R2
0x056C	0xF003C056  	MOVFF       _next+3, R3
0x0570	0x0E6D      	MOVLW       109
0x0572	0x6E04      	MOVWF       R4 
0x0574	0x0E4E      	MOVLW       78
0x0576	0x6E05      	MOVWF       R5 
0x0578	0x0EC6      	MOVLW       198
0x057A	0x6E06      	MOVWF       R6 
0x057C	0x0E41      	MOVLW       65
0x057E	0x6E07      	MOVWF       R7 
0x0580	0xDF08      	RCALL       _Mul_32x32_U
0x0582	0x0E39      	MOVLW       57
0x0584	0x2400      	ADDWF       R0, 0 
0x0586	0x6E05      	MOVWF       R5 
0x0588	0x0E30      	MOVLW       48
0x058A	0x2001      	ADDWFC      R1, 0 
0x058C	0x6E06      	MOVWF       R6 
0x058E	0x0E00      	MOVLW       0
0x0590	0x2002      	ADDWFC      R2, 0 
0x0592	0x6E07      	MOVWF       R7 
0x0594	0x0E00      	MOVLW       0
0x0596	0x2003      	ADDWFC      R3, 0 
0x0598	0x6E08      	MOVWF       R8 
0x059A	0xF053C005  	MOVFF       R5, _next
0x059E	0xF054C006  	MOVFF       R6, _next+1
0x05A2	0xF055C007  	MOVFF       R7, _next+2
0x05A6	0xF056C008  	MOVFF       R8, _next+3
;compy.c,287 :: 		return((unsigned)(next/65536) % 32768);
0x05AA	0xF000C007  	MOVFF       R7, R0
0x05AE	0xF001C008  	MOVFF       R8, R1
0x05B2	0x6A02      	CLRF        R2 
0x05B4	0x6A03      	CLRF        R3 
0x05B6	0x0EFF      	MOVLW       255
0x05B8	0x1600      	ANDWF       R0, 1 
0x05BA	0x0E7F      	MOVLW       127
0x05BC	0x1601      	ANDWF       R1, 1 
;compy.c,288 :: 		}
0x05BE	0x0012      	RETURN      0
; end of _myrand
_T6963C_fill:
;__Lib_T6963C.c,113 :: 		
;__Lib_T6963C.c,117 :: 		
0x05C0	0x0101      	MOVLB       1
0x05C2	0x6B71      	CLRF        T6963C_fill_addr_L0, 1
0x05C4	0x6B72      	CLRF        T6963C_fill_addr_L0+1, 1
;__Lib_T6963C.c,119 :: 		
0x05C6	0xDD54      	RCALL       _T6963C_waitReady
;__Lib_T6963C.c,121 :: 		
0x05C8	0x0101      	MOVLB       1
0x05CA	0x516D      	MOVF        FARG_T6963C_fill_start, 0, 1
0x05CC	0x2564      	ADDWF       _T6963C_grHomeAddr, 0, 1
0x05CE	0x6F8A      	MOVWF       FARG_T6963C_setPtr_p, 1
0x05D0	0x516E      	MOVF        FARG_T6963C_fill_start+1, 0, 1
0x05D2	0x2165      	ADDWFC      _T6963C_grHomeAddr+1, 0, 1
0x05D4	0x6F8B      	MOVWF       FARG_T6963C_setPtr_p+1, 1
0x05D6	0x0E24      	MOVLW       36
0x05D8	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x05DA	0xDDAE      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,123 :: 		
0x05DC	0x0EB0      	MOVLW       176
0x05DE	0x0101      	MOVLB       1
0x05E0	0x6F8E      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x05E2	0xDD5D      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,125 :: 		
0x05E4	0x9082      	BCF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,129 :: 		
0x05E6	0x6A95      	CLRF        T6963C_dataPort+18 
;__Lib_T6963C.c,130 :: 		
L_T6963C_fill2:
0x05E8	0x0101      	MOVLB       1
0x05EA	0x5170      	MOVF        FARG_T6963C_fill_len+1, 0, 1
0x05EC	0x5D72      	SUBWF       T6963C_fill_addr_L0+1, 0, 1
0x05EE	0xE102      	BNZ         L__T6963C_fill36
0x05F0	0x516F      	MOVF        FARG_T6963C_fill_len, 0, 1
0x05F2	0x5D71      	SUBWF       T6963C_fill_addr_L0, 0, 1
L__T6963C_fill36:
0x05F4	0xE20A      	BC          L_T6963C_fill3
;__Lib_T6963C.c,132 :: 		
0x05F6	0xFF83C16C  	MOVFF       FARG_T6963C_fill_v, T6963C_dataPort
;__Lib_T6963C.c,133 :: 		
0x05FA	0x9482      	BCF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,134 :: 		
0x05FC	0xDD36      	RCALL       _Delay_1us
0x05FE	0xDD35      	RCALL       _Delay_1us
0x0600	0xDD34      	RCALL       _Delay_1us
;__Lib_T6963C.c,135 :: 		
0x0602	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,136 :: 		
0x0604	0x4B71      	INFSNZ      T6963C_fill_addr_L0, 1, 1
0x0606	0x2B72      	INCF        T6963C_fill_addr_L0+1, 1, 1
;__Lib_T6963C.c,137 :: 		
0x0608	0xD7EF      	BRA         L_T6963C_fill2
L_T6963C_fill3:
;__Lib_T6963C.c,139 :: 		
0x060A	0x0EB2      	MOVLW       178
0x060C	0x6F8E      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x060E	0xDD47      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,140 :: 		
0x0610	0x0012      	RETURN      0
; end of _T6963C_fill
_Le_Teclado:
;compy.c,194 :: 		char Le_Teclado()
;compy.c,196 :: 		PORTD = 0B00010000; // VOCÃŠ SELECIONOU LA
0x0612	0x0E10      	MOVLW       16
0x0614	0x6E83      	MOVWF       PORTD 
;compy.c,197 :: 		if (PORTA.RA5 == 1) {
0x0616	0xAA80      	BTFSS       PORTA, 5 
0x0618	0xD006      	BRA         L_Le_Teclado29
;compy.c,198 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado30:
0x061A	0xAA80      	BTFSS       PORTA, 5 
0x061C	0xD001      	BRA         L_Le_Teclado31
0x061E	0xD7FD      	BRA         L_Le_Teclado30
L_Le_Teclado31:
;compy.c,199 :: 		return '7';
0x0620	0x0E37      	MOVLW       55
0x0622	0x6E00      	MOVWF       R0 
0x0624	0x0012      	RETURN      0
;compy.c,200 :: 		}
L_Le_Teclado29:
;compy.c,201 :: 		if (PORTB.RB1 == 1) {
0x0626	0xA281      	BTFSS       PORTB, 1 
0x0628	0xD006      	BRA         L_Le_Teclado32
;compy.c,202 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado33:
0x062A	0xA281      	BTFSS       PORTB, 1 
0x062C	0xD001      	BRA         L_Le_Teclado34
0x062E	0xD7FD      	BRA         L_Le_Teclado33
L_Le_Teclado34:
;compy.c,203 :: 		return '8';
0x0630	0x0E38      	MOVLW       56
0x0632	0x6E00      	MOVWF       R0 
0x0634	0x0012      	RETURN      0
;compy.c,204 :: 		}
L_Le_Teclado32:
;compy.c,205 :: 		if (PORTB.RB2 == 1) {
0x0636	0xA481      	BTFSS       PORTB, 2 
0x0638	0xD006      	BRA         L_Le_Teclado35
;compy.c,206 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado36:
0x063A	0xA481      	BTFSS       PORTB, 2 
0x063C	0xD001      	BRA         L_Le_Teclado37
0x063E	0xD7FD      	BRA         L_Le_Teclado36
L_Le_Teclado37:
;compy.c,207 :: 		return '9';
0x0640	0x0E39      	MOVLW       57
0x0642	0x6E00      	MOVWF       R0 
0x0644	0x0012      	RETURN      0
;compy.c,208 :: 		}
L_Le_Teclado35:
;compy.c,209 :: 		if (PORTB.RB3 == 1) {
0x0646	0xA681      	BTFSS       PORTB, 3 
0x0648	0xD006      	BRA         L_Le_Teclado38
;compy.c,210 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado39:
0x064A	0xA681      	BTFSS       PORTB, 3 
0x064C	0xD001      	BRA         L_Le_Teclado40
0x064E	0xD7FD      	BRA         L_Le_Teclado39
L_Le_Teclado40:
;compy.c,211 :: 		return '%';
0x0650	0x0E25      	MOVLW       37
0x0652	0x6E00      	MOVWF       R0 
0x0654	0x0012      	RETURN      0
;compy.c,212 :: 		}
L_Le_Teclado38:
;compy.c,214 :: 		PORTD = 0B00100000; // VOCÃŠ SELECIONOU LB
0x0656	0x0E20      	MOVLW       32
0x0658	0x6E83      	MOVWF       PORTD 
;compy.c,215 :: 		if (PORTA.RA5 == 1) {
0x065A	0xAA80      	BTFSS       PORTA, 5 
0x065C	0xD006      	BRA         L_Le_Teclado41
;compy.c,216 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado42:
0x065E	0xAA80      	BTFSS       PORTA, 5 
0x0660	0xD001      	BRA         L_Le_Teclado43
0x0662	0xD7FD      	BRA         L_Le_Teclado42
L_Le_Teclado43:
;compy.c,217 :: 		return '4';
0x0664	0x0E34      	MOVLW       52
0x0666	0x6E00      	MOVWF       R0 
0x0668	0x0012      	RETURN      0
;compy.c,218 :: 		}
L_Le_Teclado41:
;compy.c,219 :: 		if (PORTB.RB1 == 1) {
0x066A	0xA281      	BTFSS       PORTB, 1 
0x066C	0xD006      	BRA         L_Le_Teclado44
;compy.c,220 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado45:
0x066E	0xA281      	BTFSS       PORTB, 1 
0x0670	0xD001      	BRA         L_Le_Teclado46
0x0672	0xD7FD      	BRA         L_Le_Teclado45
L_Le_Teclado46:
;compy.c,221 :: 		return '5';
0x0674	0x0E35      	MOVLW       53
0x0676	0x6E00      	MOVWF       R0 
0x0678	0x0012      	RETURN      0
;compy.c,222 :: 		}
L_Le_Teclado44:
;compy.c,223 :: 		if (PORTB.RB2 == 1) {
0x067A	0xA481      	BTFSS       PORTB, 2 
0x067C	0xD006      	BRA         L_Le_Teclado47
;compy.c,224 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado48:
0x067E	0xA481      	BTFSS       PORTB, 2 
0x0680	0xD001      	BRA         L_Le_Teclado49
0x0682	0xD7FD      	BRA         L_Le_Teclado48
L_Le_Teclado49:
;compy.c,225 :: 		return '6';
0x0684	0x0E36      	MOVLW       54
0x0686	0x6E00      	MOVWF       R0 
0x0688	0x0012      	RETURN      0
;compy.c,226 :: 		}
L_Le_Teclado47:
;compy.c,227 :: 		if (PORTB.RB3 == 1) {
0x068A	0xA681      	BTFSS       PORTB, 3 
0x068C	0xD006      	BRA         L_Le_Teclado50
;compy.c,228 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado51:
0x068E	0xA681      	BTFSS       PORTB, 3 
0x0690	0xD001      	BRA         L_Le_Teclado52
0x0692	0xD7FD      	BRA         L_Le_Teclado51
L_Le_Teclado52:
;compy.c,229 :: 		return '*';
0x0694	0x0E2A      	MOVLW       42
0x0696	0x6E00      	MOVWF       R0 
0x0698	0x0012      	RETURN      0
;compy.c,230 :: 		}
L_Le_Teclado50:
;compy.c,232 :: 		PORTD = 0B01000000; // VOCÃŠ SELECIONOU LC
0x069A	0x0E40      	MOVLW       64
0x069C	0x6E83      	MOVWF       PORTD 
;compy.c,233 :: 		if (PORTA.RA5 == 1) {
0x069E	0xAA80      	BTFSS       PORTA, 5 
0x06A0	0xD006      	BRA         L_Le_Teclado53
;compy.c,234 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado54:
0x06A2	0xAA80      	BTFSS       PORTA, 5 
0x06A4	0xD001      	BRA         L_Le_Teclado55
0x06A6	0xD7FD      	BRA         L_Le_Teclado54
L_Le_Teclado55:
;compy.c,235 :: 		return '1';
0x06A8	0x0E31      	MOVLW       49
0x06AA	0x6E00      	MOVWF       R0 
0x06AC	0x0012      	RETURN      0
;compy.c,236 :: 		}
L_Le_Teclado53:
;compy.c,237 :: 		if (PORTB.RB1 == 1) {
0x06AE	0xA281      	BTFSS       PORTB, 1 
0x06B0	0xD006      	BRA         L_Le_Teclado56
;compy.c,238 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado57:
0x06B2	0xA281      	BTFSS       PORTB, 1 
0x06B4	0xD001      	BRA         L_Le_Teclado58
0x06B6	0xD7FD      	BRA         L_Le_Teclado57
L_Le_Teclado58:
;compy.c,239 :: 		return '2';
0x06B8	0x0E32      	MOVLW       50
0x06BA	0x6E00      	MOVWF       R0 
0x06BC	0x0012      	RETURN      0
;compy.c,240 :: 		}
L_Le_Teclado56:
;compy.c,241 :: 		if (PORTB.RB2 == 1) {
0x06BE	0xA481      	BTFSS       PORTB, 2 
0x06C0	0xD006      	BRA         L_Le_Teclado59
;compy.c,242 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado60:
0x06C2	0xA481      	BTFSS       PORTB, 2 
0x06C4	0xD001      	BRA         L_Le_Teclado61
0x06C6	0xD7FD      	BRA         L_Le_Teclado60
L_Le_Teclado61:
;compy.c,243 :: 		return '3';
0x06C8	0x0E33      	MOVLW       51
0x06CA	0x6E00      	MOVWF       R0 
0x06CC	0x0012      	RETURN      0
;compy.c,244 :: 		}
L_Le_Teclado59:
;compy.c,245 :: 		if (PORTB.RB3 == 1) {
0x06CE	0xA681      	BTFSS       PORTB, 3 
0x06D0	0xD006      	BRA         L_Le_Teclado62
;compy.c,246 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado63:
0x06D2	0xA681      	BTFSS       PORTB, 3 
0x06D4	0xD001      	BRA         L_Le_Teclado64
0x06D6	0xD7FD      	BRA         L_Le_Teclado63
L_Le_Teclado64:
;compy.c,247 :: 		return '-';
0x06D8	0x0E2D      	MOVLW       45
0x06DA	0x6E00      	MOVWF       R0 
0x06DC	0x0012      	RETURN      0
;compy.c,248 :: 		}
L_Le_Teclado62:
;compy.c,250 :: 		PORTD = 0B10000000; // VOCÃŠ SELECIONOU LD
0x06DE	0x0E80      	MOVLW       128
0x06E0	0x6E83      	MOVWF       PORTD 
;compy.c,251 :: 		if (PORTA.RA5 == 1) {
0x06E2	0xAA80      	BTFSS       PORTA, 5 
0x06E4	0xD006      	BRA         L_Le_Teclado65
;compy.c,252 :: 		while(PORTA.RA5 == 1);
L_Le_Teclado66:
0x06E6	0xAA80      	BTFSS       PORTA, 5 
0x06E8	0xD001      	BRA         L_Le_Teclado67
0x06EA	0xD7FD      	BRA         L_Le_Teclado66
L_Le_Teclado67:
;compy.c,253 :: 		return 'C';
0x06EC	0x0E43      	MOVLW       67
0x06EE	0x6E00      	MOVWF       R0 
0x06F0	0x0012      	RETURN      0
;compy.c,254 :: 		}
L_Le_Teclado65:
;compy.c,255 :: 		if (PORTB.RB1 == 1) {
0x06F2	0xA281      	BTFSS       PORTB, 1 
0x06F4	0xD006      	BRA         L_Le_Teclado68
;compy.c,256 :: 		while(PORTB.RB1 == 1);
L_Le_Teclado69:
0x06F6	0xA281      	BTFSS       PORTB, 1 
0x06F8	0xD001      	BRA         L_Le_Teclado70
0x06FA	0xD7FD      	BRA         L_Le_Teclado69
L_Le_Teclado70:
;compy.c,257 :: 		return '0';
0x06FC	0x0E30      	MOVLW       48
0x06FE	0x6E00      	MOVWF       R0 
0x0700	0x0012      	RETURN      0
;compy.c,258 :: 		}
L_Le_Teclado68:
;compy.c,259 :: 		if (PORTB.RB2 == 1) {
0x0702	0xA481      	BTFSS       PORTB, 2 
0x0704	0xD006      	BRA         L_Le_Teclado71
;compy.c,260 :: 		while(PORTB.RB2 == 1);
L_Le_Teclado72:
0x0706	0xA481      	BTFSS       PORTB, 2 
0x0708	0xD001      	BRA         L_Le_Teclado73
0x070A	0xD7FD      	BRA         L_Le_Teclado72
L_Le_Teclado73:
;compy.c,261 :: 		return '=';
0x070C	0x0E3D      	MOVLW       61
0x070E	0x6E00      	MOVWF       R0 
0x0710	0x0012      	RETURN      0
;compy.c,262 :: 		}
L_Le_Teclado71:
;compy.c,263 :: 		if (PORTB.RB3 == 1) {
0x0712	0xA681      	BTFSS       PORTB, 3 
0x0714	0xD006      	BRA         L_Le_Teclado74
;compy.c,264 :: 		while(PORTB.RB3 == 1);
L_Le_Teclado75:
0x0716	0xA681      	BTFSS       PORTB, 3 
0x0718	0xD001      	BRA         L_Le_Teclado76
0x071A	0xD7FD      	BRA         L_Le_Teclado75
L_Le_Teclado76:
;compy.c,265 :: 		return '+';
0x071C	0x0E2B      	MOVLW       43
0x071E	0x6E00      	MOVWF       R0 
0x0720	0x0012      	RETURN      0
;compy.c,266 :: 		}
L_Le_Teclado74:
;compy.c,268 :: 		return (char) 255;
0x0722	0x0EFF      	MOVLW       255
0x0724	0x6E00      	MOVWF       R0 
;compy.c,269 :: 		}
0x0726	0x0012      	RETURN      0
; end of _Le_Teclado
_T6963C_init:
;__Lib_T6963C.c,498 :: 		
;__Lib_T6963C.c,504 :: 		
0x0728	0xF166C168  	MOVFF       FARG_T6963C_init_width, _T6963C_grWidth
0x072C	0xF167C169  	MOVFF       FARG_T6963C_init_width+1, _T6963C_grWidth+1
;__Lib_T6963C.c,505 :: 		
0x0730	0xF072C16A  	MOVFF       FARG_T6963C_init_height, _T6963C_grHeight
0x0734	0x0E00      	MOVLW       0
0x0736	0x6E73      	MOVWF       _T6963C_grHeight+1 
;__Lib_T6963C.c,506 :: 		
0x0738	0xF062C16B  	MOVFF       FARG_T6963C_init_fntW, _T6963C_fontWidth
0x073C	0x0E00      	MOVLW       0
0x073E	0x6E63      	MOVWF       _T6963C_fontWidth+1 
;__Lib_T6963C.c,512 :: 		
0x0740	0xF004C062  	MOVFF       _T6963C_fontWidth, R4
0x0744	0xF005C063  	MOVFF       _T6963C_fontWidth+1, R5
0x0748	0xF000C168  	MOVFF       FARG_T6963C_init_width, R0
0x074C	0xF001C169  	MOVFF       FARG_T6963C_init_width+1, R1
0x0750	0xDCB0      	RCALL       _Div_16x16_U
0x0752	0xF057C000  	MOVFF       R0, _T6963C_txtCols
0x0756	0xF058C001  	MOVFF       R1, _T6963C_txtCols+1
;__Lib_T6963C.c,513 :: 		
0x075A	0xF004C072  	MOVFF       _T6963C_grHeight, R4
0x075E	0xF005C073  	MOVFF       _T6963C_grHeight+1, R5
0x0762	0xDCC2      	RCALL       _Mul_16x16_U
0x0764	0xF064C000  	MOVFF       R0, _T6963C_grMemSize
0x0768	0xF065C001  	MOVFF       R1, _T6963C_grMemSize+1
;__Lib_T6963C.c,514 :: 		
0x076C	0xF000C072  	MOVFF       _T6963C_grHeight, R0
0x0770	0xF001C073  	MOVFF       _T6963C_grHeight+1, R1
0x0774	0x3201      	RRCF        R1, 1 
0x0776	0x3200      	RRCF        R0, 1 
0x0778	0x9E01      	BCF         R1, 7 
0x077A	0x3201      	RRCF        R1, 1 
0x077C	0x3200      	RRCF        R0, 1 
0x077E	0x9E01      	BCF         R1, 7 
0x0780	0x3201      	RRCF        R1, 1 
0x0782	0x3200      	RRCF        R0, 1 
0x0784	0x9E01      	BCF         R1, 7 
0x0786	0xF004C057  	MOVFF       _T6963C_txtCols, R4
0x078A	0xF005C058  	MOVFF       _T6963C_txtCols+1, R5
0x078E	0xDCAC      	RCALL       _Mul_16x16_U
0x0790	0xF05CC000  	MOVFF       R0, _T6963C_txtMemSize
0x0794	0xF05DC001  	MOVFF       R1, _T6963C_txtMemSize+1
;__Lib_T6963C.c,520 :: 		
0x0798	0x9494      	BCF         T6963C_ctrlwr_Direction, BitPos(T6963C_ctrlwr_Direction+0) 
;__Lib_T6963C.c,521 :: 		
0x079A	0x9294      	BCF         T6963C_ctrlrd_Direction, BitPos(T6963C_ctrlrd_Direction+0) 
;__Lib_T6963C.c,522 :: 		
0x079C	0x9094      	BCF         T6963C_ctrlcd_Direction, BitPos(T6963C_ctrlcd_Direction+0) 
;__Lib_T6963C.c,523 :: 		
0x079E	0x9A94      	BCF         T6963C_ctrlrst_Direction, BitPos(T6963C_ctrlrst_Direction+0) 
;__Lib_T6963C.c,525 :: 		
0x07A0	0x8482      	BSF         T6963C_ctrlwr, BitPos(T6963C_ctrlwr+0) 
;__Lib_T6963C.c,526 :: 		
0x07A2	0x8282      	BSF         T6963C_ctrlrd, BitPos(T6963C_ctrlrd+0) 
;__Lib_T6963C.c,527 :: 		
0x07A4	0x8082      	BSF         T6963C_ctrlcd, BitPos(T6963C_ctrlcd+0) 
;__Lib_T6963C.c,528 :: 		
0x07A6	0x8A82      	BSF         T6963C_ctrlrst, BitPos(T6963C_ctrlrst+0) 
;__Lib_T6963C.c,534 :: 		
0x07A8	0x0EFF      	MOVLW       255
0x07AA	0x6E95      	MOVWF       T6963C_dataPort+18 
;__Lib_T6963C.c,539 :: 		
0x07AC	0x9A82      	BCF         T6963C_ctrlrst, BitPos(T6963C_ctrlrst+0) 
;__Lib_T6963C.c,540 :: 		
0x07AE	0xDE9D      	RCALL       _Delay_100ms
;__Lib_T6963C.c,541 :: 		
0x07B0	0x8A82      	BSF         T6963C_ctrlrst, BitPos(T6963C_ctrlrst+0) 
;__Lib_T6963C.c,542 :: 		
0x07B2	0xDE9B      	RCALL       _Delay_100ms
;__Lib_T6963C.c,547 :: 		
0x07B4	0x0E81      	MOVLW       129
0x07B6	0x0101      	MOVLB       1
0x07B8	0x6F8E      	MOVWF       FARG_T6963C_writeCommand_mydata, 1
0x07BA	0xDC71      	RCALL       _T6963C_writeCommand
;__Lib_T6963C.c,552 :: 		
0x07BC	0xF004C16B  	MOVFF       FARG_T6963C_init_fntW, R4
0x07C0	0x0E00      	MOVLW       0
0x07C2	0x6E05      	MOVWF       R5 
0x07C4	0xF000C166  	MOVFF       _T6963C_grWidth, R0
0x07C8	0xF001C167  	MOVFF       _T6963C_grWidth+1, R1
0x07CC	0xDC72      	RCALL       _Div_16x16_U
0x07CE	0xF18AC000  	MOVFF       R0, FARG_T6963C_setPtr_p
0x07D2	0xF18BC001  	MOVFF       R1, FARG_T6963C_setPtr_p+1
0x07D6	0x0E43      	MOVLW       67
0x07D8	0x0101      	MOVLB       1
0x07DA	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x07DC	0xDCAD      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,557 :: 		
0x07DE	0xF18AC057  	MOVFF       _T6963C_txtCols, FARG_T6963C_setPtr_p
0x07E2	0xF18BC058  	MOVFF       _T6963C_txtCols+1, FARG_T6963C_setPtr_p+1
0x07E6	0x0E41      	MOVLW       65
0x07E8	0x0101      	MOVLB       1
0x07EA	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x07EC	0xDCA5      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,562 :: 		
0x07EE	0x505C      	MOVF        _T6963C_txtMemSize, 0 
0x07F0	0x2464      	ADDWF       _T6963C_grMemSize, 0 
0x07F2	0x0101      	MOVLB       1
0x07F4	0x6F6F      	MOVWF       FARG_T6963C_fill_len, 1
0x07F6	0x505D      	MOVF        _T6963C_txtMemSize+1, 0 
0x07F8	0x2065      	ADDWFC      _T6963C_grMemSize+1, 0 
0x07FA	0x6F70      	MOVWF       FARG_T6963C_fill_len+1, 1
0x07FC	0x6B64      	CLRF        _T6963C_grHomeAddr, 1
0x07FE	0x6B65      	CLRF        _T6963C_grHomeAddr+1, 1
;__Lib_T6963C.c,563 :: 		
0x0800	0xF059C064  	MOVFF       _T6963C_grMemSize, _T6963C_textHomeAddr
0x0804	0xF05AC065  	MOVFF       _T6963C_grMemSize+1, _T6963C_textHomeAddr+1
;__Lib_T6963C.c,568 :: 		
0x0808	0x6B6C      	CLRF        FARG_T6963C_fill_v, 1
0x080A	0x6B6D      	CLRF        FARG_T6963C_fill_start, 1
0x080C	0x6B6E      	CLRF        FARG_T6963C_fill_start+1, 1
0x080E	0xDED8      	RCALL       _T6963C_fill
;__Lib_T6963C.c,573 :: 		
0x0810	0x0E90      	MOVLW       144
0x0812	0x6E5B      	MOVWF       _T6963C_display 
;__Lib_T6963C.c,578 :: 		
0x0814	0x0101      	MOVLB       1
0x0816	0x6B8A      	CLRF        FARG_T6963C_setPtr_p, 1
0x0818	0x6B8B      	CLRF        FARG_T6963C_setPtr_p+1, 1
0x081A	0x0E42      	MOVLW       66
0x081C	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x081E	0xDC8C      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,579 :: 		
0x0820	0xF18AC064  	MOVFF       _T6963C_grMemSize, FARG_T6963C_setPtr_p
0x0824	0xF18BC065  	MOVFF       _T6963C_grMemSize+1, FARG_T6963C_setPtr_p+1
0x0828	0x0E40      	MOVLW       64
0x082A	0x0101      	MOVLB       1
0x082C	0x6F8C      	MOVWF       FARG_T6963C_setPtr_c, 1
0x082E	0xDC84      	RCALL       _T6963C_setPtr
;__Lib_T6963C.c,580 :: 		
0x0830	0x0012      	RETURN      0
; end of _T6963C_init
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0832	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0834	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0838	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x083A	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x083C	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x083E	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
0x0840	0x0012      	RETURN      0
; end of ___CC2DW
_UART1_Init:
;__Lib_UART_c67.c,15 :: 		
;__Lib_UART_c67.c,18 :: 		
0x0842	0x0EDC      	MOVLW       _UART1_Write
0x0844	0x6E5E      	MOVWF       _UART_Wr_Ptr 
0x0846	0x0E04      	MOVLW       hi_addr(_UART1_Write)
0x0848	0x6E5F      	MOVWF       _UART_Wr_Ptr+1 
0x084A	0x0E6C      	MOVLW       FARG_UART1_Write_data_
0x084C	0x6E60      	MOVWF       _UART_Wr_Ptr+2 
0x084E	0x0E01      	MOVLW       hi_addr(FARG_UART1_Write_data_)
0x0850	0x6E61      	MOVWF       _UART_Wr_Ptr+3 
;__Lib_UART_c67.c,19 :: 		
0x0852	0x0EFF      	MOVLW       _UART1_Read
0x0854	0x6E66      	MOVWF       _UART_Rd_Ptr 
0x0856	0x0EFF      	MOVLW       hi_addr(_UART1_Read)
0x0858	0x6E67      	MOVWF       _UART_Rd_Ptr+1 
0x085A	0x0E00      	MOVLW       0
0x085C	0x6E68      	MOVWF       _UART_Rd_Ptr+2 
0x085E	0x0E00      	MOVLW       0
0x0860	0x6E69      	MOVWF       _UART_Rd_Ptr+3 
;__Lib_UART_c67.c,20 :: 		
0x0862	0x0EFF      	MOVLW       _UART1_Data_Ready
0x0864	0x6E6A      	MOVWF       _UART_Rdy_Ptr 
0x0866	0x0EFF      	MOVLW       hi_addr(_UART1_Data_Ready)
0x0868	0x6E6B      	MOVWF       _UART_Rdy_Ptr+1 
0x086A	0x0E00      	MOVLW       0
0x086C	0x6E6C      	MOVWF       _UART_Rdy_Ptr+2 
0x086E	0x0E00      	MOVLW       0
0x0870	0x6E6D      	MOVWF       _UART_Rdy_Ptr+3 
;__Lib_UART_c67.c,21 :: 		
0x0872	0x0EFF      	MOVLW       _UART1_Tx_Idle
0x0874	0x6E6E      	MOVWF       _UART_Tx_Idle_Ptr 
0x0876	0x0EFF      	MOVLW       hi_addr(_UART1_Tx_Idle)
0x0878	0x6E6F      	MOVWF       _UART_Tx_Idle_Ptr+1 
0x087A	0x0E00      	MOVLW       0
0x087C	0x6E70      	MOVWF       _UART_Tx_Idle_Ptr+2 
0x087E	0x0E00      	MOVLW       0
0x0880	0x6E71      	MOVWF       _UART_Tx_Idle_Ptr+3 
;__Lib_UART_c67.c,23 :: 		
0x0882	0x8AAC      	BSF         TXSTA, 5 
;__Lib_UART_c67.c,24 :: 		
0x0884	0x0E90      	MOVLW       144
0x0886	0x6EAB      	MOVWF       RCSTA 
;__Lib_UART_c67.c,25 :: 		
0x0888	0x8E94      	BSF         TRISC7_bit, 7 
;__Lib_UART_c67.c,26 :: 		
0x088A	0x9C94      	BCF         TRISC6_bit, 6 
;__Lib_UART_c67.c,28 :: 		
L_UART1_Init0:
0x088C	0xAA9E      	BTFSS       PIR1, 5 
0x088E	0xD003      	BRA         L_UART1_Init1
;__Lib_UART_c67.c,29 :: 		
0x0890	0xF000CFAE  	MOVFF       RCREG, R0
0x0894	0xD7FB      	BRA         L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c67.c,30 :: 		
0x0896	0x0012      	RETURN      0
; end of _UART1_Init
_I2C1_Init:
;__Lib_I2C_c34.c,2 :: 		
;__Lib_I2C_c34.c,9 :: 		
0x0898	0x9894      	BCF         TRISC4_bit, 4 
;__Lib_I2C_c34.c,10 :: 		
0x089A	0x9694      	BCF         TRISC3_bit, 3 
;__Lib_I2C_c34.c,13 :: 		
0x089C	0x988B      	BCF         LATC4_bit, 4 
;__Lib_I2C_c34.c,14 :: 		
0x089E	0x968B      	BCF         LATC3_bit, 3 
;__Lib_I2C_c34.c,17 :: 		
0x08A0	0x8894      	BSF         TRISC4_bit, 4 
;__Lib_I2C_c34.c,18 :: 		
0x08A2	0x8694      	BSF         TRISC3_bit, 3 
;__Lib_I2C_c34.c,20 :: 		
0x08A4	0x9EC7      	BCF         SSPSTAT, 7 
;__Lib_I2C_c34.c,21 :: 		
0x08A6	0x9CC7      	BCF         SSPSTAT, 6 
;__Lib_I2C_c34.c,22 :: 		
0x08A8	0x0E38      	MOVLW       56
0x08AA	0x6EC6      	MOVWF       SSPCON1 
;__Lib_I2C_c34.c,25 :: 		
0x08AC	0x0012      	RETURN      0
; end of _I2C1_Init
_update_pacman:
;compy.c,368 :: 		void update_pacman(short direction) {
;compy.c,369 :: 		if (direction == 0) {
0x08AE	0x0101      	MOVLB       1
0x08B0	0x5168      	MOVF        FARG_update_pacman_direction, 0, 1
0x08B2	0x0A00      	XORLW       0
0x08B4	0xE10B      	BNZ         L_update_pacman99
;compy.c,370 :: 		newPacman_x = pacman_x;
0x08B6	0xF051C023  	MOVFF       _pacman_x, _newPacman_x
0x08BA	0xF052C024  	MOVFF       _pacman_x+1, _newPacman_x+1
;compy.c,371 :: 		newPacman_y = pacman_y - 1;
0x08BE	0x0E01      	MOVLW       1
0x08C0	0x5C1F      	SUBWF       _pacman_y, 0 
0x08C2	0x6E21      	MOVWF       _newPacman_y 
0x08C4	0x0E00      	MOVLW       0
0x08C6	0x5820      	SUBWFB      _pacman_y+1, 0 
0x08C8	0x6E22      	MOVWF       _newPacman_y+1 
;compy.c,372 :: 		} else if (direction == 1) {
0x08CA	0xD029      	BRA         L_update_pacman100
L_update_pacman99:
0x08CC	0x5168      	MOVF        FARG_update_pacman_direction, 0, 1
0x08CE	0x0A01      	XORLW       1
0x08D0	0xE10B      	BNZ         L_update_pacman101
;compy.c,373 :: 		newPacman_x = pacman_x + 1;
0x08D2	0x0E01      	MOVLW       1
0x08D4	0x2423      	ADDWF       _pacman_x, 0 
0x08D6	0x6E51      	MOVWF       _newPacman_x 
0x08D8	0x0E00      	MOVLW       0
0x08DA	0x2024      	ADDWFC      _pacman_x+1, 0 
0x08DC	0x6E52      	MOVWF       _newPacman_x+1 
;compy.c,374 :: 		newPacman_y = pacman_y;
0x08DE	0xF021C01F  	MOVFF       _pacman_y, _newPacman_y
0x08E2	0xF022C020  	MOVFF       _pacman_y+1, _newPacman_y+1
;compy.c,375 :: 		} else if (direction == 2) {
0x08E6	0xD01B      	BRA         L_update_pacman102
L_update_pacman101:
0x08E8	0x5168      	MOVF        FARG_update_pacman_direction, 0, 1
0x08EA	0x0A02      	XORLW       2
0x08EC	0xE10B      	BNZ         L_update_pacman103
;compy.c,376 :: 		newPacman_x = pacman_x;
0x08EE	0xF051C023  	MOVFF       _pacman_x, _newPacman_x
0x08F2	0xF052C024  	MOVFF       _pacman_x+1, _newPacman_x+1
;compy.c,377 :: 		newPacman_y = pacman_y + 1;
0x08F6	0x0E01      	MOVLW       1
0x08F8	0x241F      	ADDWF       _pacman_y, 0 
0x08FA	0x6E21      	MOVWF       _newPacman_y 
0x08FC	0x0E00      	MOVLW       0
0x08FE	0x2020      	ADDWFC      _pacman_y+1, 0 
0x0900	0x6E22      	MOVWF       _newPacman_y+1 
;compy.c,378 :: 		} else if (direction == 3) {
0x0902	0xD00D      	BRA         L_update_pacman104
L_update_pacman103:
0x0904	0x5168      	MOVF        FARG_update_pacman_direction, 0, 1
0x0906	0x0A03      	XORLW       3
0x0908	0xE10A      	BNZ         L_update_pacman105
;compy.c,379 :: 		newPacman_x = pacman_x - 1;
0x090A	0x0E01      	MOVLW       1
0x090C	0x5C23      	SUBWF       _pacman_x, 0 
0x090E	0x6E51      	MOVWF       _newPacman_x 
0x0910	0x0E00      	MOVLW       0
0x0912	0x5824      	SUBWFB      _pacman_x+1, 0 
0x0914	0x6E52      	MOVWF       _newPacman_x+1 
;compy.c,380 :: 		newPacman_y = pacman_y;
0x0916	0xF021C01F  	MOVFF       _pacman_y, _newPacman_y
0x091A	0xF022C020  	MOVFF       _pacman_y+1, _newPacman_y+1
;compy.c,381 :: 		}
L_update_pacman105:
L_update_pacman104:
L_update_pacman102:
L_update_pacman100:
;compy.c,383 :: 		newPacmanOrientation = update_pacman_orientation(newPacman_x, newPacman_y);
0x091E	0xF16CC051  	MOVFF       _newPacman_x, FARG_update_pacman_orientation_newX
0x0922	0xF16DC052  	MOVFF       _newPacman_x+1, FARG_update_pacman_orientation_newX+1
0x0926	0xF16EC021  	MOVFF       _newPacman_y, FARG_update_pacman_orientation_newY
0x092A	0xF16FC022  	MOVFF       _newPacman_y+1, FARG_update_pacman_orientation_newY+1
0x092E	0xDD9F      	RCALL       _update_pacman_orientation
0x0930	0xF029C000  	MOVFF       R0, _newPacmanOrientation
0x0934	0x0E00      	MOVLW       0
0x0936	0x6E2A      	MOVWF       _newPacmanOrientation+1 
;compy.c,385 :: 		if (newPacman_x < 0) newPacman_x = 14;
0x0938	0x0E80      	MOVLW       128
0x093A	0x1852      	XORWF       _newPacman_x+1, 0 
0x093C	0x6E00      	MOVWF       R0 
0x093E	0x0E80      	MOVLW       128
0x0940	0x5C00      	SUBWF       R0, 0 
0x0942	0xE102      	BNZ         L__update_pacman158
0x0944	0x0E00      	MOVLW       0
0x0946	0x5C51      	SUBWF       _newPacman_x, 0 
L__update_pacman158:
0x0948	0xE204      	BC          L_update_pacman106
0x094A	0x0E0E      	MOVLW       14
0x094C	0x6E51      	MOVWF       _newPacman_x 
0x094E	0x0E00      	MOVLW       0
0x0950	0x6E52      	MOVWF       _newPacman_x+1 
L_update_pacman106:
;compy.c,386 :: 		if (newPacman_x > 14) newPacman_x = 0;
0x0952	0x0E80      	MOVLW       128
0x0954	0x6E00      	MOVWF       R0 
0x0956	0x0E80      	MOVLW       128
0x0958	0x1852      	XORWF       _newPacman_x+1, 0 
0x095A	0x5C00      	SUBWF       R0, 0 
0x095C	0xE102      	BNZ         L__update_pacman159
0x095E	0x5051      	MOVF        _newPacman_x, 0 
0x0960	0x080E      	SUBLW       14
L__update_pacman159:
0x0962	0xE202      	BC          L_update_pacman107
0x0964	0x6A51      	CLRF        _newPacman_x 
0x0966	0x6A52      	CLRF        _newPacman_x+1 
L_update_pacman107:
;compy.c,388 :: 		if (newPacman_y < 0) newPacman_y = 7;
0x0968	0x0E80      	MOVLW       128
0x096A	0x1822      	XORWF       _newPacman_y+1, 0 
0x096C	0x6E00      	MOVWF       R0 
0x096E	0x0E80      	MOVLW       128
0x0970	0x5C00      	SUBWF       R0, 0 
0x0972	0xE102      	BNZ         L__update_pacman160
0x0974	0x0E00      	MOVLW       0
0x0976	0x5C21      	SUBWF       _newPacman_y, 0 
L__update_pacman160:
0x0978	0xE204      	BC          L_update_pacman108
0x097A	0x0E07      	MOVLW       7
0x097C	0x6E21      	MOVWF       _newPacman_y 
0x097E	0x0E00      	MOVLW       0
0x0980	0x6E22      	MOVWF       _newPacman_y+1 
L_update_pacman108:
;compy.c,389 :: 		if (newPacman_y > 7) newPacman_y = 0;
0x0982	0x0E80      	MOVLW       128
0x0984	0x6E00      	MOVWF       R0 
0x0986	0x0E80      	MOVLW       128
0x0988	0x1822      	XORWF       _newPacman_y+1, 0 
0x098A	0x5C00      	SUBWF       R0, 0 
0x098C	0xE102      	BNZ         L__update_pacman161
0x098E	0x5021      	MOVF        _newPacman_y, 0 
0x0990	0x0807      	SUBLW       7
L__update_pacman161:
0x0992	0xE202      	BC          L_update_pacman109
0x0994	0x6A21      	CLRF        _newPacman_y 
0x0996	0x6A22      	CLRF        _newPacman_y+1 
L_update_pacman109:
;compy.c,391 :: 		if (QTD_FOOD == 0) {
0x0998	0x0E00      	MOVLW       0
0x099A	0x1828      	XORWF       _QTD_FOOD+1, 0 
0x099C	0xE102      	BNZ         L__update_pacman162
0x099E	0x0E00      	MOVLW       0
0x09A0	0x1827      	XORWF       _QTD_FOOD, 0 
L__update_pacman162:
0x09A2	0xE106      	BNZ         L_update_pacman110
;compy.c,392 :: 		IS_FINISH = 1;
0x09A4	0x0E01      	MOVLW       1
0x09A6	0x6E25      	MOVWF       _IS_FINISH 
0x09A8	0x0E00      	MOVLW       0
0x09AA	0x6E26      	MOVWF       _IS_FINISH+1 
;compy.c,393 :: 		IS_GAME_OVER = 0;
0x09AC	0x6A18      	CLRF        _IS_GAME_OVER 
0x09AE	0x6A19      	CLRF        _IS_GAME_OVER+1 
;compy.c,394 :: 		}
L_update_pacman110:
;compy.c,396 :: 		if (world[newPacman_x][newPacman_y] != barrier_orientation) {
0x09B0	0xF000C051  	MOVFF       _newPacman_x, R0
0x09B4	0xF001C052  	MOVFF       _newPacman_x+1, R1
0x09B8	0x0E1E      	MOVLW       30
0x09BA	0x6E04      	MOVWF       R4 
0x09BC	0x0E00      	MOVLW       0
0x09BE	0x6E05      	MOVWF       R5 
0x09C0	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x09C4	0x0E74      	MOVLW       _world
0x09C6	0x2400      	ADDWF       R0, 0 
0x09C8	0x6E03      	MOVWF       R3 
0x09CA	0x0E00      	MOVLW       hi_addr(_world)
0x09CC	0x2001      	ADDWFC      R1, 0 
0x09CE	0x6E04      	MOVWF       R4 
0x09D0	0xF000C021  	MOVFF       _newPacman_y, R0
0x09D4	0xF001C022  	MOVFF       _newPacman_y+1, R1
0x09D8	0x3600      	RLCF        R0, 1 
0x09DA	0x9000      	BCF         R0, 0 
0x09DC	0x3601      	RLCF        R1, 1 
0x09DE	0x5000      	MOVF        R0, 0 
0x09E0	0x2403      	ADDWF       R3, 0 
0x09E2	0x6EE9      	MOVWF       FSR0L 
0x09E4	0x5001      	MOVF        R1, 0 
0x09E6	0x2004      	ADDWFC      R4, 0 
0x09E8	0x6EEA      	MOVWF       FSR0H 
0x09EA	0xF001CFEE  	MOVFF       POSTINC0, R1
0x09EE	0xF002CFEE  	MOVFF       POSTINC0, R2
0x09F2	0x0E00      	MOVLW       0
0x09F4	0x1802      	XORWF       R2, 0 
0x09F6	0xE102      	BNZ         L__update_pacman163
0x09F8	0x5017      	MOVF        _barrier_orientation, 0 
0x09FA	0x1801      	XORWF       R1, 0 
L__update_pacman163:
0x09FC	0xB4D8      	BTFSC       STATUS, 2 
0x09FE	0xD089      	BRA         L_update_pacman111
;compy.c,397 :: 		if (world[newPacman_x][newPacman_y] == food_orientation) {
0x0A00	0xF000C051  	MOVFF       _newPacman_x, R0
0x0A04	0xF001C052  	MOVFF       _newPacman_x+1, R1
0x0A08	0x0E1E      	MOVLW       30
0x0A0A	0x6E04      	MOVWF       R4 
0x0A0C	0x0E00      	MOVLW       0
0x0A0E	0x6E05      	MOVWF       R5 
0x0A10	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0A14	0x0E74      	MOVLW       _world
0x0A16	0x2400      	ADDWF       R0, 0 
0x0A18	0x6E03      	MOVWF       R3 
0x0A1A	0x0E00      	MOVLW       hi_addr(_world)
0x0A1C	0x2001      	ADDWFC      R1, 0 
0x0A1E	0x6E04      	MOVWF       R4 
0x0A20	0xF000C021  	MOVFF       _newPacman_y, R0
0x0A24	0xF001C022  	MOVFF       _newPacman_y+1, R1
0x0A28	0x3600      	RLCF        R0, 1 
0x0A2A	0x9000      	BCF         R0, 0 
0x0A2C	0x3601      	RLCF        R1, 1 
0x0A2E	0x5000      	MOVF        R0, 0 
0x0A30	0x2403      	ADDWF       R3, 0 
0x0A32	0x6EE9      	MOVWF       FSR0L 
0x0A34	0x5001      	MOVF        R1, 0 
0x0A36	0x2004      	ADDWFC      R4, 0 
0x0A38	0x6EEA      	MOVWF       FSR0H 
0x0A3A	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0A3E	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0A42	0x0E00      	MOVLW       0
0x0A44	0x1802      	XORWF       R2, 0 
0x0A46	0xE102      	BNZ         L__update_pacman164
0x0A48	0x5016      	MOVF        _food_orientation, 0 
0x0A4A	0x1801      	XORWF       R1, 0 
L__update_pacman164:
0x0A4C	0xE104      	BNZ         L_update_pacman112
;compy.c,398 :: 		QTD_FOOD--;
0x0A4E	0x0E01      	MOVLW       1
0x0A50	0x5E27      	SUBWF       _QTD_FOOD, 1 
0x0A52	0x0E00      	MOVLW       0
0x0A54	0x5A28      	SUBWFB      _QTD_FOOD+1, 1 
;compy.c,399 :: 		}
L_update_pacman112:
;compy.c,401 :: 		pacman_orientation = newPacmanOrientation;
0x0A56	0xF01EC029  	MOVFF       _newPacmanOrientation, _pacman_orientation
;compy.c,403 :: 		world[pacman_x][pacman_y] = ' ';
0x0A5A	0xF000C023  	MOVFF       _pacman_x, R0
0x0A5E	0xF001C024  	MOVFF       _pacman_x+1, R1
0x0A62	0x0E1E      	MOVLW       30
0x0A64	0x6E04      	MOVWF       R4 
0x0A66	0x0E00      	MOVLW       0
0x0A68	0x6E05      	MOVWF       R5 
0x0A6A	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0A6E	0x0E74      	MOVLW       _world
0x0A70	0x2400      	ADDWF       R0, 0 
0x0A72	0x6E03      	MOVWF       R3 
0x0A74	0x0E00      	MOVLW       hi_addr(_world)
0x0A76	0x2001      	ADDWFC      R1, 0 
0x0A78	0x6E04      	MOVWF       R4 
0x0A7A	0xF000C01F  	MOVFF       _pacman_y, R0
0x0A7E	0xF001C020  	MOVFF       _pacman_y+1, R1
0x0A82	0x3600      	RLCF        R0, 1 
0x0A84	0x9000      	BCF         R0, 0 
0x0A86	0x3601      	RLCF        R1, 1 
0x0A88	0x5000      	MOVF        R0, 0 
0x0A8A	0x2403      	ADDWF       R3, 0 
0x0A8C	0x6EE1      	MOVWF       FSR1L 
0x0A8E	0x5001      	MOVF        R1, 0 
0x0A90	0x2004      	ADDWFC      R4, 0 
0x0A92	0x6EE2      	MOVWF       FSR1H 
0x0A94	0x0E20      	MOVLW       32
0x0A96	0x6EE6      	MOVWF       POSTINC1 
0x0A98	0x0E00      	MOVLW       0
0x0A9A	0x6EE6      	MOVWF       POSTINC1 
;compy.c,404 :: 		printCoordinate(pacman_x, pacman_y);
0x0A9C	0xF173C023  	MOVFF       _pacman_x, FARG_printCoordinate_x
0x0AA0	0xF174C024  	MOVFF       _pacman_x+1, FARG_printCoordinate_x+1
0x0AA4	0xF175C01F  	MOVFF       _pacman_y, FARG_printCoordinate_y
0x0AA8	0xF176C020  	MOVFF       _pacman_y+1, FARG_printCoordinate_y+1
0x0AAC	0xDC47      	RCALL       _printCoordinate
;compy.c,406 :: 		world[newPacman_x][newPacman_y] = pacman_orientation;
0x0AAE	0xF000C051  	MOVFF       _newPacman_x, R0
0x0AB2	0xF001C052  	MOVFF       _newPacman_x+1, R1
0x0AB6	0x0E1E      	MOVLW       30
0x0AB8	0x6E04      	MOVWF       R4 
0x0ABA	0x0E00      	MOVLW       0
0x0ABC	0x6E05      	MOVWF       R5 
0x0ABE	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0AC2	0x0E74      	MOVLW       _world
0x0AC4	0x2400      	ADDWF       R0, 0 
0x0AC6	0x6E03      	MOVWF       R3 
0x0AC8	0x0E00      	MOVLW       hi_addr(_world)
0x0ACA	0x2001      	ADDWFC      R1, 0 
0x0ACC	0x6E04      	MOVWF       R4 
0x0ACE	0xF000C021  	MOVFF       _newPacman_y, R0
0x0AD2	0xF001C022  	MOVFF       _newPacman_y+1, R1
0x0AD6	0x3600      	RLCF        R0, 1 
0x0AD8	0x9000      	BCF         R0, 0 
0x0ADA	0x3601      	RLCF        R1, 1 
0x0ADC	0x5000      	MOVF        R0, 0 
0x0ADE	0x2403      	ADDWF       R3, 0 
0x0AE0	0x6EE1      	MOVWF       FSR1L 
0x0AE2	0x5001      	MOVF        R1, 0 
0x0AE4	0x2004      	ADDWFC      R4, 0 
0x0AE6	0x6EE2      	MOVWF       FSR1H 
0x0AE8	0xFFE6C01E  	MOVFF       _pacman_orientation, POSTINC1
0x0AEC	0x0E00      	MOVLW       0
0x0AEE	0x6EE6      	MOVWF       POSTINC1 
;compy.c,407 :: 		printCoordinate(newPacman_x, newPacman_y);
0x0AF0	0xF173C051  	MOVFF       _newPacman_x, FARG_printCoordinate_x
0x0AF4	0xF174C052  	MOVFF       _newPacman_x+1, FARG_printCoordinate_x+1
0x0AF8	0xF175C021  	MOVFF       _newPacman_y, FARG_printCoordinate_y
0x0AFC	0xF176C022  	MOVFF       _newPacman_y+1, FARG_printCoordinate_y+1
0x0B00	0xDC1D      	RCALL       _printCoordinate
;compy.c,409 :: 		pacman_x = newPacman_x;
0x0B02	0xF023C051  	MOVFF       _newPacman_x, _pacman_x
0x0B06	0xF024C052  	MOVFF       _newPacman_x+1, _pacman_x+1
;compy.c,410 :: 		pacman_y = newPacman_y;
0x0B0A	0xF01FC021  	MOVFF       _newPacman_y, _pacman_y
0x0B0E	0xF020C022  	MOVFF       _newPacman_y+1, _pacman_y+1
;compy.c,411 :: 		}
L_update_pacman111:
;compy.c,412 :: 		}
0x0B12	0x0012      	RETURN      0
; end of _update_pacman
_move_ghost:
;compy.c,140 :: 		void move_ghost() {
;compy.c,141 :: 		new_ghost_y = ghost_y;
0x0B14	0xF01CC01A  	MOVFF       _ghost_y, _new_ghost_y
0x0B18	0xF01DC01B  	MOVFF       _ghost_y+1, _new_ghost_y+1
;compy.c,142 :: 		new_ghost_x = ghost_x;
0x0B1C	0xF02BC045  	MOVFF       _ghost_x, _new_ghost_x
0x0B20	0xF02CC046  	MOVFF       _ghost_x+1, _new_ghost_x+1
;compy.c,143 :: 		if (pacman_y > ghost_y) {
0x0B24	0x0E80      	MOVLW       128
0x0B26	0x181B      	XORWF       _ghost_y+1, 0 
0x0B28	0x6E00      	MOVWF       R0 
0x0B2A	0x0E80      	MOVLW       128
0x0B2C	0x1820      	XORWF       _pacman_y+1, 0 
0x0B2E	0x5C00      	SUBWF       R0, 0 
0x0B30	0xE102      	BNZ         L__move_ghost139
0x0B32	0x501F      	MOVF        _pacman_y, 0 
0x0B34	0x5C1A      	SUBWF       _ghost_y, 0 
L__move_ghost139:
0x0B36	0xE207      	BC          L_move_ghost13
;compy.c,144 :: 		new_ghost_y = (ghost_y + 1);
0x0B38	0x0E01      	MOVLW       1
0x0B3A	0x241A      	ADDWF       _ghost_y, 0 
0x0B3C	0x6E1C      	MOVWF       _new_ghost_y 
0x0B3E	0x0E00      	MOVLW       0
0x0B40	0x201B      	ADDWFC      _ghost_y+1, 0 
0x0B42	0x6E1D      	MOVWF       _new_ghost_y+1 
;compy.c,145 :: 		} else if (pacman_y < ghost_y) {
0x0B44	0xD032      	BRA         L_move_ghost14
L_move_ghost13:
0x0B46	0x0E80      	MOVLW       128
0x0B48	0x1820      	XORWF       _pacman_y+1, 0 
0x0B4A	0x6E00      	MOVWF       R0 
0x0B4C	0x0E80      	MOVLW       128
0x0B4E	0x181B      	XORWF       _ghost_y+1, 0 
0x0B50	0x5C00      	SUBWF       R0, 0 
0x0B52	0xE102      	BNZ         L__move_ghost140
0x0B54	0x501A      	MOVF        _ghost_y, 0 
0x0B56	0x5C1F      	SUBWF       _pacman_y, 0 
L__move_ghost140:
0x0B58	0xE207      	BC          L_move_ghost15
;compy.c,146 :: 		new_ghost_y = (ghost_y - 1);
0x0B5A	0x0E01      	MOVLW       1
0x0B5C	0x5C1A      	SUBWF       _ghost_y, 0 
0x0B5E	0x6E1C      	MOVWF       _new_ghost_y 
0x0B60	0x0E00      	MOVLW       0
0x0B62	0x581B      	SUBWFB      _ghost_y+1, 0 
0x0B64	0x6E1D      	MOVWF       _new_ghost_y+1 
;compy.c,147 :: 		} else {
0x0B66	0xD021      	BRA         L_move_ghost16
L_move_ghost15:
;compy.c,148 :: 		if (pacman_x > ghost_x) {
0x0B68	0x0E80      	MOVLW       128
0x0B6A	0x1846      	XORWF       _ghost_x+1, 0 
0x0B6C	0x6E00      	MOVWF       R0 
0x0B6E	0x0E80      	MOVLW       128
0x0B70	0x1824      	XORWF       _pacman_x+1, 0 
0x0B72	0x5C00      	SUBWF       R0, 0 
0x0B74	0xE102      	BNZ         L__move_ghost141
0x0B76	0x5023      	MOVF        _pacman_x, 0 
0x0B78	0x5C45      	SUBWF       _ghost_x, 0 
L__move_ghost141:
0x0B7A	0xE207      	BC          L_move_ghost17
;compy.c,149 :: 		new_ghost_x = (ghost_x + 1);
0x0B7C	0x0E01      	MOVLW       1
0x0B7E	0x2445      	ADDWF       _ghost_x, 0 
0x0B80	0x6E2B      	MOVWF       _new_ghost_x 
0x0B82	0x0E00      	MOVLW       0
0x0B84	0x2046      	ADDWFC      _ghost_x+1, 0 
0x0B86	0x6E2C      	MOVWF       _new_ghost_x+1 
;compy.c,151 :: 		} else if (pacman_x < ghost_x) {
0x0B88	0xD010      	BRA         L_move_ghost18
L_move_ghost17:
0x0B8A	0x0E80      	MOVLW       128
0x0B8C	0x1824      	XORWF       _pacman_x+1, 0 
0x0B8E	0x6E00      	MOVWF       R0 
0x0B90	0x0E80      	MOVLW       128
0x0B92	0x1846      	XORWF       _ghost_x+1, 0 
0x0B94	0x5C00      	SUBWF       R0, 0 
0x0B96	0xE102      	BNZ         L__move_ghost142
0x0B98	0x5045      	MOVF        _ghost_x, 0 
0x0B9A	0x5C23      	SUBWF       _pacman_x, 0 
L__move_ghost142:
0x0B9C	0xE206      	BC          L_move_ghost19
;compy.c,152 :: 		new_ghost_x = (ghost_x - 1);
0x0B9E	0x0E01      	MOVLW       1
0x0BA0	0x5C45      	SUBWF       _ghost_x, 0 
0x0BA2	0x6E2B      	MOVWF       _new_ghost_x 
0x0BA4	0x0E00      	MOVLW       0
0x0BA6	0x5846      	SUBWFB      _ghost_x+1, 0 
0x0BA8	0x6E2C      	MOVWF       _new_ghost_x+1 
;compy.c,153 :: 		}
L_move_ghost19:
L_move_ghost18:
;compy.c,154 :: 		}
L_move_ghost16:
L_move_ghost14:
;compy.c,155 :: 		if (world[new_ghost_x][new_ghost_x] == barrier_orientation) {
0x0BAA	0xF000C02B  	MOVFF       _new_ghost_x, R0
0x0BAE	0xF001C02C  	MOVFF       _new_ghost_x+1, R1
0x0BB2	0x0E1E      	MOVLW       30
0x0BB4	0x6E04      	MOVWF       R4 
0x0BB6	0x0E00      	MOVLW       0
0x0BB8	0x6E05      	MOVWF       R5 
0x0BBA	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0BBE	0x0E74      	MOVLW       _world
0x0BC0	0x2400      	ADDWF       R0, 0 
0x0BC2	0x6E03      	MOVWF       R3 
0x0BC4	0x0E00      	MOVLW       hi_addr(_world)
0x0BC6	0x2001      	ADDWFC      R1, 0 
0x0BC8	0x6E04      	MOVWF       R4 
0x0BCA	0xF000C02B  	MOVFF       _new_ghost_x, R0
0x0BCE	0xF001C02C  	MOVFF       _new_ghost_x+1, R1
0x0BD2	0x3600      	RLCF        R0, 1 
0x0BD4	0x9000      	BCF         R0, 0 
0x0BD6	0x3601      	RLCF        R1, 1 
0x0BD8	0x5000      	MOVF        R0, 0 
0x0BDA	0x2403      	ADDWF       R3, 0 
0x0BDC	0x6EE9      	MOVWF       FSR0L 
0x0BDE	0x5001      	MOVF        R1, 0 
0x0BE0	0x2004      	ADDWFC      R4, 0 
0x0BE2	0x6EEA      	MOVWF       FSR0H 
0x0BE4	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0BE8	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0BEC	0x0E00      	MOVLW       0
0x0BEE	0x1802      	XORWF       R2, 0 
0x0BF0	0xE102      	BNZ         L__move_ghost143
0x0BF2	0x5017      	MOVF        _barrier_orientation, 0 
0x0BF4	0x1801      	XORWF       R1, 0 
L__move_ghost143:
0x0BF6	0xE102      	BNZ         L_move_ghost20
;compy.c,156 :: 		new_ghost_x = new_ghost_x + 1;
0x0BF8	0x4A2B      	INFSNZ      _new_ghost_x, 1 
0x0BFA	0x2A2C      	INCF        _new_ghost_x+1, 1 
;compy.c,157 :: 		}
L_move_ghost20:
;compy.c,159 :: 		world[ghost_x][ghost_y] = old_ghost_obj != 0 ? old_ghost_obj : ' ';
0x0BFC	0xF000C045  	MOVFF       _ghost_x, R0
0x0C00	0xF001C046  	MOVFF       _ghost_x+1, R1
0x0C04	0x0E1E      	MOVLW       30
0x0C06	0x6E04      	MOVWF       R4 
0x0C08	0x0E00      	MOVLW       0
0x0C0A	0x6E05      	MOVWF       R5 
0x0C0C	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0C10	0x0E74      	MOVLW       _world
0x0C12	0x2400      	ADDWF       R0, 0 
0x0C14	0x6E04      	MOVWF       R4 
0x0C16	0x0E00      	MOVLW       hi_addr(_world)
0x0C18	0x2001      	ADDWFC      R1, 0 
0x0C1A	0x6E05      	MOVWF       R5 
0x0C1C	0xF000C01A  	MOVFF       _ghost_y, R0
0x0C20	0xF001C01B  	MOVFF       _ghost_y+1, R1
0x0C24	0x3600      	RLCF        R0, 1 
0x0C26	0x9000      	BCF         R0, 0 
0x0C28	0x3601      	RLCF        R1, 1 
0x0C2A	0x5000      	MOVF        R0, 0 
0x0C2C	0x2404      	ADDWF       R4, 0 
0x0C2E	0x6E02      	MOVWF       R2 
0x0C30	0x5001      	MOVF        R1, 0 
0x0C32	0x2005      	ADDWFC      R5, 0 
0x0C34	0x6E03      	MOVWF       R3 
0x0C36	0x5044      	MOVF        _old_ghost_obj, 0 
0x0C38	0x0A00      	XORLW       0
0x0C3A	0xE003      	BZ          L_move_ghost21
0x0C3C	0xF000C044  	MOVFF       _old_ghost_obj, R0
0x0C40	0xD002      	BRA         L_move_ghost22
L_move_ghost21:
0x0C42	0x0E20      	MOVLW       32
0x0C44	0x6E00      	MOVWF       R0 
L_move_ghost22:
0x0C46	0xFFE1C002  	MOVFF       R2, FSR1L
0x0C4A	0xFFE2C003  	MOVFF       R3, FSR1H
0x0C4E	0xFFE6C000  	MOVFF       R0, POSTINC1
0x0C52	0x0E00      	MOVLW       0
0x0C54	0x6EE6      	MOVWF       POSTINC1 
;compy.c,160 :: 		printCoordinate(ghost_x, ghost_y);
0x0C56	0xF173C045  	MOVFF       _ghost_x, FARG_printCoordinate_x
0x0C5A	0xF174C046  	MOVFF       _ghost_x+1, FARG_printCoordinate_x+1
0x0C5E	0xF175C01A  	MOVFF       _ghost_y, FARG_printCoordinate_y
0x0C62	0xF176C01B  	MOVFF       _ghost_y+1, FARG_printCoordinate_y+1
0x0C66	0xF001EC9E  	CALL        _printCoordinate, 0
;compy.c,163 :: 		old_ghost_obj = world[ghost_x][ghost_x] != ghost_orientation ? world[new_ghost_x][new_ghost_y] : ' ';
0x0C6A	0xF000C045  	MOVFF       _ghost_x, R0
0x0C6E	0xF001C046  	MOVFF       _ghost_x+1, R1
0x0C72	0x0E1E      	MOVLW       30
0x0C74	0x6E04      	MOVWF       R4 
0x0C76	0x0E00      	MOVLW       0
0x0C78	0x6E05      	MOVWF       R5 
0x0C7A	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0C7E	0x0E74      	MOVLW       _world
0x0C80	0x2400      	ADDWF       R0, 0 
0x0C82	0x6E03      	MOVWF       R3 
0x0C84	0x0E00      	MOVLW       hi_addr(_world)
0x0C86	0x2001      	ADDWFC      R1, 0 
0x0C88	0x6E04      	MOVWF       R4 
0x0C8A	0xF000C045  	MOVFF       _ghost_x, R0
0x0C8E	0xF001C046  	MOVFF       _ghost_x+1, R1
0x0C92	0x3600      	RLCF        R0, 1 
0x0C94	0x9000      	BCF         R0, 0 
0x0C96	0x3601      	RLCF        R1, 1 
0x0C98	0x5000      	MOVF        R0, 0 
0x0C9A	0x2403      	ADDWF       R3, 0 
0x0C9C	0x6EE9      	MOVWF       FSR0L 
0x0C9E	0x5001      	MOVF        R1, 0 
0x0CA0	0x2004      	ADDWFC      R4, 0 
0x0CA2	0x6EEA      	MOVWF       FSR0H 
0x0CA4	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0CA8	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0CAC	0x0E00      	MOVLW       0
0x0CAE	0x1802      	XORWF       R2, 0 
0x0CB0	0xE102      	BNZ         L__move_ghost144
0x0CB2	0x5043      	MOVF        _ghost_orientation, 0 
0x0CB4	0x1801      	XORWF       R1, 0 
L__move_ghost144:
0x0CB6	0xE022      	BZ          L_move_ghost23
0x0CB8	0xF000C02B  	MOVFF       _new_ghost_x, R0
0x0CBC	0xF001C02C  	MOVFF       _new_ghost_x+1, R1
0x0CC0	0x0E1E      	MOVLW       30
0x0CC2	0x6E04      	MOVWF       R4 
0x0CC4	0x0E00      	MOVLW       0
0x0CC6	0x6E05      	MOVWF       R5 
0x0CC8	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0CCC	0x0E74      	MOVLW       _world
0x0CCE	0x2400      	ADDWF       R0, 0 
0x0CD0	0x6E03      	MOVWF       R3 
0x0CD2	0x0E00      	MOVLW       hi_addr(_world)
0x0CD4	0x2001      	ADDWFC      R1, 0 
0x0CD6	0x6E04      	MOVWF       R4 
0x0CD8	0xF000C01C  	MOVFF       _new_ghost_y, R0
0x0CDC	0xF001C01D  	MOVFF       _new_ghost_y+1, R1
0x0CE0	0x3600      	RLCF        R0, 1 
0x0CE2	0x9000      	BCF         R0, 0 
0x0CE4	0x3601      	RLCF        R1, 1 
0x0CE6	0x5000      	MOVF        R0, 0 
0x0CE8	0x2403      	ADDWF       R3, 0 
0x0CEA	0x6EE9      	MOVWF       FSR0L 
0x0CEC	0x5001      	MOVF        R1, 0 
0x0CEE	0x2004      	ADDWFC      R4, 0 
0x0CF0	0x6EEA      	MOVWF       FSR0H 
0x0CF2	0xF000CFEE  	MOVFF       POSTINC0, R0
0x0CF6	0xF001CFEE  	MOVFF       POSTINC0, R1
0x0CFA	0xD004      	BRA         L_move_ghost24
L_move_ghost23:
0x0CFC	0x0E20      	MOVLW       32
0x0CFE	0x6E00      	MOVWF       R0 
0x0D00	0x0E00      	MOVLW       0
0x0D02	0x6E01      	MOVWF       R1 
L_move_ghost24:
0x0D04	0xF044C000  	MOVFF       R0, _old_ghost_obj
;compy.c,164 :: 		world[new_ghost_x][new_ghost_y] = ghost_orientation;
0x0D08	0xF000C02B  	MOVFF       _new_ghost_x, R0
0x0D0C	0xF001C02C  	MOVFF       _new_ghost_x+1, R1
0x0D10	0x0E1E      	MOVLW       30
0x0D12	0x6E04      	MOVWF       R4 
0x0D14	0x0E00      	MOVLW       0
0x0D16	0x6E05      	MOVWF       R5 
0x0D18	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0D1C	0x0E74      	MOVLW       _world
0x0D1E	0x2400      	ADDWF       R0, 0 
0x0D20	0x6E03      	MOVWF       R3 
0x0D22	0x0E00      	MOVLW       hi_addr(_world)
0x0D24	0x2001      	ADDWFC      R1, 0 
0x0D26	0x6E04      	MOVWF       R4 
0x0D28	0xF000C01C  	MOVFF       _new_ghost_y, R0
0x0D2C	0xF001C01D  	MOVFF       _new_ghost_y+1, R1
0x0D30	0x3600      	RLCF        R0, 1 
0x0D32	0x9000      	BCF         R0, 0 
0x0D34	0x3601      	RLCF        R1, 1 
0x0D36	0x5000      	MOVF        R0, 0 
0x0D38	0x2403      	ADDWF       R3, 0 
0x0D3A	0x6EE1      	MOVWF       FSR1L 
0x0D3C	0x5001      	MOVF        R1, 0 
0x0D3E	0x2004      	ADDWFC      R4, 0 
0x0D40	0x6EE2      	MOVWF       FSR1H 
0x0D42	0xFFE6C043  	MOVFF       _ghost_orientation, POSTINC1
0x0D46	0x0E00      	MOVLW       0
0x0D48	0x6EE6      	MOVWF       POSTINC1 
;compy.c,165 :: 		printCoordinate(new_ghost_x, new_ghost_y);
0x0D4A	0xF173C02B  	MOVFF       _new_ghost_x, FARG_printCoordinate_x
0x0D4E	0xF174C02C  	MOVFF       _new_ghost_x+1, FARG_printCoordinate_x+1
0x0D52	0xF175C01C  	MOVFF       _new_ghost_y, FARG_printCoordinate_y
0x0D56	0xF176C01D  	MOVFF       _new_ghost_y+1, FARG_printCoordinate_y+1
0x0D5A	0xF001EC9E  	CALL        _printCoordinate, 0
;compy.c,167 :: 		ghost_y = new_ghost_y;
0x0D5E	0xF01AC01C  	MOVFF       _new_ghost_y, _ghost_y
0x0D62	0xF01BC01D  	MOVFF       _new_ghost_y+1, _ghost_y+1
;compy.c,168 :: 		ghost_x = new_ghost_x;
0x0D66	0xF045C02B  	MOVFF       _new_ghost_x, _ghost_x
0x0D6A	0xF046C02C  	MOVFF       _new_ghost_x+1, _ghost_x+1
;compy.c,169 :: 		}
0x0D6E	0x0012      	RETURN      0
; end of _move_ghost
_Finish:
;compy.c,470 :: 		void Finish() {
;compy.c,471 :: 		for(i = 0; i < 15; ++i) {
0x0D70	0x6A4F      	CLRF        _i 
0x0D72	0x6A50      	CLRF        _i+1 
L_Finish116:
0x0D74	0x0E80      	MOVLW       128
0x0D76	0x1850      	XORWF       _i+1, 0 
0x0D78	0x6E00      	MOVWF       R0 
0x0D7A	0x0E80      	MOVLW       128
0x0D7C	0x5C00      	SUBWF       R0, 0 
0x0D7E	0xE102      	BNZ         L__Finish165
0x0D80	0x0E0F      	MOVLW       15
0x0D82	0x5C4F      	SUBWF       _i, 0 
L__Finish165:
0x0D84	0xE232      	BC          L_Finish117
;compy.c,472 :: 		for(j = 0; j < 8; ++j) {
0x0D86	0x6A4D      	CLRF        _j 
0x0D88	0x6A4E      	CLRF        _j+1 
L_Finish119:
0x0D8A	0x0E80      	MOVLW       128
0x0D8C	0x184E      	XORWF       _j+1, 0 
0x0D8E	0x6E00      	MOVWF       R0 
0x0D90	0x0E80      	MOVLW       128
0x0D92	0x5C00      	SUBWF       R0, 0 
0x0D94	0xE102      	BNZ         L__Finish166
0x0D96	0x0E08      	MOVLW       8
0x0D98	0x5C4D      	SUBWF       _j, 0 
L__Finish166:
0x0D9A	0xE224      	BC          L_Finish120
;compy.c,473 :: 		world[i][j] = ' ';
0x0D9C	0xF000C04F  	MOVFF       _i, R0
0x0DA0	0xF001C050  	MOVFF       _i+1, R1
0x0DA4	0x0E1E      	MOVLW       30
0x0DA6	0x6E04      	MOVWF       R4 
0x0DA8	0x0E00      	MOVLW       0
0x0DAA	0x6E05      	MOVWF       R5 
0x0DAC	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0DB0	0x0E74      	MOVLW       _world
0x0DB2	0x2400      	ADDWF       R0, 0 
0x0DB4	0x6E03      	MOVWF       R3 
0x0DB6	0x0E00      	MOVLW       hi_addr(_world)
0x0DB8	0x2001      	ADDWFC      R1, 0 
0x0DBA	0x6E04      	MOVWF       R4 
0x0DBC	0xF000C04D  	MOVFF       _j, R0
0x0DC0	0xF001C04E  	MOVFF       _j+1, R1
0x0DC4	0x3600      	RLCF        R0, 1 
0x0DC6	0x9000      	BCF         R0, 0 
0x0DC8	0x3601      	RLCF        R1, 1 
0x0DCA	0x5000      	MOVF        R0, 0 
0x0DCC	0x2403      	ADDWF       R3, 0 
0x0DCE	0x6EE1      	MOVWF       FSR1L 
0x0DD0	0x5001      	MOVF        R1, 0 
0x0DD2	0x2004      	ADDWFC      R4, 0 
0x0DD4	0x6EE2      	MOVWF       FSR1H 
0x0DD6	0x0E20      	MOVLW       32
0x0DD8	0x6EE6      	MOVWF       POSTINC1 
0x0DDA	0x0E00      	MOVLW       0
0x0DDC	0x6EE6      	MOVWF       POSTINC1 
;compy.c,472 :: 		for(j = 0; j < 8; ++j) {
0x0DDE	0x4A4D      	INFSNZ      _j, 1 
0x0DE0	0x2A4E      	INCF        _j+1, 1 
;compy.c,474 :: 		}
0x0DE2	0xD7D3      	BRA         L_Finish119
L_Finish120:
;compy.c,471 :: 		for(i = 0; i < 15; ++i) {
0x0DE4	0x4A4F      	INFSNZ      _i, 1 
0x0DE6	0x2A50      	INCF        _i+1, 1 
;compy.c,475 :: 		}
0x0DE8	0xD7C5      	BRA         L_Finish116
L_Finish117:
;compy.c,476 :: 		Print_World();
0x0DEA	0xF002EC83  	CALL        _Print_World, 0
;compy.c,477 :: 		if (IS_GAME_OVER) {
0x0DEE	0x5018      	MOVF        _IS_GAME_OVER, 0 
0x0DF0	0x1019      	IORWF       _IS_GAME_OVER+1, 0 
0x0DF2	0xE00C      	BZ          L_Finish122
;compy.c,478 :: 		print_text(2, 1, "Game over");
0x0DF4	0x0E02      	MOVLW       2
0x0DF6	0x0101      	MOVLB       1
0x0DF8	0x6F6C      	MOVWF       FARG_print_text_column, 1
0x0DFA	0x0E01      	MOVLW       1
0x0DFC	0x6F6D      	MOVWF       FARG_print_text_line, 1
0x0DFE	0x0E34      	MOVLW       ?lstr3_compy
0x0E00	0x6F6E      	MOVWF       FARG_print_text_text, 1
0x0E02	0x0E00      	MOVLW       hi_addr(?lstr3_compy)
0x0E04	0x6F6F      	MOVWF       FARG_print_text_text+1, 1
0x0E06	0xF002EC22  	CALL        _print_text, 0
;compy.c,479 :: 		} else {
0x0E0A	0xD00B      	BRA         L_Finish123
L_Finish122:
;compy.c,480 :: 		print_text(2, 1, "Win");
0x0E0C	0x0E02      	MOVLW       2
0x0E0E	0x0101      	MOVLB       1
0x0E10	0x6F6C      	MOVWF       FARG_print_text_column, 1
0x0E12	0x0E01      	MOVLW       1
0x0E14	0x6F6D      	MOVWF       FARG_print_text_line, 1
0x0E16	0x0E30      	MOVLW       ?lstr4_compy
0x0E18	0x6F6E      	MOVWF       FARG_print_text_text, 1
0x0E1A	0x0E00      	MOVLW       hi_addr(?lstr4_compy)
0x0E1C	0x6F6F      	MOVWF       FARG_print_text_text+1, 1
0x0E1E	0xF002EC22  	CALL        _print_text, 0
;compy.c,481 :: 		}
L_Finish123:
;compy.c,482 :: 		}
0x0E22	0x0012      	RETURN      0
; end of _Finish
_UART1_Write_Text:
;__Lib_UART_c67.c,67 :: 		
;__Lib_UART_c67.c,68 :: 		
0x0E24	0x0101      	MOVLB       1
0x0E26	0x6B6B      	CLRF        UART1_Write_Text_counter_L0, 1
;__Lib_UART_c67.c,70 :: 		
0x0E28	0xFFE9C168  	MOVFF       FARG_UART1_Write_Text_uart_text, FSR0L
0x0E2C	0xFFEAC169  	MOVFF       FARG_UART1_Write_Text_uart_text+1, FSR0H
0x0E30	0xF16ACFEE  	MOVFF       POSTINC0, UART1_Write_Text_data__L0
;__Lib_UART_c67.c,71 :: 		
L_UART1_Write_Text5:
0x0E34	0x516A      	MOVF        UART1_Write_Text_data__L0, 0, 1
0x0E36	0x0A00      	XORLW       0
0x0E38	0xE00F      	BZ          L_UART1_Write_Text6
;__Lib_UART_c67.c,72 :: 		
0x0E3A	0xF16CC16A  	MOVFF       UART1_Write_Text_data__L0, FARG_UART1_Write_data_
0x0E3E	0xF002EC6E  	CALL        _UART1_Write, 0
;__Lib_UART_c67.c,73 :: 		
0x0E42	0x0101      	MOVLB       1
0x0E44	0x2B6B      	INCF        UART1_Write_Text_counter_L0, 1, 1
;__Lib_UART_c67.c,74 :: 		
0x0E46	0x516B      	MOVF        UART1_Write_Text_counter_L0, 0, 1
0x0E48	0x2568      	ADDWF       FARG_UART1_Write_Text_uart_text, 0, 1
0x0E4A	0x6EE9      	MOVWF       FSR0L 
0x0E4C	0x0E00      	MOVLW       0
0x0E4E	0x2169      	ADDWFC      FARG_UART1_Write_Text_uart_text+1, 0, 1
0x0E50	0x6EEA      	MOVWF       FSR0H 
0x0E52	0xF16ACFEE  	MOVFF       POSTINC0, UART1_Write_Text_data__L0
;__Lib_UART_c67.c,75 :: 		
0x0E56	0xD7EE      	BRA         L_UART1_Write_Text5
L_UART1_Write_Text6:
;__Lib_UART_c67.c,76 :: 		
0x0E58	0x0012      	RETURN      0
; end of _UART1_Write_Text
_InitTimer2:
;compy.c,127 :: 		void InitTimer2(){
;compy.c,128 :: 		T2CON         = 0x3C;
0x0E5A	0x0E3C      	MOVLW       60
0x0E5C	0x6ECA      	MOVWF       T2CON 
;compy.c,129 :: 		TMR2IE_bit         = 1;
0x0E5E	0x829D      	BSF         TMR2IE_bit, 1 
;compy.c,130 :: 		PR2                 = 249;
0x0E60	0x0EF9      	MOVLW       249
0x0E62	0x6ECB      	MOVWF       PR2 
;compy.c,131 :: 		INTCON         = 0xD0;  //INTCON = 1100 0000 (HABILITA TMR2 INTERRUPT E INT0 INTERRUPT)
0x0E64	0x0ED0      	MOVLW       208
0x0E66	0x6EF2      	MOVWF       INTCON 
;compy.c,132 :: 		}
0x0E68	0x0012      	RETURN      0
; end of _InitTimer2
_Create_World:
;compy.c,318 :: 		void Create_World() {
;compy.c,319 :: 		for(i = 0; i < 15; ++i) {
0x0E6A	0x6A4F      	CLRF        _i 
0x0E6C	0x6A50      	CLRF        _i+1 
L_Create_World84:
0x0E6E	0x0E80      	MOVLW       128
0x0E70	0x1850      	XORWF       _i+1, 0 
0x0E72	0x6E00      	MOVWF       R0 
0x0E74	0x0E80      	MOVLW       128
0x0E76	0x5C00      	SUBWF       R0, 0 
0x0E78	0xE102      	BNZ         L__Create_World150
0x0E7A	0x0E0F      	MOVLW       15
0x0E7C	0x5C4F      	SUBWF       _i, 0 
L__Create_World150:
0x0E7E	0xE232      	BC          L_Create_World85
;compy.c,320 :: 		for(j = 0; j < 8 ; ++j)
0x0E80	0x6A4D      	CLRF        _j 
0x0E82	0x6A4E      	CLRF        _j+1 
L_Create_World87:
0x0E84	0x0E80      	MOVLW       128
0x0E86	0x184E      	XORWF       _j+1, 0 
0x0E88	0x6E00      	MOVWF       R0 
0x0E8A	0x0E80      	MOVLW       128
0x0E8C	0x5C00      	SUBWF       R0, 0 
0x0E8E	0xE102      	BNZ         L__Create_World151
0x0E90	0x0E08      	MOVLW       8
0x0E92	0x5C4D      	SUBWF       _j, 0 
L__Create_World151:
0x0E94	0xE224      	BC          L_Create_World88
;compy.c,322 :: 		world[i][j] = ' ';
0x0E96	0xF000C04F  	MOVFF       _i, R0
0x0E9A	0xF001C050  	MOVFF       _i+1, R1
0x0E9E	0x0E1E      	MOVLW       30
0x0EA0	0x6E04      	MOVWF       R4 
0x0EA2	0x0E00      	MOVLW       0
0x0EA4	0x6E05      	MOVWF       R5 
0x0EA6	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0EAA	0x0E74      	MOVLW       _world
0x0EAC	0x2400      	ADDWF       R0, 0 
0x0EAE	0x6E03      	MOVWF       R3 
0x0EB0	0x0E00      	MOVLW       hi_addr(_world)
0x0EB2	0x2001      	ADDWFC      R1, 0 
0x0EB4	0x6E04      	MOVWF       R4 
0x0EB6	0xF000C04D  	MOVFF       _j, R0
0x0EBA	0xF001C04E  	MOVFF       _j+1, R1
0x0EBE	0x3600      	RLCF        R0, 1 
0x0EC0	0x9000      	BCF         R0, 0 
0x0EC2	0x3601      	RLCF        R1, 1 
0x0EC4	0x5000      	MOVF        R0, 0 
0x0EC6	0x2403      	ADDWF       R3, 0 
0x0EC8	0x6EE1      	MOVWF       FSR1L 
0x0ECA	0x5001      	MOVF        R1, 0 
0x0ECC	0x2004      	ADDWFC      R4, 0 
0x0ECE	0x6EE2      	MOVWF       FSR1H 
0x0ED0	0x0E20      	MOVLW       32
0x0ED2	0x6EE6      	MOVWF       POSTINC1 
0x0ED4	0x0E00      	MOVLW       0
0x0ED6	0x6EE6      	MOVWF       POSTINC1 
;compy.c,320 :: 		for(j = 0; j < 8 ; ++j)
0x0ED8	0x4A4D      	INFSNZ      _j, 1 
0x0EDA	0x2A4E      	INCF        _j+1, 1 
;compy.c,323 :: 		}
0x0EDC	0xD7D3      	BRA         L_Create_World87
L_Create_World88:
;compy.c,319 :: 		for(i = 0; i < 15; ++i) {
0x0EDE	0x4A4F      	INFSNZ      _i, 1 
0x0EE0	0x2A50      	INCF        _i+1, 1 
;compy.c,324 :: 		}
0x0EE2	0xD7C5      	BRA         L_Create_World84
L_Create_World85:
;compy.c,326 :: 		world[4][myrand(rands * 5) & 0b000000000000000111] = barrier_orientation;
0x0EE4	0xF000C047  	MOVFF       _rands, R0
0x0EE8	0xF001C048  	MOVFF       _rands+1, R1
0x0EEC	0x0E05      	MOVLW       5
0x0EEE	0x6E04      	MOVWF       R4 
0x0EF0	0x0E00      	MOVLW       0
0x0EF2	0x6E05      	MOVWF       R5 
0x0EF4	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0EF8	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x0EFC	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x0F00	0xF002ECA9  	CALL        _myrand, 0
0x0F04	0x0E07      	MOVLW       7
0x0F06	0x1400      	ANDWF       R0, 0 
0x0F08	0x6E03      	MOVWF       R3 
0x0F0A	0xF004C001  	MOVFF       R1, R4
0x0F0E	0x0E00      	MOVLW       0
0x0F10	0x1604      	ANDWF       R4, 1 
0x0F12	0xF000C003  	MOVFF       R3, R0
0x0F16	0xF001C004  	MOVFF       R4, R1
0x0F1A	0x3600      	RLCF        R0, 1 
0x0F1C	0x9000      	BCF         R0, 0 
0x0F1E	0x3601      	RLCF        R1, 1 
0x0F20	0x0EEC      	MOVLW       _world+120
0x0F22	0x2400      	ADDWF       R0, 0 
0x0F24	0x6EE1      	MOVWF       FSR1L 
0x0F26	0x0E00      	MOVLW       hi_addr(_world+120)
0x0F28	0x2001      	ADDWFC      R1, 0 
0x0F2A	0x6EE2      	MOVWF       FSR1H 
0x0F2C	0xFFE6C017  	MOVFF       _barrier_orientation, POSTINC1
0x0F30	0x0E00      	MOVLW       0
0x0F32	0x6EE6      	MOVWF       POSTINC1 
;compy.c,327 :: 		world[myrand(rands * 1) & 0b000000000000000111][myrand(rands * 1) & 0b000000000000000111] = barrier_orientation;
0x0F34	0xF16CC047  	MOVFF       _rands, FARG_myrand_seed
0x0F38	0xF16DC048  	MOVFF       _rands+1, FARG_myrand_seed+1
0x0F3C	0xF002ECA9  	CALL        _myrand, 0
0x0F40	0x0E07      	MOVLW       7
0x0F42	0x1600      	ANDWF       R0, 1 
0x0F44	0x0E00      	MOVLW       0
0x0F46	0x1601      	ANDWF       R1, 1 
0x0F48	0x0E1E      	MOVLW       30
0x0F4A	0x6E04      	MOVWF       R4 
0x0F4C	0x0E00      	MOVLW       0
0x0F4E	0x6E05      	MOVWF       R5 
0x0F50	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0F54	0x0E74      	MOVLW       _world
0x0F56	0x2400      	ADDWF       R0, 0 
0x0F58	0x0101      	MOVLB       1
0x0F5A	0x6F68      	MOVWF       FLOC__Create_World, 1
0x0F5C	0x0E00      	MOVLW       hi_addr(_world)
0x0F5E	0x2001      	ADDWFC      R1, 0 
0x0F60	0x6F69      	MOVWF       FLOC__Create_World+1, 1
0x0F62	0xF16CC047  	MOVFF       _rands, FARG_myrand_seed
0x0F66	0xF16DC048  	MOVFF       _rands+1, FARG_myrand_seed+1
0x0F6A	0xF002ECA9  	CALL        _myrand, 0
0x0F6E	0x0E07      	MOVLW       7
0x0F70	0x1400      	ANDWF       R0, 0 
0x0F72	0x6E03      	MOVWF       R3 
0x0F74	0xF004C001  	MOVFF       R1, R4
0x0F78	0x0E00      	MOVLW       0
0x0F7A	0x1604      	ANDWF       R4, 1 
0x0F7C	0xF000C003  	MOVFF       R3, R0
0x0F80	0xF001C004  	MOVFF       R4, R1
0x0F84	0x3600      	RLCF        R0, 1 
0x0F86	0x9000      	BCF         R0, 0 
0x0F88	0x3601      	RLCF        R1, 1 
0x0F8A	0x5000      	MOVF        R0, 0 
0x0F8C	0x2568      	ADDWF       FLOC__Create_World, 0, 1
0x0F8E	0x6EE1      	MOVWF       FSR1L 
0x0F90	0x5001      	MOVF        R1, 0 
0x0F92	0x2169      	ADDWFC      FLOC__Create_World+1, 0, 1
0x0F94	0x6EE2      	MOVWF       FSR1H 
0x0F96	0xFFE6C017  	MOVFF       _barrier_orientation, POSTINC1
0x0F9A	0x0E00      	MOVLW       0
0x0F9C	0x6EE6      	MOVWF       POSTINC1 
;compy.c,328 :: 		world[myrand(rands * 26) & 0b000000000000000111][myrand(rands * 50) & 0b000000000000000111] = barrier_orientation;
0x0F9E	0xF000C047  	MOVFF       _rands, R0
0x0FA2	0xF001C048  	MOVFF       _rands+1, R1
0x0FA6	0x0E1A      	MOVLW       26
0x0FA8	0x6E04      	MOVWF       R4 
0x0FAA	0x0E00      	MOVLW       0
0x0FAC	0x6E05      	MOVWF       R5 
0x0FAE	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0FB2	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x0FB6	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x0FBA	0xF002ECA9  	CALL        _myrand, 0
0x0FBE	0x0E07      	MOVLW       7
0x0FC0	0x1600      	ANDWF       R0, 1 
0x0FC2	0x0E00      	MOVLW       0
0x0FC4	0x1601      	ANDWF       R1, 1 
0x0FC6	0x0E1E      	MOVLW       30
0x0FC8	0x6E04      	MOVWF       R4 
0x0FCA	0x0E00      	MOVLW       0
0x0FCC	0x6E05      	MOVWF       R5 
0x0FCE	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0FD2	0x0E74      	MOVLW       _world
0x0FD4	0x2400      	ADDWF       R0, 0 
0x0FD6	0x6F68      	MOVWF       FLOC__Create_World, 1
0x0FD8	0x0E00      	MOVLW       hi_addr(_world)
0x0FDA	0x2001      	ADDWFC      R1, 0 
0x0FDC	0x6F69      	MOVWF       FLOC__Create_World+1, 1
0x0FDE	0xF000C047  	MOVFF       _rands, R0
0x0FE2	0xF001C048  	MOVFF       _rands+1, R1
0x0FE6	0x0E32      	MOVLW       50
0x0FE8	0x6E04      	MOVWF       R4 
0x0FEA	0x0E00      	MOVLW       0
0x0FEC	0x6E05      	MOVWF       R5 
0x0FEE	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x0FF2	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x0FF6	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x0FFA	0xF002ECA9  	CALL        _myrand, 0
0x0FFE	0x0E07      	MOVLW       7
0x1000	0x1400      	ANDWF       R0, 0 
0x1002	0x6E03      	MOVWF       R3 
0x1004	0xF004C001  	MOVFF       R1, R4
0x1008	0x0E00      	MOVLW       0
0x100A	0x1604      	ANDWF       R4, 1 
0x100C	0xF000C003  	MOVFF       R3, R0
0x1010	0xF001C004  	MOVFF       R4, R1
0x1014	0x3600      	RLCF        R0, 1 
0x1016	0x9000      	BCF         R0, 0 
0x1018	0x3601      	RLCF        R1, 1 
0x101A	0x5000      	MOVF        R0, 0 
0x101C	0x2568      	ADDWF       FLOC__Create_World, 0, 1
0x101E	0x6EE1      	MOVWF       FSR1L 
0x1020	0x5001      	MOVF        R1, 0 
0x1022	0x2169      	ADDWFC      FLOC__Create_World+1, 0, 1
0x1024	0x6EE2      	MOVWF       FSR1H 
0x1026	0xFFE6C017  	MOVFF       _barrier_orientation, POSTINC1
0x102A	0x0E00      	MOVLW       0
0x102C	0x6EE6      	MOVWF       POSTINC1 
;compy.c,329 :: 		world[myrand(rands * 76) & 0b000000000000000111][myrand(rands * 985) & 0b000000000000000111] = barrier_orientation;
0x102E	0xF000C047  	MOVFF       _rands, R0
0x1032	0xF001C048  	MOVFF       _rands+1, R1
0x1036	0x0E4C      	MOVLW       76
0x1038	0x6E04      	MOVWF       R4 
0x103A	0x0E00      	MOVLW       0
0x103C	0x6E05      	MOVWF       R5 
0x103E	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x1042	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x1046	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x104A	0xF002ECA9  	CALL        _myrand, 0
0x104E	0x0E07      	MOVLW       7
0x1050	0x1600      	ANDWF       R0, 1 
0x1052	0x0E00      	MOVLW       0
0x1054	0x1601      	ANDWF       R1, 1 
0x1056	0x0E1E      	MOVLW       30
0x1058	0x6E04      	MOVWF       R4 
0x105A	0x0E00      	MOVLW       0
0x105C	0x6E05      	MOVWF       R5 
0x105E	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x1062	0x0E74      	MOVLW       _world
0x1064	0x2400      	ADDWF       R0, 0 
0x1066	0x6F68      	MOVWF       FLOC__Create_World, 1
0x1068	0x0E00      	MOVLW       hi_addr(_world)
0x106A	0x2001      	ADDWFC      R1, 0 
0x106C	0x6F69      	MOVWF       FLOC__Create_World+1, 1
0x106E	0xF000C047  	MOVFF       _rands, R0
0x1072	0xF001C048  	MOVFF       _rands+1, R1
0x1076	0x0ED9      	MOVLW       217
0x1078	0x6E04      	MOVWF       R4 
0x107A	0x0E03      	MOVLW       3
0x107C	0x6E05      	MOVWF       R5 
0x107E	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x1082	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x1086	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x108A	0xF002ECA9  	CALL        _myrand, 0
0x108E	0x0E07      	MOVLW       7
0x1090	0x1400      	ANDWF       R0, 0 
0x1092	0x6E03      	MOVWF       R3 
0x1094	0xF004C001  	MOVFF       R1, R4
0x1098	0x0E00      	MOVLW       0
0x109A	0x1604      	ANDWF       R4, 1 
0x109C	0xF000C003  	MOVFF       R3, R0
0x10A0	0xF001C004  	MOVFF       R4, R1
0x10A4	0x3600      	RLCF        R0, 1 
0x10A6	0x9000      	BCF         R0, 0 
0x10A8	0x3601      	RLCF        R1, 1 
0x10AA	0x5000      	MOVF        R0, 0 
0x10AC	0x2568      	ADDWF       FLOC__Create_World, 0, 1
0x10AE	0x6EE1      	MOVWF       FSR1L 
0x10B0	0x5001      	MOVF        R1, 0 
0x10B2	0x2169      	ADDWFC      FLOC__Create_World+1, 0, 1
0x10B4	0x6EE2      	MOVWF       FSR1H 
0x10B6	0xFFE6C017  	MOVFF       _barrier_orientation, POSTINC1
0x10BA	0x0E00      	MOVLW       0
0x10BC	0x6EE6      	MOVWF       POSTINC1 
;compy.c,331 :: 		world[myrand(rands * 500)& 0b000000000000000111][myrand(rands * 12)& 0b000000000000000111] = food_orientation;
0x10BE	0xF000C047  	MOVFF       _rands, R0
0x10C2	0xF001C048  	MOVFF       _rands+1, R1
0x10C6	0x0EF4      	MOVLW       244
0x10C8	0x6E04      	MOVWF       R4 
0x10CA	0x0E01      	MOVLW       1
0x10CC	0x6E05      	MOVWF       R5 
0x10CE	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x10D2	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x10D6	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x10DA	0xF002ECA9  	CALL        _myrand, 0
0x10DE	0x0E07      	MOVLW       7
0x10E0	0x1600      	ANDWF       R0, 1 
0x10E2	0x0E00      	MOVLW       0
0x10E4	0x1601      	ANDWF       R1, 1 
0x10E6	0x0E1E      	MOVLW       30
0x10E8	0x6E04      	MOVWF       R4 
0x10EA	0x0E00      	MOVLW       0
0x10EC	0x6E05      	MOVWF       R5 
0x10EE	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x10F2	0x0E74      	MOVLW       _world
0x10F4	0x2400      	ADDWF       R0, 0 
0x10F6	0x6F68      	MOVWF       FLOC__Create_World, 1
0x10F8	0x0E00      	MOVLW       hi_addr(_world)
0x10FA	0x2001      	ADDWFC      R1, 0 
0x10FC	0x6F69      	MOVWF       FLOC__Create_World+1, 1
0x10FE	0xF000C047  	MOVFF       _rands, R0
0x1102	0xF001C048  	MOVFF       _rands+1, R1
0x1106	0x0E0C      	MOVLW       12
0x1108	0x6E04      	MOVWF       R4 
0x110A	0x0E00      	MOVLW       0
0x110C	0x6E05      	MOVWF       R5 
0x110E	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x1112	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x1116	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x111A	0xF002ECA9  	CALL        _myrand, 0
0x111E	0x0E07      	MOVLW       7
0x1120	0x1400      	ANDWF       R0, 0 
0x1122	0x6E03      	MOVWF       R3 
0x1124	0xF004C001  	MOVFF       R1, R4
0x1128	0x0E00      	MOVLW       0
0x112A	0x1604      	ANDWF       R4, 1 
0x112C	0xF000C003  	MOVFF       R3, R0
0x1130	0xF001C004  	MOVFF       R4, R1
0x1134	0x3600      	RLCF        R0, 1 
0x1136	0x9000      	BCF         R0, 0 
0x1138	0x3601      	RLCF        R1, 1 
0x113A	0x5000      	MOVF        R0, 0 
0x113C	0x2568      	ADDWF       FLOC__Create_World, 0, 1
0x113E	0x6EE1      	MOVWF       FSR1L 
0x1140	0x5001      	MOVF        R1, 0 
0x1142	0x2169      	ADDWFC      FLOC__Create_World+1, 0, 1
0x1144	0x6EE2      	MOVWF       FSR1H 
0x1146	0xFFE6C016  	MOVFF       _food_orientation, POSTINC1
0x114A	0x0E00      	MOVLW       0
0x114C	0x6EE6      	MOVWF       POSTINC1 
;compy.c,332 :: 		world[myrand(rands * 1)& 0b000000000000000111][myrand(rands * 85)& 0b000000000000000111] = food_orientation;
0x114E	0xF16CC047  	MOVFF       _rands, FARG_myrand_seed
0x1152	0xF16DC048  	MOVFF       _rands+1, FARG_myrand_seed+1
0x1156	0xF002ECA9  	CALL        _myrand, 0
0x115A	0x0E07      	MOVLW       7
0x115C	0x1600      	ANDWF       R0, 1 
0x115E	0x0E00      	MOVLW       0
0x1160	0x1601      	ANDWF       R1, 1 
0x1162	0x0E1E      	MOVLW       30
0x1164	0x6E04      	MOVWF       R4 
0x1166	0x0E00      	MOVLW       0
0x1168	0x6E05      	MOVWF       R5 
0x116A	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x116E	0x0E74      	MOVLW       _world
0x1170	0x2400      	ADDWF       R0, 0 
0x1172	0x6F68      	MOVWF       FLOC__Create_World, 1
0x1174	0x0E00      	MOVLW       hi_addr(_world)
0x1176	0x2001      	ADDWFC      R1, 0 
0x1178	0x6F69      	MOVWF       FLOC__Create_World+1, 1
0x117A	0xF000C047  	MOVFF       _rands, R0
0x117E	0xF001C048  	MOVFF       _rands+1, R1
0x1182	0x0E55      	MOVLW       85
0x1184	0x6E04      	MOVWF       R4 
0x1186	0x0E00      	MOVLW       0
0x1188	0x6E05      	MOVWF       R5 
0x118A	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x118E	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x1192	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x1196	0xF002ECA9  	CALL        _myrand, 0
0x119A	0x0E07      	MOVLW       7
0x119C	0x1400      	ANDWF       R0, 0 
0x119E	0x6E03      	MOVWF       R3 
0x11A0	0xF004C001  	MOVFF       R1, R4
0x11A4	0x0E00      	MOVLW       0
0x11A6	0x1604      	ANDWF       R4, 1 
0x11A8	0xF000C003  	MOVFF       R3, R0
0x11AC	0xF001C004  	MOVFF       R4, R1
0x11B0	0x3600      	RLCF        R0, 1 
0x11B2	0x9000      	BCF         R0, 0 
0x11B4	0x3601      	RLCF        R1, 1 
0x11B6	0x5000      	MOVF        R0, 0 
0x11B8	0x2568      	ADDWF       FLOC__Create_World, 0, 1
0x11BA	0x6EE1      	MOVWF       FSR1L 
0x11BC	0x5001      	MOVF        R1, 0 
0x11BE	0x2169      	ADDWFC      FLOC__Create_World+1, 0, 1
0x11C0	0x6EE2      	MOVWF       FSR1H 
0x11C2	0xFFE6C016  	MOVFF       _food_orientation, POSTINC1
0x11C6	0x0E00      	MOVLW       0
0x11C8	0x6EE6      	MOVWF       POSTINC1 
;compy.c,333 :: 		world[myrand(rands * 63)& 0b000000000000000111][myrand(rands * 552)& 0b000000000000000111] = food_orientation;
0x11CA	0xF000C047  	MOVFF       _rands, R0
0x11CE	0xF001C048  	MOVFF       _rands+1, R1
0x11D2	0x0E3F      	MOVLW       63
0x11D4	0x6E04      	MOVWF       R4 
0x11D6	0x0E00      	MOVLW       0
0x11D8	0x6E05      	MOVWF       R5 
0x11DA	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x11DE	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x11E2	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x11E6	0xF002ECA9  	CALL        _myrand, 0
0x11EA	0x0E07      	MOVLW       7
0x11EC	0x1600      	ANDWF       R0, 1 
0x11EE	0x0E00      	MOVLW       0
0x11F0	0x1601      	ANDWF       R1, 1 
0x11F2	0x0E1E      	MOVLW       30
0x11F4	0x6E04      	MOVWF       R4 
0x11F6	0x0E00      	MOVLW       0
0x11F8	0x6E05      	MOVWF       R5 
0x11FA	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x11FE	0x0E74      	MOVLW       _world
0x1200	0x2400      	ADDWF       R0, 0 
0x1202	0x6F68      	MOVWF       FLOC__Create_World, 1
0x1204	0x0E00      	MOVLW       hi_addr(_world)
0x1206	0x2001      	ADDWFC      R1, 0 
0x1208	0x6F69      	MOVWF       FLOC__Create_World+1, 1
0x120A	0xF000C047  	MOVFF       _rands, R0
0x120E	0xF001C048  	MOVFF       _rands+1, R1
0x1212	0x0E28      	MOVLW       40
0x1214	0x6E04      	MOVWF       R4 
0x1216	0x0E02      	MOVLW       2
0x1218	0x6E05      	MOVWF       R5 
0x121A	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x121E	0xF16CC000  	MOVFF       R0, FARG_myrand_seed
0x1222	0xF16DC001  	MOVFF       R1, FARG_myrand_seed+1
0x1226	0xF002ECA9  	CALL        _myrand, 0
0x122A	0x0E07      	MOVLW       7
0x122C	0x1400      	ANDWF       R0, 0 
0x122E	0x6E03      	MOVWF       R3 
0x1230	0xF004C001  	MOVFF       R1, R4
0x1234	0x0E00      	MOVLW       0
0x1236	0x1604      	ANDWF       R4, 1 
0x1238	0xF000C003  	MOVFF       R3, R0
0x123C	0xF001C004  	MOVFF       R4, R1
0x1240	0x3600      	RLCF        R0, 1 
0x1242	0x9000      	BCF         R0, 0 
0x1244	0x3601      	RLCF        R1, 1 
0x1246	0x5000      	MOVF        R0, 0 
0x1248	0x2568      	ADDWF       FLOC__Create_World, 0, 1
0x124A	0x6EE1      	MOVWF       FSR1L 
0x124C	0x5001      	MOVF        R1, 0 
0x124E	0x2169      	ADDWFC      FLOC__Create_World+1, 0, 1
0x1250	0x6EE2      	MOVWF       FSR1H 
0x1252	0xFFE6C016  	MOVFF       _food_orientation, POSTINC1
0x1256	0x0E00      	MOVLW       0
0x1258	0x6EE6      	MOVWF       POSTINC1 
;compy.c,335 :: 		world[11][5] = food_orientation;
0x125A	0xF1C8C016  	MOVFF       _food_orientation, _world+340
0x125E	0x0E00      	MOVLW       0
0x1260	0x6FC9      	MOVWF       _world+341, 1
;compy.c,336 :: 		world[5][3] = food_orientation;
0x1262	0xF110C016  	MOVFF       _food_orientation, _world+156
0x1266	0x0E00      	MOVLW       0
0x1268	0x6F11      	MOVWF       _world+157, 1
;compy.c,337 :: 		world[8][2] = food_orientation;
0x126A	0xF168C016  	MOVFF       _food_orientation, _world+244
0x126E	0x0E00      	MOVLW       0
0x1270	0x6F69      	MOVWF       _world+245, 1
;compy.c,338 :: 		world[7][7] = food_orientation;
0x1272	0xF154C016  	MOVFF       _food_orientation, _world+224
0x1276	0x0E00      	MOVLW       0
0x1278	0x6F55      	MOVWF       _world+225, 1
;compy.c,340 :: 		if (world[ghost_x][ghost_y] == food_orientation) {
0x127A	0xF000C045  	MOVFF       _ghost_x, R0
0x127E	0xF001C046  	MOVFF       _ghost_x+1, R1
0x1282	0x0E1E      	MOVLW       30
0x1284	0x6E04      	MOVWF       R4 
0x1286	0x0E00      	MOVLW       0
0x1288	0x6E05      	MOVWF       R5 
0x128A	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x128E	0x0E74      	MOVLW       _world
0x1290	0x2400      	ADDWF       R0, 0 
0x1292	0x6E03      	MOVWF       R3 
0x1294	0x0E00      	MOVLW       hi_addr(_world)
0x1296	0x2001      	ADDWFC      R1, 0 
0x1298	0x6E04      	MOVWF       R4 
0x129A	0xF000C01A  	MOVFF       _ghost_y, R0
0x129E	0xF001C01B  	MOVFF       _ghost_y+1, R1
0x12A2	0x3600      	RLCF        R0, 1 
0x12A4	0x9000      	BCF         R0, 0 
0x12A6	0x3601      	RLCF        R1, 1 
0x12A8	0x5000      	MOVF        R0, 0 
0x12AA	0x2403      	ADDWF       R3, 0 
0x12AC	0x6EE9      	MOVWF       FSR0L 
0x12AE	0x5001      	MOVF        R1, 0 
0x12B0	0x2004      	ADDWFC      R4, 0 
0x12B2	0x6EEA      	MOVWF       FSR0H 
0x12B4	0xF001CFEE  	MOVFF       POSTINC0, R1
0x12B8	0xF002CFEE  	MOVFF       POSTINC0, R2
0x12BC	0x0E00      	MOVLW       0
0x12BE	0x1802      	XORWF       R2, 0 
0x12C0	0xE102      	BNZ         L__Create_World152
0x12C2	0x5016      	MOVF        _food_orientation, 0 
0x12C4	0x1801      	XORWF       R1, 0 
L__Create_World152:
0x12C6	0xE104      	BNZ         L_Create_World90
;compy.c,341 :: 		--QTD_FOOD;
0x12C8	0x0E01      	MOVLW       1
0x12CA	0x5E27      	SUBWF       _QTD_FOOD, 1 
0x12CC	0x0E00      	MOVLW       0
0x12CE	0x5A28      	SUBWFB      _QTD_FOOD+1, 1 
;compy.c,342 :: 		}
L_Create_World90:
;compy.c,343 :: 		if (world[pacman_x][pacman_y] == food_orientation){
0x12D0	0xF000C023  	MOVFF       _pacman_x, R0
0x12D4	0xF001C024  	MOVFF       _pacman_x+1, R1
0x12D8	0x0E1E      	MOVLW       30
0x12DA	0x6E04      	MOVWF       R4 
0x12DC	0x0E00      	MOVLW       0
0x12DE	0x6E05      	MOVWF       R5 
0x12E0	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x12E4	0x0E74      	MOVLW       _world
0x12E6	0x2400      	ADDWF       R0, 0 
0x12E8	0x6E03      	MOVWF       R3 
0x12EA	0x0E00      	MOVLW       hi_addr(_world)
0x12EC	0x2001      	ADDWFC      R1, 0 
0x12EE	0x6E04      	MOVWF       R4 
0x12F0	0xF000C01F  	MOVFF       _pacman_y, R0
0x12F4	0xF001C020  	MOVFF       _pacman_y+1, R1
0x12F8	0x3600      	RLCF        R0, 1 
0x12FA	0x9000      	BCF         R0, 0 
0x12FC	0x3601      	RLCF        R1, 1 
0x12FE	0x5000      	MOVF        R0, 0 
0x1300	0x2403      	ADDWF       R3, 0 
0x1302	0x6EE9      	MOVWF       FSR0L 
0x1304	0x5001      	MOVF        R1, 0 
0x1306	0x2004      	ADDWFC      R4, 0 
0x1308	0x6EEA      	MOVWF       FSR0H 
0x130A	0xF001CFEE  	MOVFF       POSTINC0, R1
0x130E	0xF002CFEE  	MOVFF       POSTINC0, R2
0x1312	0x0E00      	MOVLW       0
0x1314	0x1802      	XORWF       R2, 0 
0x1316	0xE102      	BNZ         L__Create_World153
0x1318	0x5016      	MOVF        _food_orientation, 0 
0x131A	0x1801      	XORWF       R1, 0 
L__Create_World153:
0x131C	0xE104      	BNZ         L_Create_World91
;compy.c,344 :: 		--QTD_FOOD;
0x131E	0x0E01      	MOVLW       1
0x1320	0x5E27      	SUBWF       _QTD_FOOD, 1 
0x1322	0x0E00      	MOVLW       0
0x1324	0x5A28      	SUBWFB      _QTD_FOOD+1, 1 
;compy.c,345 :: 		}
L_Create_World91:
;compy.c,346 :: 		world[ghost_x][ghost_y] = ghost_orientation;
0x1326	0xF000C045  	MOVFF       _ghost_x, R0
0x132A	0xF001C046  	MOVFF       _ghost_x+1, R1
0x132E	0x0E1E      	MOVLW       30
0x1330	0x6E04      	MOVWF       R4 
0x1332	0x0E00      	MOVLW       0
0x1334	0x6E05      	MOVWF       R5 
0x1336	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x133A	0x0E74      	MOVLW       _world
0x133C	0x2400      	ADDWF       R0, 0 
0x133E	0x6E03      	MOVWF       R3 
0x1340	0x0E00      	MOVLW       hi_addr(_world)
0x1342	0x2001      	ADDWFC      R1, 0 
0x1344	0x6E04      	MOVWF       R4 
0x1346	0xF000C01A  	MOVFF       _ghost_y, R0
0x134A	0xF001C01B  	MOVFF       _ghost_y+1, R1
0x134E	0x3600      	RLCF        R0, 1 
0x1350	0x9000      	BCF         R0, 0 
0x1352	0x3601      	RLCF        R1, 1 
0x1354	0x5000      	MOVF        R0, 0 
0x1356	0x2403      	ADDWF       R3, 0 
0x1358	0x6EE1      	MOVWF       FSR1L 
0x135A	0x5001      	MOVF        R1, 0 
0x135C	0x2004      	ADDWFC      R4, 0 
0x135E	0x6EE2      	MOVWF       FSR1H 
0x1360	0xFFE6C043  	MOVFF       _ghost_orientation, POSTINC1
0x1364	0x0E00      	MOVLW       0
0x1366	0x6EE6      	MOVWF       POSTINC1 
;compy.c,347 :: 		world[pacman_x][pacman_y] = (char) pacman_orientation;
0x1368	0xF000C023  	MOVFF       _pacman_x, R0
0x136C	0xF001C024  	MOVFF       _pacman_x+1, R1
0x1370	0x0E1E      	MOVLW       30
0x1372	0x6E04      	MOVWF       R4 
0x1374	0x0E00      	MOVLW       0
0x1376	0x6E05      	MOVWF       R5 
0x1378	0xF000EC74  	CALL        _Mul_16x16_U, 0
0x137C	0x0E74      	MOVLW       _world
0x137E	0x2400      	ADDWF       R0, 0 
0x1380	0x6E03      	MOVWF       R3 
0x1382	0x0E00      	MOVLW       hi_addr(_world)
0x1384	0x2001      	ADDWFC      R1, 0 
0x1386	0x6E04      	MOVWF       R4 
0x1388	0xF000C01F  	MOVFF       _pacman_y, R0
0x138C	0xF001C020  	MOVFF       _pacman_y+1, R1
0x1390	0x3600      	RLCF        R0, 1 
0x1392	0x9000      	BCF         R0, 0 
0x1394	0x3601      	RLCF        R1, 1 
0x1396	0x5000      	MOVF        R0, 0 
0x1398	0x2403      	ADDWF       R3, 0 
0x139A	0x6EE1      	MOVWF       FSR1L 
0x139C	0x5001      	MOVF        R1, 0 
0x139E	0x2004      	ADDWFC      R4, 0 
0x13A0	0x6EE2      	MOVWF       FSR1H 
0x13A2	0xFFE6C01E  	MOVFF       _pacman_orientation, POSTINC1
0x13A6	0x0E00      	MOVLW       0
0x13A8	0x6EE6      	MOVWF       POSTINC1 
;compy.c,349 :: 		Print_World();
0x13AA	0xF002EC83  	CALL        _Print_World, 0
;compy.c,350 :: 		}
0x13AE	0x0012      	RETURN      0
; end of _Create_World
_main:
0x13B0	0xF00AECF1  	CALL        5602, 0
;compy.c,493 :: 		void main() {           // General purpose register
;compy.c,494 :: 		UART1_Init(19200);
0x13B4	0x0E19      	MOVLW       25
0x13B6	0x6EAF      	MOVWF       SPBRG 
0x13B8	0x84AC      	BSF         TXSTA, 2, 0
0x13BA	0xF004EC21  	CALL        _UART1_Init, 0
;compy.c,495 :: 		I2C1_Init(100000);
0x13BE	0x0E14      	MOVLW       20
0x13C0	0x6EC8      	MOVWF       SSPADD 
0x13C2	0xF004EC4C  	CALL        _I2C1_Init, 0
;compy.c,496 :: 		ADCON1 = 0B00001110;
0x13C6	0x0E0E      	MOVLW       14
0x13C8	0x6EC1      	MOVWF       ADCON1 
;compy.c,497 :: 		TRISB = 0B00001111;
0x13CA	0x0E0F      	MOVLW       15
0x13CC	0x6E93      	MOVWF       TRISB 
;compy.c,498 :: 		TRISA = 0B00100001;
0x13CE	0x0E21      	MOVLW       33
0x13D0	0x6E92      	MOVWF       TRISA 
;compy.c,501 :: 		TRISA3_bit = 1;               // Set RA3 as input
0x13D2	0x8692      	BSF         TRISA3_bit, 3 
;compy.c,502 :: 		TRISA4_bit = 1;               // Set RA4 as input
0x13D4	0x8892      	BSF         TRISA4_bit, 4 
;compy.c,506 :: 		T6963C_init(240, 128, 8);
0x13D6	0x0EF0      	MOVLW       240
0x13D8	0x0101      	MOVLB       1
0x13DA	0x6F68      	MOVWF       FARG_T6963C_init_width, 1
0x13DC	0x0E00      	MOVLW       0
0x13DE	0x6F69      	MOVWF       FARG_T6963C_init_width+1, 1
0x13E0	0x0E80      	MOVLW       128
0x13E2	0x6F6A      	MOVWF       FARG_T6963C_init_height, 1
0x13E4	0x0E08      	MOVLW       8
0x13E6	0x6F6B      	MOVWF       FARG_T6963C_init_fntW, 1
0x13E8	0xF003EC94  	CALL        _T6963C_init, 0
;compy.c,511 :: 		T6963C_graphics(1);
0x13EC	0x865B      	BSF         _T6963C_display, 3 
0x13EE	0xF18EC05B  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x13F2	0xF000EC4F  	CALL        _T6963C_writeCommand, 0
;compy.c,512 :: 		T6963C_text(1);
0x13F6	0x845B      	BSF         _T6963C_display, 2 
0x13F8	0xF18EC05B  	MOVFF       _T6963C_display, FARG_T6963C_writeCommand_mydata
0x13FC	0xF000EC4F  	CALL        _T6963C_writeCommand, 0
;compy.c,514 :: 		InitTimer2();
0x1400	0xDD2C      	RCALL       _InitTimer2
;compy.c,517 :: 		Create_World();
0x1402	0xDD33      	RCALL       _Create_World
;compy.c,519 :: 		while (1) {
L_main124:
;compy.c,520 :: 		if (IS_FINISH) {
0x1404	0x5025      	MOVF        _IS_FINISH, 0 
0x1406	0x1026      	IORWF       _IS_FINISH+1, 0 
0x1408	0xE001      	BZ          L_main126
;compy.c,521 :: 		break;
0x140A	0xD048      	BRA         L_main125
;compy.c,522 :: 		}
L_main126:
;compy.c,524 :: 		if (pacman_x == ghost_x && pacman_y == ghost_y) {
0x140C	0x5024      	MOVF        _pacman_x+1, 0 
0x140E	0x1846      	XORWF       _ghost_x+1, 0 
0x1410	0xE102      	BNZ         L__main167
0x1412	0x5045      	MOVF        _ghost_x, 0 
0x1414	0x1823      	XORWF       _pacman_x, 0 
L__main167:
0x1416	0xE10E      	BNZ         L_main129
0x1418	0x5020      	MOVF        _pacman_y+1, 0 
0x141A	0x181B      	XORWF       _ghost_y+1, 0 
0x141C	0xE102      	BNZ         L__main168
0x141E	0x501A      	MOVF        _ghost_y, 0 
0x1420	0x181F      	XORWF       _pacman_y, 0 
L__main168:
0x1422	0xE108      	BNZ         L_main129
L__main138:
;compy.c,525 :: 		IS_FINISH = 1;
0x1424	0x0E01      	MOVLW       1
0x1426	0x6E25      	MOVWF       _IS_FINISH 
0x1428	0x0E00      	MOVLW       0
0x142A	0x6E26      	MOVWF       _IS_FINISH+1 
;compy.c,526 :: 		IS_GAME_OVER = 1;
0x142C	0x0E01      	MOVLW       1
0x142E	0x6E18      	MOVWF       _IS_GAME_OVER 
0x1430	0x0E00      	MOVLW       0
0x1432	0x6E19      	MOVWF       _IS_GAME_OVER+1 
;compy.c,527 :: 		}
L_main129:
;compy.c,529 :: 		command = Le_Teclado();
0x1434	0xF003EC09  	CALL        _Le_Teclado, 0
0x1438	0xF02FC000  	MOVFF       R0, _command
;compy.c,530 :: 		if (command == '8') {
0x143C	0x5000      	MOVF        R0, 0 
0x143E	0x0A38      	XORLW       56
0x1440	0xE105      	BNZ         L_main130
;compy.c,531 :: 		update_pacman(0);
0x1442	0x0101      	MOVLB       1
0x1444	0x6B68      	CLRF        FARG_update_pacman_direction, 1
0x1446	0xF004EC57  	CALL        _update_pacman, 0
;compy.c,532 :: 		} else if (command == '6') {
0x144A	0xD01A      	BRA         L_main131
L_main130:
0x144C	0x502F      	MOVF        _command, 0 
0x144E	0x0A36      	XORLW       54
0x1450	0xE106      	BNZ         L_main132
;compy.c,533 :: 		update_pacman(1);
0x1452	0x0E01      	MOVLW       1
0x1454	0x0101      	MOVLB       1
0x1456	0x6F68      	MOVWF       FARG_update_pacman_direction, 1
0x1458	0xF004EC57  	CALL        _update_pacman, 0
;compy.c,534 :: 		} else if (command == '2') {
0x145C	0xD011      	BRA         L_main133
L_main132:
0x145E	0x502F      	MOVF        _command, 0 
0x1460	0x0A32      	XORLW       50
0x1462	0xE106      	BNZ         L_main134
;compy.c,535 :: 		update_pacman(2);
0x1464	0x0E02      	MOVLW       2
0x1466	0x0101      	MOVLB       1
0x1468	0x6F68      	MOVWF       FARG_update_pacman_direction, 1
0x146A	0xF004EC57  	CALL        _update_pacman, 0
;compy.c,536 :: 		} else if (command == '4') {
0x146E	0xD008      	BRA         L_main135
L_main134:
0x1470	0x502F      	MOVF        _command, 0 
0x1472	0x0A34      	XORLW       52
0x1474	0xE105      	BNZ         L_main136
;compy.c,537 :: 		update_pacman(3);
0x1476	0x0E03      	MOVLW       3
0x1478	0x0101      	MOVLB       1
0x147A	0x6F68      	MOVWF       FARG_update_pacman_direction, 1
0x147C	0xF004EC57  	CALL        _update_pacman, 0
;compy.c,538 :: 		}
L_main136:
L_main135:
L_main133:
L_main131:
;compy.c,540 :: 		if (move_ghost_bool) {
0x1480	0x502D      	MOVF        _move_ghost_bool, 0 
0x1482	0x102E      	IORWF       _move_ghost_bool+1, 0 
0x1484	0xE00A      	BZ          L_main137
;compy.c,541 :: 		move_ghost_bool = 0;
0x1486	0x6A2D      	CLRF        _move_ghost_bool 
0x1488	0x6A2E      	CLRF        _move_ghost_bool+1 
;compy.c,542 :: 		UART1_Write_Text("UART");
0x148A	0x0E3E      	MOVLW       ?lstr5_compy
0x148C	0x0101      	MOVLB       1
0x148E	0x6F68      	MOVWF       FARG_UART1_Write_Text_uart_text, 1
0x1490	0x0E00      	MOVLW       hi_addr(?lstr5_compy)
0x1492	0x6F69      	MOVWF       FARG_UART1_Write_Text_uart_text+1, 1
0x1494	0xDCC7      	RCALL       _UART1_Write_Text
;compy.c,543 :: 		move_ghost();
0x1496	0xF005EC8A  	CALL        _move_ghost, 0
;compy.c,544 :: 		}
L_main137:
;compy.c,545 :: 		}
0x149A	0xD7B4      	BRA         L_main124
L_main125:
;compy.c,546 :: 		Finish();
0x149C	0xDC69      	RCALL       _Finish
;compy.c,548 :: 		}
0x149E	0xD7FF      	BRA         $+0
; end of _main
0x15E2	0xF016EE10  	LFSR        1, 22
0x15E6	0x0E41      	MOVLW       65
0x15E8	0x6E00      	MOVWF       R0 
0x15EA	0x0E01      	MOVLW       1
0x15EC	0x6E01      	MOVWF       R1 
0x15EE	0x0EA0      	MOVLW       160
0x15F0	0x6EF6      	MOVWF       4086 
0x15F2	0x0E14      	MOVLW       20
0x15F4	0x6EF7      	MOVWF       TBLPTRH 
0x15F6	0x0E00      	MOVLW       0
0x15F8	0x6EF8      	MOVWF       TBLPTRU 
0x15FA	0xF004EC19  	CALL        2098, 0
0x15FE	0x0012      	RETURN      0
;compy.c,0 :: ?ICS_food_orientation
0x14A0	0x05 ;?ICS_food_orientation+0
; end of ?ICS_food_orientation
;compy.c,0 :: ?ICS_barrier_orientation
0x14A1	0x04 ;?ICS_barrier_orientation+0
; end of ?ICS_barrier_orientation
;compy.c,0 :: ?ICS_IS_GAME_OVER
0x14A2	0x0000 ;?ICS_IS_GAME_OVER+0
; end of ?ICS_IS_GAME_OVER
;compy.c,0 :: ?ICS_ghost_y
0x14A4	0x0000 ;?ICS_ghost_y+0
; end of ?ICS_ghost_y
;compy.c,0 :: ?ICS_new_ghost_y
0x14A6	0x0000 ;?ICS_new_ghost_y+0
; end of ?ICS_new_ghost_y
;compy.c,0 :: ?ICS_pacman_orientation
0x14A8	0x01 ;?ICS_pacman_orientation+0
; end of ?ICS_pacman_orientation
;compy.c,0 :: ?ICS_pacman_y
0x14A9	0x0000 ;?ICS_pacman_y+0
; end of ?ICS_pacman_y
;compy.c,0 :: ?ICS_newPacman_y
0x14AB	0x0000 ;?ICS_newPacman_y+0
; end of ?ICS_newPacman_y
;compy.c,0 :: ?ICS_pacman_x
0x14AD	0x0000 ;?ICS_pacman_x+0
; end of ?ICS_pacman_x
;compy.c,0 :: ?ICS_IS_FINISH
0x14AF	0x0000 ;?ICS_IS_FINISH+0
; end of ?ICS_IS_FINISH
;compy.c,0 :: ?ICS_QTD_FOOD
0x14B1	0x0006 ;?ICS_QTD_FOOD+0
; end of ?ICS_QTD_FOOD
;compy.c,0 :: ?ICS_newPacmanOrientation
0x14B3	0x0000 ;?ICS_newPacmanOrientation+0
; end of ?ICS_newPacmanOrientation
;compy.c,0 :: ?ICS_new_ghost_x
0x14B5	0x0000 ;?ICS_new_ghost_x+0
; end of ?ICS_new_ghost_x
;compy.c,0 :: ?ICS_move_ghost_bool
0x14B7	0x0000 ;?ICS_move_ghost_bool+0
; end of ?ICS_move_ghost_bool
;compy.c,0 :: ?ICS_command
0x14B9	0x00 ;?ICS_command+0
; end of ?ICS_command
;compy.c,0 :: ?ICS?lstr4_compy
0x14BA	0x6957 ;?ICS?lstr4_compy+0
0x14BC	0x006E ;?ICS?lstr4_compy+2
; end of ?ICS?lstr4_compy
;compy.c,0 :: ?ICS?lstr3_compy
0x14BE	0x6147 ;?ICS?lstr3_compy+0
0x14C0	0x656D ;?ICS?lstr3_compy+2
0x14C2	0x6F20 ;?ICS?lstr3_compy+4
0x14C4	0x6576 ;?ICS?lstr3_compy+6
0x14C6	0x0072 ;?ICS?lstr3_compy+8
; end of ?ICS?lstr3_compy
;compy.c,0 :: ?ICS?lstr5_compy
0x14C8	0x4155 ;?ICS?lstr5_compy+0
0x14CA	0x5452 ;?ICS?lstr5_compy+2
0x14CC	0x00 ;?ICS?lstr5_compy+4
; end of ?ICS?lstr5_compy
;compy.c,0 :: ?ICS_ghost_orientation
0x14CD	0x06 ;?ICS_ghost_orientation+0
; end of ?ICS_ghost_orientation
;compy.c,0 :: ?ICS_old_ghost_obj
0x14CE	0x00 ;?ICS_old_ghost_obj+0
; end of ?ICS_old_ghost_obj
;compy.c,0 :: ?ICS_ghost_x
0x14CF	0x000E ;?ICS_ghost_x+0
; end of ?ICS_ghost_x
;compy.c,0 :: ?ICS_rands
0x14D1	0x000D ;?ICS_rands+0
; end of ?ICS_rands
;compy.c,0 :: ?ICS_cnt2
0x14D3	0x0000 ;?ICS_cnt2+0
; end of ?ICS_cnt2
;compy.c,0 :: ?ICS_cnt
0x14D5	0x0000 ;?ICS_cnt+0
; end of ?ICS_cnt
;compy.c,0 :: ?ICS_j
0x14D7	0x0000 ;?ICS_j+0
; end of ?ICS_j
;compy.c,0 :: ?ICS_i
0x14D9	0x0000 ;?ICS_i+0
; end of ?ICS_i
;compy.c,0 :: ?ICS_newPacman_x
0x14DB	0x0000 ;?ICS_newPacman_x+0
; end of ?ICS_newPacman_x
;compy.c,0 :: ?ICS_next
0x14DD	0x0001 ;?ICS_next+0
0x14DF	0x0000 ;?ICS_next+2
; end of ?ICS_next
;compy.c,26 :: _ghost
0x14E1	0x0000 ;_ghost+0
0x14E3	0xF00F ;_ghost+2
0x14E5	0xF81F ;_ghost+4
0x14E7	0xFC3F ;_ghost+6
0x14E9	0xFE7F ;_ghost+8
0x14EB	0xCE73 ;_ghost+10
0x14ED	0xCE73 ;_ghost+12
0x14EF	0xFE7F ;_ghost+14
0x14F1	0xFE7F ;_ghost+16
0x14F3	0xFE7F ;_ghost+18
0x14F5	0x9E79 ;_ghost+20
0x14F7	0x6E76 ;_ghost+22
0x14F9	0xFE7F ;_ghost+24
0x14FB	0xEE6E ;_ghost+26
0x14FD	0x4644 ;_ghost+28
0x14FF	0x0000 ;_ghost+30
; end of _ghost
;compy.c,31 :: _obstacle
0x1501	0x0000 ;_obstacle+0
0x1503	0xFC3F ;_obstacle+2
0x1505	0xFA5F ;_obstacle+4
0x1507	0xF66F ;_obstacle+6
0x1509	0xEE77 ;_obstacle+8
0x150B	0xDE7B ;_obstacle+10
0x150D	0xBE7D ;_obstacle+12
0x150F	0x7E7E ;_obstacle+14
0x1511	0x7E7E ;_obstacle+16
0x1513	0xBE7D ;_obstacle+18
0x1515	0xDE7B ;_obstacle+20
0x1517	0xEE77 ;_obstacle+22
0x1519	0xF66F ;_obstacle+24
0x151B	0xFA5F ;_obstacle+26
0x151D	0xFC3F ;_obstacle+28
0x151F	0x0000 ;_obstacle+30
; end of _obstacle
;compy.c,16 :: _blank
0x1521	0x0000 ;_blank+0
0x1523	0x0000 ;_blank+2
0x1525	0x0000 ;_blank+4
0x1527	0x0000 ;_blank+6
0x1529	0x0000 ;_blank+8
0x152B	0x0000 ;_blank+10
0x152D	0x0000 ;_blank+12
0x152F	0x0000 ;_blank+14
0x1531	0x0000 ;_blank+16
0x1533	0x0000 ;_blank+18
0x1535	0x0000 ;_blank+20
0x1537	0x0000 ;_blank+22
0x1539	0x0000 ;_blank+24
0x153B	0x0000 ;_blank+26
0x153D	0x0000 ;_blank+28
0x153F	0x0000 ;_blank+30
; end of _blank
;compy.c,21 :: _food
0x1541	0x0000 ;_food+0
0x1543	0x0000 ;_food+2
0x1545	0x0000 ;_food+4
0x1547	0x0000 ;_food+6
0x1549	0x0000 ;_food+8
0x154B	0x0000 ;_food+10
0x154D	0x8001 ;_food+12
0x154F	0xC003 ;_food+14
0x1551	0xC003 ;_food+16
0x1553	0x8001 ;_food+18
0x1555	0x0000 ;_food+20
0x1557	0x0000 ;_food+22
0x1559	0x0000 ;_food+24
0x155B	0x0000 ;_food+26
0x155D	0x0000 ;_food+28
0x155F	0x0000 ;_food+30
; end of _food
;compy.c,51 :: _pacman_right
0x1561	0x0000 ;_pacman_right+0
0x1563	0xF007 ;_pacman_right+2
0x1565	0xF81F ;_pacman_right+4
0x1567	0xFC3F ;_pacman_right+6
0x1569	0x3E3F ;_pacman_right+8
0x156B	0x3E7F ;_pacman_right+10
0x156D	0xFC7F ;_pacman_right+12
0x156F	0xF87F ;_pacman_right+14
0x1571	0xE07F ;_pacman_right+16
0x1573	0xC07F ;_pacman_right+18
0x1575	0xFE7F ;_pacman_right+20
0x1577	0xFE3F ;_pacman_right+22
0x1579	0xFC3F ;_pacman_right+24
0x157B	0xF81F ;_pacman_right+26
0x157D	0xF007 ;_pacman_right+28
0x157F	0x0000 ;_pacman_right+30
; end of _pacman_right
;compy.c,36 :: _pacman_up
0x1581	0x0000 ;_pacman_up+0
0x1583	0x0008 ;_pacman_up+2
0x1585	0x1818 ;_pacman_up+4
0x1587	0x3C38 ;_pacman_up+6
0x1589	0x7E78 ;_pacman_up+8
0x158B	0xFE78 ;_pacman_up+10
0x158D	0xCE79 ;_pacman_up+12
0x158F	0xCE7B ;_pacman_up+14
0x1591	0xFE7F ;_pacman_up+16
0x1593	0xFE7F ;_pacman_up+18
0x1595	0xFE7F ;_pacman_up+20
0x1597	0xFE7F ;_pacman_up+22
0x1599	0xFC3F ;_pacman_up+24
0x159B	0xF81F ;_pacman_up+26
0x159D	0xF00F ;_pacman_up+28
0x159F	0x0000 ;_pacman_up+30
; end of _pacman_up
;compy.c,46 :: _pacman_left
0x15A1	0x0000 ;_pacman_left+0
0x15A3	0xF00F ;_pacman_left+2
0x15A5	0xF81F ;_pacman_left+4
0x15A7	0xFC3F ;_pacman_left+6
0x15A9	0xFE7C ;_pacman_left+8
0x15AB	0xFE7C ;_pacman_left+10
0x15AD	0xFE3F ;_pacman_left+12
0x15AF	0xFE0F ;_pacman_left+14
0x15B1	0xFE03 ;_pacman_left+16
0x15B3	0xFE01 ;_pacman_left+18
0x15B5	0xFE7F ;_pacman_left+20
0x15B7	0xFE7F ;_pacman_left+22
0x15B9	0xFC3F ;_pacman_left+24
0x15BB	0xF81F ;_pacman_left+26
0x15BD	0xF00F ;_pacman_left+28
0x15BF	0x0000 ;_pacman_left+30
; end of _pacman_left
;compy.c,41 :: _pacman_down
0x15C1	0x0000 ;_pacman_down+0
0x15C3	0xF00F ;_pacman_down+2
0x15C5	0xF81F ;_pacman_down+4
0x15C7	0xFC3F ;_pacman_down+6
0x15C9	0xFE7F ;_pacman_down+8
0x15CB	0xFE7F ;_pacman_down+10
0x15CD	0xFE7F ;_pacman_down+12
0x15CF	0xFE7F ;_pacman_down+14
0x15D1	0xCE7B ;_pacman_down+16
0x15D3	0xCE79 ;_pacman_down+18
0x15D5	0xFE78 ;_pacman_down+20
0x15D7	0x7E78 ;_pacman_down+22
0x15D9	0x3C38 ;_pacman_down+24
0x15DB	0x1818 ;_pacman_down+26
0x15DD	0x0008 ;_pacman_down+28
0x15DF	0x0000 ;_pacman_down+30
; end of _pacman_down
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [98]    _interrupt
0x006A       [6]    _Delay_1us
0x0070      [26]    _T6963C_waitReady
0x008A      [20]    _T6963C_writeData
0x009E      [20]    _T6963C_writeCommand
0x00B2      [54]    _Div_16x16_U
0x00E8      [80]    _Mul_16x16_U
0x0138      [30]    _T6963C_setPtr
0x0156     [248]    _T6963C_sprite
0x024E     [156]    _getSprite
0x02EA      [82]    _print
0x033C      [86]    _printCoordinate
0x0392      [82]    _Mul_32x32_U
0x03E4      [96]    _T6963C_write_text
0x0444      [42]    _print_text
0x046E     [110]    _update_pacman_orientation
0x04DC      [14]    _UART1_Write
0x04EA      [28]    _Delay_100ms
0x0506      [76]    _Print_World
0x0552     [110]    _myrand
0x05C0      [82]    _T6963C_fill
0x0612     [278]    _Le_Teclado
0x0728     [266]    _T6963C_init
0x0832      [16]    ___CC2DW
0x0842      [86]    _UART1_Init
0x0898      [22]    _I2C1_Init
0x08AE     [614]    _update_pacman
0x0B14     [604]    _move_ghost
0x0D70     [180]    _Finish
0x0E24      [54]    _UART1_Write_Text
0x0E5A      [16]    _InitTimer2
0x0E6A    [1350]    _Create_World
0x13B0     [240]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    R0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    FLASH_Write_64_i_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    R1
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    R2
0x0002       [2]    memchr_s_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Write_64_SaveINTCON_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    R3
0x0003       [2]    memmove_tt_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    strcat_cp_L0
0x0004       [1]    R4
0x0005       [1]    R5
0x0005       [2]    memmove_ff_L0
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [1]    _food_orientation
0x0017       [1]    _barrier_orientation
0x0018       [2]    _IS_GAME_OVER
0x001A       [2]    _ghost_y
0x001C       [2]    _new_ghost_y
0x001E       [1]    _pacman_orientation
0x001F       [2]    _pacman_y
0x0021       [2]    _newPacman_y
0x0023       [2]    _pacman_x
0x0025       [2]    _IS_FINISH
0x0027       [2]    _QTD_FOOD
0x0029       [2]    _newPacmanOrientation
0x002B       [2]    _new_ghost_x
0x002D       [2]    _move_ghost_bool
0x002F       [1]    _command
0x0030       [4]    ?lstr4_compy
0x0034      [10]    ?lstr3_compy
0x003E       [5]    ?lstr5_compy
0x0043       [1]    _ghost_orientation
0x0044       [1]    _old_ghost_obj
0x0045       [2]    _ghost_x
0x0047       [2]    _rands
0x0049       [2]    _cnt2
0x004B       [2]    _cnt
0x004D       [2]    _j
0x004F       [2]    _i
0x0051       [2]    _newPacman_x
0x0053       [4]    _next
0x0057       [2]    _T6963C_txtCols
0x0059       [2]    _T6963C_textHomeAddr
0x005B       [1]    _T6963C_display
0x005C       [2]    _T6963C_txtMemSize
0x005E       [4]    _UART_Wr_Ptr
0x0062       [2]    _T6963C_fontWidth
0x0064       [2]    _T6963C_grMemSize
0x0066       [4]    _UART_Rd_Ptr
0x006A       [4]    _UART_Rdy_Ptr
0x006E       [4]    _UART_Tx_Idle_Ptr
0x0072       [2]    _T6963C_grHeight
0x0074     [240]    _world
0x0164       [2]    _T6963C_grHomeAddr
0x0166       [2]    _T6963C_grWidth
0x0168       [4]    FARG_I2C1_Init_clock
0x0168       [2]    FARG_T6963C_init_width
0x0168       [2]    FARG_UART1_Write_Text_uart_text
0x0168       [2]    FLOC__Create_World
0x0168       [1]    FARG_update_pacman_direction
0x016A       [1]    UART1_Write_Text_data__L0
0x016A       [1]    FARG_T6963C_init_height
0x016B       [1]    UART1_Write_Text_counter_L0
0x016B       [1]    FARG_T6963C_init_fntW
0x016C       [1]    FARG_print_text_column
0x016C       [1]    FARG_T6963C_fill_v
0x016C       [1]    FARG_UART1_Write_data_
0x016C       [2]    FARG_update_pacman_orientation_newX
0x016C       [2]    FARG_myrand_seed
0x016D       [1]    FARG_print_text_line
0x016D       [2]    FARG_T6963C_fill_start
0x016E       [2]    FARG_update_pacman_orientation_newY
0x016E       [2]    FARG_print_text_text
0x016F       [2]    FARG_T6963C_fill_len
0x0171       [2]    T6963C_fill_addr_L0
0x0173       [2]    FARG_printCoordinate_x
0x0173       [2]    FARG_T6963C_write_text_str
0x0175       [2]    FARG_printCoordinate_y
0x0175       [1]    FARG_T6963C_write_text_x
0x0176       [1]    FARG_T6963C_write_text_y
0x0177       [1]    FARG_T6963C_write_text_mode
0x0178       [1]    FARG_getSprite_charactereValue
0x0178       [1]    FARG_print_column
0x0179       [1]    FARG_print_line
0x017A       [3]    FARG_print_sprite
0x017D       [1]    FARG_T6963C_sprite_px
0x017E       [1]    FARG_T6963C_sprite_py
0x017F       [3]    FARG_T6963C_sprite_pic
0x0182       [1]    FARG_T6963C_sprite_sx
0x0183       [1]    FARG_T6963C_sprite_sy
0x0184       [2]    T6963C_sprite_cx_L0
0x0186       [2]    T6963C_sprite_i_L0
0x0188       [2]    T6963C_sprite_addr_L0
0x018A       [2]    FARG_T6963C_setPtr_p
0x018C       [1]    FARG_T6963C_setPtr_c
0x018D       [1]    T6963C_setPtr_addrH_L0
0x018E       [1]    FARG_T6963C_writeCommand_mydata
0x018E       [1]    FARG_T6963C_writeData_mydata
0x0F80       [1]    PORTA
0x0F80       [0]    RA3_bit
0x0F80       [0]    RA5_bit
0x0F80       [0]    RA4_bit
0x0F80       [0]    RA2_bit
0x0F80       [0]    RA7_bit
0x0F80       [0]    RA1_bit
0x0F80       [0]    RA6_bit
0x0F80       [0]    SS_bit
0x0F80       [0]    RA0_bit
0x0F80       [0]    NOT_SS_bit
0x0F80       [0]    HLVDIN_bit
0x0F80       [0]    T0CKI_bit
0x0F80       [0]    AN4_bit
0x0F80       [0]    LVDIN_bit
0x0F81       [0]    INT0_bit
0x0F81       [0]    PGC_bit
0x0F81       [0]    AN9_bit
0x0F81       [0]    AN11_bit
0x0F81       [0]    PGM_bit
0x0F81       [0]    PGD_bit
0x0F81       [0]    RB3_bit
0x0F81       [0]    RB2_bit
0x0F81       [0]    RB4_bit
0x0F81       [0]    RB6_bit
0x0F81       [0]    RB5_bit
0x0F81       [0]    INT1_bit
0x0F81       [0]    RB7_bit
0x0F81       [0]    RB0_bit
0x0F81       [0]    KBI0_bit
0x0F81       [1]    PORTB
0x0F81       [0]    INT2_bit
0x0F81       [0]    CCP2_PORTB_bit
0x0F81       [0]    AN12_bit
0x0F81       [0]    AN10_bit
0x0F81       [0]    AN8_bit
0x0F81       [0]    KBI3_bit
0x0F81       [0]    KBI1_bit
0x0F81       [0]    RB1_bit
0x0F81       [0]    KBI2_bit
0x0F82       [0]    RC2_bit
0x0F82       [0]    RC1_bit
0x0F82       [0]    T6963C_ctrlrst
0x0F82       [0]    RX__bit
0x0F82       [0]    T1OSO_bit
0x0F82       [1]    PORTC
0x0F82       [0]    RC7_bit
0x0F82       [0]    T13CKI_bit
0x0F82       [0]    T6963C_ctrlcd
0x0F82       [0]    CK_bit
0x0F82       [0]    T1CKI_bit
0x0F82       [0]    SDA_bit
0x0F82       [0]    CCP2_PORTC_bit
0x0F82       [0]    RC0_bit
0x0F82       [0]    SCL_bit
0x0F82       [0]    RC5_bit
0x0F82       [0]    SDO_bit
0x0F82       [0]    CCP1_bit
0x0F82       [0]    RC4_bit
0x0F82       [0]    T6963C_ctrlwr
0x0F82       [0]    SCK_bit
0x0F82       [0]    RC6_bit
0x0F82       [0]    T1OSI_bit
0x0F82       [0]    SDI_bit
0x0F82       [0]    RC3_bit
0x0F82       [0]    TX_bit
0x0F82       [0]    T6963C_ctrlrd
0x0F83       [0]    RD6_bit
0x0F83       [0]    PSP2_bit
0x0F83       [1]    T6963C_dataPort
0x0F83       [0]    RD5_bit
0x0F83       [0]    PSP0_bit
0x0F83       [0]    P1D_bit
0x0F83       [0]    PSP1_bit
0x0F83       [0]    P1B_bit
0x0F83       [0]    PSP7_bit
0x0F83       [0]    P1C_bit
0x0F83       [1]    PORTD
0x0F83       [0]    PSP6_bit
0x0F83       [0]    PSP4_bit
0x0F83       [0]    PSP3_bit
0x0F83       [0]    RD7_bit
0x0F83       [0]    PSP5_bit
0x0F83       [0]    RD3_bit
0x0F83       [0]    RD0_bit
0x0F83       [0]    RD1_bit
0x0F83       [0]    RD4_bit
0x0F83       [0]    RD2_bit
0x0F84       [0]    RE0_bit
0x0F84       [0]    CS_bit
0x0F84       [0]    AN7_bit
0x0F84       [0]    NOT_CS_bit
0x0F84       [0]    RE3_bit
0x0F84       [0]    NOT_MCLR_bit
0x0F84       [0]    RD_bit
0x0F84       [0]    NOT_RD_bit
0x0F84       [0]    WR_bit
0x0F84       [0]    MCLR_bit
0x0F84       [0]    AN6_bit
0x0F84       [0]    VPP_bit
0x0F84       [0]    RE2_bit
0x0F84       [0]    RE1_bit
0x0F84       [1]    PORTE
0x0F84       [0]    NOT_WR_bit
0x0F84       [0]    AN5_bit
0x0F89       [0]    LATA7_bit
0x0F89       [0]    LATA5_bit
0x0F89       [1]    LATA
0x0F89       [0]    LATA4_bit
0x0F89       [0]    LATA3_bit
0x0F89       [0]    LATA6_bit
0x0F89       [0]    LATA0_bit
0x0F89       [0]    LATA2_bit
0x0F89       [0]    LATA1_bit
0x0F8A       [0]    LATB0_bit
0x0F8A       [0]    LATB5_bit
0x0F8A       [0]    LATB2_bit
0x0F8A       [0]    LATB4_bit
0x0F8A       [0]    LATB3_bit
0x0F8A       [1]    LATB
0x0F8A       [0]    LATB1_bit
0x0F8A       [0]    LATB6_bit
0x0F8A       [0]    LATB7_bit
0x0F8B       [0]    LATC6_bit
0x0F8B       [0]    LATC1_bit
0x0F8B       [0]    LATC2_bit
0x0F8B       [0]    LATC3_bit
0x0F8B       [1]    LATC
0x0F8B       [0]    LATC4_bit
0x0F8B       [0]    LATC5_bit
0x0F8B       [0]    LATC0_bit
0x0F8B       [0]    LATC7_bit
0x0F8C       [0]    LATD7_bit
0x0F8C       [0]    LATD2_bit
0x0F8C       [0]    LATD3_bit
0x0F8C       [0]    LATD0_bit
0x0F8C       [1]    LATD
0x0F8C       [0]    LATD4_bit
0x0F8C       [0]    LATD1_bit
0x0F8C       [0]    LATD6_bit
0x0F8C       [0]    LATD5_bit
0x0F8D       [1]    LATE
0x0F8D       [0]    LATE0_bit
0x0F8D       [0]    LATE2_bit
0x0F8D       [0]    LATE1_bit
0x0F92       [0]    TRISA7_bit
0x0F92       [1]    TRISA
0x0F92       [0]    TRISA5_bit
0x0F92       [0]    TRISA1_bit
0x0F92       [0]    TRISA2_bit
0x0F92       [0]    TRISA3_bit
0x0F92       [0]    TRISA4_bit
0x0F92       [0]    TRISA0_bit
0x0F92       [0]    TRISA6_bit
0x0F93       [0]    TRISB6_bit
0x0F93       [1]    TRISB
0x0F93       [0]    TRISB0_bit
0x0F93       [0]    TRISB3_bit
0x0F93       [0]    TRISB5_bit
0x0F93       [0]    TRISB2_bit
0x0F93       [0]    TRISB4_bit
0x0F93       [0]    TRISB7_bit
0x0F93       [0]    TRISB1_bit
0x0F94       [0]    TRISC1_bit
0x0F94       [0]    TRISC0_bit
0x0F94       [1]    TRISC
0x0F94       [0]    TRISC4_bit
0x0F94       [0]    TRISC3_bit
0x0F94       [0]    TRISC6_bit
0x0F94       [0]    TRISC5_bit
0x0F94       [0]    T6963C_ctrlcd_Direction
0x0F94       [0]    TRISC7_bit
0x0F94       [0]    T6963C_ctrlrst_Direction
0x0F94       [0]    TRISC2_bit
0x0F94       [0]    T6963C_ctrlrd_Direction
0x0F94       [0]    T6963C_ctrlwr_Direction
0x0F95       [1]    TRISD
0x0F95       [0]    TRISD0_bit
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD1_bit
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD4_bit
0x0F96       [0]    OBF_bit
0x0F96       [0]    IBOV_bit
0x0F96       [0]    IBF_bit
0x0F96       [0]    PSPMODE_bit
0x0F96       [0]    TRISE2_bit
0x0F96       [0]    PSPMODE_TRISE_bit
0x0F96       [0]    TRISE0_bit
0x0F96       [0]    TRISE1_bit
0x0F96       [0]    OBF_TRISE_bit
0x0F96       [0]    IBF_TRISE_bit
0x0F96       [0]    IBOV_TRISE_bit
0x0F96       [1]    TRISE
0x0F9B       [1]    OSCTUNE
0x0F9B       [0]    TUN0_bit
0x0F9B       [0]    INTSRC_bit
0x0F9B       [0]    PLLEN_bit
0x0F9B       [0]    TUN2_bit
0x0F9B       [0]    TUN4_bit
0x0F9B       [0]    TUN1_bit
0x0F9B       [0]    TUN3_bit
0x0F9D       [0]    TMR2IE_bit
0x0F9D       [0]    TMR1IE_bit
0x0F9D       [0]    PSPIE_bit
0x0F9D       [0]    TXIE_bit
0x0F9D       [1]    PIE1
0x0F9D       [0]    CCP1IE_bit
0x0F9D       [0]    SSPIE_bit
0x0F9D       [0]    ADIE_bit
0x0F9D       [0]    RCIE_bit
0x0F9E       [0]    TMR1IF_bit
0x0F9E       [0]    SSPIF_bit
0x0F9E       [0]    TMR2IF_bit
0x0F9E       [0]    CCP1IF_bit
0x0F9E       [0]    PSPIF_bit
0x0F9E       [1]    PIR1
0x0F9E       [0]    ADIF_bit
0x0F9E       [0]    RCIF_bit
0x0F9E       [0]    TXIF_bit
0x0F9F       [0]    TMR2IP_bit
0x0F9F       [0]    CCP1IP_bit
0x0F9F       [0]    TXIP_bit
0x0F9F       [0]    SSPIP_bit
0x0F9F       [0]    RCIP_bit
0x0F9F       [1]    IPR1
0x0F9F       [0]    PSPIP_bit
0x0F9F       [0]    TMR1IP_bit
0x0F9F       [0]    ADIP_bit
0x0FA0       [0]    CMIE_bit
0x0FA0       [0]    EEIE_bit
0x0FA0       [0]    HLVDIE_bit
0x0FA0       [0]    OSCFIE_bit
0x0FA0       [0]    TMR3IE_bit
0x0FA0       [0]    LVDIE_bit
0x0FA0       [0]    BCLIE_bit
0x0FA0       [1]    PIE2
0x0FA0       [0]    CCP2IE_bit
0x0FA1       [0]    HLVDIF_bit
0x0FA1       [1]    PIR2
0x0FA1       [0]    LVDIF_bit
0x0FA1       [0]    EEIF_bit
0x0FA1       [0]    BCLIF_bit
0x0FA1       [0]    CMIF_bit
0x0FA1       [0]    OSCFIF_bit
0x0FA1       [0]    CCP2IF_bit
0x0FA1       [0]    TMR3IF_bit
0x0FA2       [1]    IPR2
0x0FA2       [0]    CMIP_bit
0x0FA2       [0]    EEIP_bit
0x0FA2       [0]    HLVDIP_bit
0x0FA2       [0]    OSCFIP_bit
0x0FA2       [0]    TMR3IP_bit
0x0FA2       [0]    CCP2IP_bit
0x0FA2       [0]    BCLIP_bit
0x0FA2       [0]    LVDIP_bit
0x0FA6       [0]    CFGS_bit
0x0FA6       [0]    FREE_bit
0x0FA6       [1]    EECON1
0x0FA6       [0]    EEPGD_bit
0x0FA6       [0]    WR_EECON1_bit
0x0FA6       [0]    RD_EECON1_bit
0x0FA6       [0]    WRERR_bit
0x0FA6       [0]    WREN_bit
0x0FA7       [1]    EECON2
0x0FA8       [1]    EEDATA
0x0FA9       [1]    EEADR
0x0FAA       [1]    EEADRH
0x0FAB       [0]    ADDEN_bit
0x0FAB       [1]    RCSTA
0x0FAB       [0]    SPEN_bit
0x0FAB       [0]    ADEN_bit
0x0FAB       [0]    CREN_bit
0x0FAB       [0]    SREN_bit
0x0FAB       [0]    RX9D_bit
0x0FAB       [0]    OERR_bit
0x0FAB       [0]    FERR_bit
0x0FAB       [0]    RX9_bit
0x0FAC       [0]    TRMT_bit
0x0FAC       [0]    BRGH_bit
0x0FAC       [1]    TXSTA
0x0FAC       [0]    TX9D_bit
0x0FAC       [0]    TX9_bit
0x0FAC       [0]    TXEN_bit
0x0FAC       [0]    CSRC_bit
0x0FAC       [0]    SENDB_bit
0x0FAC       [0]    SYNC_bit
0x0FAD       [1]    TXREG
0x0FAE       [1]    RCREG
0x0FAF       [1]    SPBRG
0x0FB0       [1]    SPBRGH
0x0FB1       [1]    T3CON
0x0FB1       [0]    T3CKPS0_bit
0x0FB1       [0]    T3CCP1_bit
0x0FB1       [0]    T3SYNC_bit
0x0FB1       [0]    T3CKPS1_bit
0x0FB1       [0]    NOT_T3SYNC_bit
0x0FB1       [0]    RD16_bit
0x0FB1       [0]    T3CCP2_bit
0x0FB1       [0]    TMR3ON_bit
0x0FB1       [0]    TMR3CS_bit
0x0FB2       [1]    TMR3L
0x0FB3       [1]    TMR3H
0x0FB4       [0]    CM2_bit
0x0FB4       [0]    CM1_bit
0x0FB4       [0]    CM0_bit
0x0FB4       [0]    CIS_bit
0x0FB4       [0]    C1OUT_bit
0x0FB4       [0]    C2OUT_bit
0x0FB4       [0]    C2INV_bit
0x0FB4       [1]    CMCON
0x0FB4       [0]    C1INV_bit
0x0FB5       [0]    CVR3_bit
0x0FB5       [0]    CVRSS_bit
0x0FB5       [0]    CVR2_bit
0x0FB5       [0]    CVR0_bit
0x0FB5       [0]    CVR1_bit
0x0FB5       [0]    CVREN_bit
0x0FB5       [1]    CVRCON
0x0FB5       [0]    CVRR_bit
0x0FB5       [0]    CVROE_bit
0x0FB6       [1]    ECCP1AS
0x0FB6       [0]    ECCPAS1_bit
0x0FB6       [0]    ECCPAS0_bit
0x0FB6       [0]    ECCPASE_bit
0x0FB6       [0]    ECCPAS2_bit
0x0FB6       [0]    PSSBD1_bit
0x0FB6       [0]    PSSBD0_bit
0x0FB6       [0]    PSSAC0_bit
0x0FB6       [0]    PSSAC1_bit
0x0FB7       [0]    PDC2_bit
0x0FB7       [0]    PDC3_bit
0x0FB7       [0]    PDC1_bit
0x0FB7       [1]    PWM1CON
0x0FB7       [0]    PDC0_bit
0x0FB7       [0]    PDC6_bit
0x0FB7       [0]    PDC4_bit
0x0FB7       [0]    PRSEN_bit
0x0FB7       [0]    PDC5_bit
0x0FB8       [0]    WUE_bit
0x0FB8       [0]    TXCKP_bit
0x0FB8       [0]    ABDOVF_bit
0x0FB8       [0]    SCKP_bit
0x0FB8       [0]    BRG16_bit
0x0FB8       [0]    RCIDL_bit
0x0FB8       [1]    BAUDCTL
0x0FB8       [1]    BAUDCON
0x0FB8       [0]    ABDEN_bit
0x0FB8       [0]    RCMT_bit
0x0FB8       [0]    RXDTP_bit
0x0FBA       [0]    CCP2M3_bit
0x0FBA       [0]    CCP2Y_bit
0x0FBA       [0]    CCP2M2_bit
0x0FBA       [0]    CCP2M0_bit
0x0FBA       [0]    CCP2M1_bit
0x0FBA       [0]    DC2B0_bit
0x0FBA       [0]    DC2B1_bit
0x0FBA       [1]    CCP2CON
0x0FBA       [0]    CCP2X_bit
0x0FBB       [1]    CCPR2L
0x0FBB       [2]    CCPR2
0x0FBC       [1]    CCPR2H
0x0FBD       [1]    CCP1CON
0x0FBD       [0]    CCP1Y_bit
0x0FBD       [0]    CCP1X_bit
0x0FBD       [0]    DC1B0_bit
0x0FBD       [0]    CCP1M3_bit
0x0FBD       [0]    CCP1M0_bit
0x0FBD       [0]    CCP1M1_bit
0x0FBD       [0]    CCP1M2_bit
0x0FBD       [0]    DC1B1_bit
0x0FBD       [0]    P1M0_bit
0x0FBD       [0]    P1M1_bit
0x0FBE       [2]    CCPR1
0x0FBE       [1]    CCPR1L
0x0FBF       [1]    CCPR1H
0x0FC0       [1]    ADCON2
0x0FC0       [0]    ADCS1_bit
0x0FC0       [0]    ADCS0_bit
0x0FC0       [0]    ACQT0_bit
0x0FC0       [0]    ACQT2_bit
0x0FC0       [0]    ACQT1_bit
0x0FC0       [0]    ADCS2_bit
0x0FC0       [0]    ADFM_bit
0x0FC1       [1]    ADCON1
0x0FC1       [0]    VCFG1_bit
0x0FC1       [0]    PCFG1_bit
0x0FC1       [0]    PCFG0_bit
0x0FC1       [0]    PCFG2_bit
0x0FC1       [0]    VCFG0_bit
0x0FC1       [0]    PCFG3_bit
0x0FC2       [0]    CHS3_bit
0x0FC2       [0]    CHS2_bit
0x0FC2       [0]    CHS1_bit
0x0FC2       [0]    GO_DONE_bit
0x0FC2       [0]    NOT_DONE_bit
0x0FC2       [0]    DONE_bit
0x0FC2       [0]    CHS0_bit
0x0FC2       [0]    GO_bit
0x0FC2       [1]    ADCON0
0x0FC2       [0]    ADON_bit
0x0FC3       [2]    ADRES
0x0FC3       [1]    ADRESL
0x0FC4       [1]    ADRESH
0x0FC5       [0]    RCEN_bit
0x0FC5       [0]    RSEN_bit
0x0FC5       [0]    PEN_bit
0x0FC5       [0]    ACKSTAT_bit
0x0FC5       [0]    GCEN_bit
0x0FC5       [0]    ACKEN_bit
0x0FC5       [0]    ACKDT_bit
0x0FC5       [1]    SSPCON2
0x0FC5       [0]    SEN_bit
0x0FC6       [0]    SSPEN_bit
0x0FC6       [0]    WCOL_bit
0x0FC6       [0]    SSPOV_bit
0x0FC6       [0]    SSPM0_bit
0x0FC6       [0]    SSPM3_bit
0x0FC6       [0]    SSPM2_bit
0x0FC6       [0]    SSPM1_bit
0x0FC6       [0]    CKP_bit
0x0FC6       [1]    SSPCON1
0x0FC7       [0]    NOT_A_bit
0x0FC7       [0]    NOT_W_bit
0x0FC7       [0]    BF_bit
0x0FC7       [0]    D_A_bit
0x0FC7       [0]    R_W_bit
0x0FC7       [0]    SMP_bit
0x0FC7       [0]    S_bit
0x0FC7       [0]    D_bit
0x0FC7       [0]    P_bit
0x0FC7       [0]    UA_bit
0x0FC7       [0]    CKE_bit
0x0FC7       [0]    R_bit
0x0FC7       [1]    SSPSTAT
0x0FC7       [0]    NOT_ADDRESS_bit
0x0FC7       [0]    NOT_WRITE_bit
0x0FC8       [1]    SSPADD
0x0FC9       [1]    SSPBUF
0x0FCA       [0]    T2OUTPS0_bit
0x0FCA       [0]    T2OUTPS3_bit
0x0FCA       [0]    T2OUTPS1_bit
0x0FCA       [0]    T2OUTPS2_bit
0x0FCA       [0]    T2CKPS1_bit
0x0FCA       [0]    T2CKPS0_bit
0x0FCA       [1]    T2CON
0x0FCA       [0]    TMR2ON_bit
0x0FCB       [1]    PR2
0x0FCC       [1]    TMR2
0x0FCD       [0]    RD16_T1CON_bit
0x0FCD       [0]    T1RUN_bit
0x0FCD       [1]    T1CON
0x0FCD       [0]    NOT_T1SYNC_bit
0x0FCD       [0]    TMR1CS_bit
0x0FCD       [0]    TMR1ON_bit
0x0FCD       [0]    T1SYNC_bit
0x0FCD       [0]    T1CKPS1_bit
0x0FCD       [0]    T1CKPS0_bit
0x0FCD       [0]    T1OSCEN_bit
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD0       [0]    BOR_bit
0x0FD0       [0]    NOT_POR_bit
0x0FD0       [0]    NOT_BOR_bit
0x0FD0       [0]    IPEN_bit
0x0FD0       [0]    NOT_RI_bit
0x0FD0       [0]    NOT_TO_bit
0x0FD0       [0]    NOT_PD_bit
0x0FD0       [1]    RCON
0x0FD0       [0]    PD_bit
0x0FD0       [0]    POR_bit
0x0FD0       [0]    SBOREN_bit
0x0FD0       [0]    RI_bit
0x0FD0       [0]    TO__bit
0x0FD1       [0]    SWDTEN_bit
0x0FD1       [0]    SWDTE_bit
0x0FD1       [1]    WDTCON
0x0FD2       [0]    LVDL1_bit
0x0FD2       [0]    HLVDL3_bit
0x0FD2       [0]    LVDL0_bit
0x0FD2       [0]    LVV1_bit
0x0FD2       [0]    HLVDEN_bit
0x0FD2       [0]    LVDL3_bit
0x0FD2       [0]    LVDL2_bit
0x0FD2       [0]    LVDEN_bit
0x0FD2       [0]    LVV0_bit
0x0FD2       [0]    IRVST_bit
0x0FD2       [1]    HLVDCON
0x0FD2       [0]    IVRST_bit
0x0FD2       [0]    HLVDL0_bit
0x0FD2       [0]    HLVDL2_bit
0x0FD2       [0]    HLVDL1_bit
0x0FD2       [0]    BGST_bit
0x0FD2       [0]    VDIRMAG_bit
0x0FD2       [0]    LVV2_bit
0x0FD2       [0]    LVV3_bit
0x0FD2       [1]    LVDCON
0x0FD3       [1]    OSCCON
0x0FD3       [0]    IOFS_bit
0x0FD3       [0]    OSTS_bit
0x0FD3       [0]    SCS0_bit
0x0FD3       [0]    SCS1_bit
0x0FD3       [0]    IRCF2_bit
0x0FD3       [0]    IDLEN_bit
0x0FD3       [0]    IRCF1_bit
0x0FD3       [0]    IRCF0_bit
0x0FD4       [1]    DEBUG
0x0FD5       [1]    T0CON
0x0FD5       [0]    T08BIT_bit
0x0FD5       [0]    PSA_bit
0x0FD5       [0]    T0SE_bit
0x0FD5       [0]    T0CS_bit
0x0FD5       [0]    T0PS0_bit
0x0FD5       [0]    T0PS1_bit
0x0FD5       [0]    T0PS2_bit
0x0FD5       [0]    TMR0ON_bit
0x0FD5       [0]    T016BIT_bit
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [0]    C_bit
0x0FD8       [0]    DC_bit
0x0FD8       [0]    N_bit
0x0FD8       [1]    STATUS
0x0FD8       [0]    Z_bit
0x0FD8       [0]    OV_bit
0x0FD9       [2]    FSR2PTR
0x0FD9       [2]    FSR2
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDB       [1]    PLUSW2
0x0FDC       [1]    PREINC2
0x0FDD       [1]    POSTDEC2
0x0FDE       [1]    POSTINC2
0x0FDF       [1]    INDF2
0x0FE0       [1]    BSR
0x0FE1       [2]    FSR1PTR
0x0FE1       [1]    FSR1L
0x0FE1       [2]    FSR1
0x0FE2       [1]    FSR1H
0x0FE3       [1]    PLUSW1
0x0FE4       [1]    PREINC1
0x0FE5       [1]    POSTDEC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [2]    FSR0PTR
0x0FE9       [1]    FSR0L
0x0FE9       [2]    FSR0
0x0FEA       [1]    FSR0H
0x0FEB       [1]    PLUSW0
0x0FEC       [1]    PREINC0
0x0FED       [1]    POSTDEC0
0x0FEE       [1]    POSTINC0
0x0FEF       [1]    INDF0
0x0FF0       [0]    INT1E_bit
0x0FF0       [0]    INT2P_bit
0x0FF0       [0]    INT2IE_bit
0x0FF0       [0]    INT2IP_bit
0x0FF0       [0]    INT2E_bit
0x0FF0       [0]    INT1P_bit
0x0FF0       [0]    INT2IF_bit
0x0FF0       [0]    INT1IF_bit
0x0FF0       [0]    INT2F_bit
0x0FF0       [0]    INT1F_bit
0x0FF0       [0]    INT1IE_bit
0x0FF0       [0]    INT1IP_bit
0x0FF0       [1]    INTCON3
0x0FF1       [0]    NOT_RBPU_bit
0x0FF1       [0]    INTEDG2_bit
0x0FF1       [1]    INTCON2
0x0FF1       [0]    INTEDG1_bit
0x0FF1       [0]    RBPU_bit
0x0FF1       [0]    RBIP_bit
0x0FF1       [0]    TMR0IP_bit
0x0FF1       [0]    INTEDG0_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [0]    INT0F_bit
0x0FF2       [0]    T0IE_bit
0x0FF2       [0]    INT0IE_bit
0x0FF2       [0]    T0IF_bit
0x0FF2       [0]    PEIE_bit
0x0FF2       [0]    GIEL_bit
0x0FF2       [0]    GIE_bit
0x0FF2       [0]    INT0IF_bit
0x0FF2       [0]    GIEH_bit
0x0FF2       [0]    TMR0IE_bit
0x0FF2       [0]    RBIE_bit
0x0FF2       [1]    INTCON
0x0FF2       [0]    RBIF_bit
0x0FF2       [0]    INT0E_bit
0x0FF3       [2]    PROD
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [3]    TBLPTR
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
0x0FF8       [0]    TBLPTRU3_bit
0x0FF8       [0]    TBLPTRU0_bit
0x0FF8       [0]    ACSS_bit
0x0FF8       [0]    TBLPTRU2_bit
0x0FF8       [0]    TBLPTRU4_bit
0x0FF8       [0]    TBLPTRU1_bit
0x0FF9       [1]    PC
0x0FF9       [1]    PCL
0x0FFA       [1]    PCLATH
0x0FFB       [0]    PCU2_bit
0x0FFB       [0]    PCU3_bit
0x0FFB       [0]    PCU1_bit
0x0FFB       [1]    PCLATU
0x0FFB       [0]    PCU0_bit
0x0FFB       [0]    PCU4_bit
0x0FFC       [0]    SP3_bit
0x0FFC       [0]    SP2_bit
0x0FFC       [0]    SP1_bit
0x0FFC       [0]    SP4_bit
0x0FFC       [0]    STKPTR0_bit
0x0FFC       [1]    STKPTR
0x0FFC       [0]    STKFUL_bit
0x0FFC       [0]    STKPTR4_bit
0x0FFC       [0]    STKPTR3_bit
0x0FFC       [0]    STKPTR1_bit
0x0FFC       [0]    STKUNF_bit
0x0FFC       [0]    SP0_bit
0x0FFC       [0]    STKPTR2_bit
0x0FFC       [0]    STKOVF_bit
0x0FFD       [1]    TOSL
0x0FFD       [1]    TOS
0x0FFE       [1]    TOSH
0x0FFF       [1]    TOSU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x14A0       [1]    ?ICS_food_orientation
0x14A1       [1]    ?ICS_barrier_orientation
0x14A2       [2]    ?ICS_IS_GAME_OVER
0x14A4       [2]    ?ICS_ghost_y
0x14A6       [2]    ?ICS_new_ghost_y
0x14A8       [1]    ?ICS_pacman_orientation
0x14A9       [2]    ?ICS_pacman_y
0x14AB       [2]    ?ICS_newPacman_y
0x14AD       [2]    ?ICS_pacman_x
0x14AF       [2]    ?ICS_IS_FINISH
0x14B1       [2]    ?ICS_QTD_FOOD
0x14B3       [2]    ?ICS_newPacmanOrientation
0x14B5       [2]    ?ICS_new_ghost_x
0x14B7       [2]    ?ICS_move_ghost_bool
0x14B9       [1]    ?ICS_command
0x14BA       [4]    ?ICS?lstr4_compy
0x14BE      [10]    ?ICS?lstr3_compy
0x14C8       [5]    ?ICS?lstr5_compy
0x14CD       [1]    ?ICS_ghost_orientation
0x14CE       [1]    ?ICS_old_ghost_obj
0x14CF       [2]    ?ICS_ghost_x
0x14D1       [2]    ?ICS_rands
0x14D3       [2]    ?ICS_cnt2
0x14D5       [2]    ?ICS_cnt
0x14D7       [2]    ?ICS_j
0x14D9       [2]    ?ICS_i
0x14DB       [2]    ?ICS_newPacman_x
0x14DD       [4]    ?ICS_next
0x14E1      [32]    _ghost
0x1501      [32]    _obstacle
0x1521      [32]    _blank
0x1541      [32]    _food
0x1561      [32]    _pacman_right
0x1581      [32]    _pacman_up
0x15A1      [32]    _pacman_left
0x15C1      [32]    _pacman_down
//** Label List: ** 
//----------------------------------------------
  L_getSprite0
  L_getSprite1
  L_getSprite2
  L_getSprite3
  L_getSprite4
  L_getSprite5
  L_getSprite6
  L_getSprite7
  L_getSprite8
  L_getSprite9
  L_getSprite10
  L_getSprite11
  L_getSprite12
  L_move_ghost13
  L_move_ghost14
  L_move_ghost15
  L_move_ghost16
  L_move_ghost17
  L_move_ghost18
  L_move_ghost19
  L_move_ghost20
  L_move_ghost21
  L_move_ghost22
  L_move_ghost23
  L_move_ghost24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_Le_Teclado29
  L_Le_Teclado30
  L_Le_Teclado31
  L_Le_Teclado32
  L_Le_Teclado33
  L_Le_Teclado34
  L_Le_Teclado35
  L_Le_Teclado36
  L_Le_Teclado37
  L_Le_Teclado38
  L_Le_Teclado39
  L_Le_Teclado40
  L_Le_Teclado41
  L_Le_Teclado42
  L_Le_Teclado43
  L_Le_Teclado44
  L_Le_Teclado45
  L_Le_Teclado46
  L_Le_Teclado47
  L_Le_Teclado48
  L_Le_Teclado49
  L_Le_Teclado50
  L_Le_Teclado51
  L_Le_Teclado52
  L_Le_Teclado53
  L_Le_Teclado54
  L_Le_Teclado55
  L_Le_Teclado56
  L_Le_Teclado57
  L_Le_Teclado58
  L_Le_Teclado59
  L_Le_Teclado60
  L_Le_Teclado61
  L_Le_Teclado62
  L_Le_Teclado63
  L_Le_Teclado64
  L_Le_Teclado65
  L_Le_Teclado66
  L_Le_Teclado67
  L_Le_Teclado68
  L_Le_Teclado69
  L_Le_Teclado70
  L_Le_Teclado71
  L_Le_Teclado72
  L_Le_Teclado73
  L_Le_Teclado74
  L_Le_Teclado75
  L_Le_Teclado76
  L_Move_Delay77
  L_Print_World78
  L_Print_World79
  L_Print_World80
  L_Print_World81
  L_Print_World82
  L_Print_World83
  L_Create_World84
  L_Create_World85
  L_Create_World86
  L_Create_World87
  L_Create_World88
  L_Create_World89
  L_Create_World90
  L_Create_World91
  L_update_pacman_orientation92
  L_update_pacman_orientation93
  L_update_pacman_orientation94
  L_update_pacman_orientation95
  L_update_pacman_orientation96
  L_update_pacman_orientation97
  L_update_pacman_orientation98
  L_update_pacman99
  L_update_pacman100
  L_update_pacman101
  L_update_pacman102
  L_update_pacman103
  L_update_pacman104
  L_update_pacman105
  L_update_pacman106
  L_update_pacman107
  L_update_pacman108
  L_update_pacman109
  L_update_pacman110
  L_update_pacman111
  L_update_pacman112
  L_Write_EEPROM113
  L_Start_Screen114
  L_Start_Screen115
  L_Finish116
  L_Finish117
  L_Finish118
  L_Finish119
  L_Finish120
  L_Finish121
  L_Finish122
  L_Finish123
  L_main124
  L_main125
  L_main126
  L_main127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L__main138
  _print
  _print_text
  _getSprite
  _printCoordinate
  _InitTimer2
  _external_interrupt
  _move_ghost
  L__move_ghost139
  L__move_ghost140
  L__move_ghost141
  L__move_ghost142
  L__move_ghost143
  L__move_ghost144
  _interrupt
  L__interrupt145
  L__interrupt146
  L__interrupt147
  _Le_Teclado
  _Pula_Linha
  _Move_Delay
  _myrand
  _mysrand
  _Read_RTC
  _Print_World
  L__Print_World148
  L__Print_World149
  _Create_World
  L__Create_World150
  L__Create_World151
  L__Create_World152
  L__Create_World153
  _update_pacman_orientation
  L__update_pacman_orientation154
  L__update_pacman_orientation155
  L__update_pacman_orientation156
  L__update_pacman_orientation157
  _update_pacman
  L__update_pacman158
  L__update_pacman159
  L__update_pacman160
  L__update_pacman161
  L__update_pacman162
  L__update_pacman163
  L__update_pacman164
  _Write_EEPROM
  _Write_EEPROM_Int
  _Read_EEPROM
  _Read_EEPROM_Int
  _Transform_Time
  _Start_Screen
  _Finish
  L__Finish165
  L__Finish166
  _main
  L__main167
  L__main168
  L_Delay_10us0
  L_Delay_22us1
  L_Delay_50us2
  L_Delay_80us3
  L_Delay_500us4
  L_Delay_5500us5
  L_Delay_8ms6
  L_Delay_100ms7
  L_Delay_10ms8
  L_Delay_1sec9
  L____Boot_Delay4k10
  L____Boot_Delay8k11
  L____Boot_Delay12k12
  L____Boot_Delay16k13
  L____Boot_Delay24k14
  L____Boot_Delay32k15
  L____Boot_Delay48k16
  L____Boot_Delay64k17
  L____Boot_Delay128k18
  L_Delay_Cyc19
  L_Delay_Cyc20
  L_VDelay_ms21
  L_VDelay_ms22
  L_VDelay_ms23
  L_VDelay_Advanced_ms24
  L_VDelay_Advanced_ms25
  L_VDelay_Advanced_ms26
  _Get_Fosc_kHz
  _Delay_1us
  _Delay_10us
  _Delay_22us
  _Delay_50us
  _Delay_80us
  _Delay_500us
  _Delay_5500us
  _Delay_8ms
  _Delay_100ms
  _Delay_10ms
  _Delay_1sec
  ____Boot_Delay4k
  ____Boot_Delay8k
  ____Boot_Delay12k
  ____Boot_Delay16k
  ____Boot_Delay24k
  ____Boot_Delay32k
  ____Boot_Delay48k
  ____Boot_Delay64k
  ____Boot_Delay128k
  _Delay_Cyc
  _VDelay_ms
  L__VDelay_ms27
  L__VDelay_ms28
  L__VDelay_ms29
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms30
  L__VDelay_Advanced_ms31
  L__VDelay_Advanced_ms32
  L_I2C1_Is_Idle0
  L_I2C1_Is_Idle1
  L_I2C1_Start2
  L_I2C1_Start3
  L_I2C1_Start4
  L_I2C1_Start5
  L_I2C1_Start6
  L_I2C1_Start7
  L_I2C1_Start8
  L_I2C1_Start9
  L_I2C1_Repeated_Start10
  L_I2C1_Repeated_Start11
  L_I2C1_Rd12
  L_I2C1_Rd13
  L_I2C1_Rd14
  L_I2C1_Rd15
  L_I2C1_Rd16
  L_I2C1_Rd17
  L_I2C1_Wr18
  L_I2C1_Wr19
  L_I2C1_Wr20
  L_I2C1_Wr21
  L_I2C1_Wr22
  L_I2C1_Wr23
  _I2C1_Init
  _I2C1_Is_Idle
  _I2C1_Start
  L__I2C1_Start24
  L__I2C1_Start25
  _I2C1_Repeated_Start
  _I2C1_Rd
  _I2C1_Wr
  _I2C1_Stop
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  _Div_8x8_U
  _Div_16x16_U
  _Div_16x16_S_L
  _Div_16x16_S
  _Div_8x8_S
  _Mul_8x8_S
  _Mul_16x16_U
  _Mul_16x16_S
  _SDIV3232L
  _COMFREM
  _Div_32x32_S
  _Div_32x32_U
  _Mul_32x32_U
  _Mul_32x32_S
  _CC2D_Loop1
  _CC2DL_Loop1
  L_longjmp2
  ___CC2D
  ___CC2DW
  _____DoIFC
  _Swap
  _setjmp
  _longjmp
  L_T6963C_waitReady0
  L_T6963C_waitReady1
  L_T6963C_fill2
  L_T6963C_fill3
  L_T6963C_image4
  L_T6963C_image5
  L_T6963C_sprite6
  L_T6963C_sprite7
  L_T6963C_sprite8
  L_T6963C_sprite9
  L_T6963C_sprite10
  L_T6963C_sprite11
  L_T6963C_write_text12
  L_T6963C_write_text13
  L_T6963C_circle14
  L_T6963C_circle15
  L_T6963C_circle16
  L_T6963C_circle17
  L_T6963C_box18
  L_T6963C_box19
  L_T6963C_line20
  L_T6963C_line21
  L_T6963C_line22
  L_T6963C_line23
  L_T6963C_line24
  L_T6963C_line25
  L_T6963C_line26
  L_T6963C_line27
  L_T6963C_line28
  L_T6963C_line29
  L_T6963C_line30
  L_T6963C_line31
  L_T6963C_dot32
  L_T6963C_dot33
  L_T6963C_dot34
  L_T6963C_dot35
  _T6963C_waitReady
  _T6963C_writeData
  _T6963C_writeCommand
  _T6963C_fill
  L__T6963C_fill36
  _T6963C_image
  L__T6963C_image37
  _T6963C_sprite
  L__T6963C_sprite38
  _T6963C_set_cursor
  _T6963C_write_char
  _T6963C_write_text
  _T6963C_circle
  L__T6963C_circle39
  L__T6963C_circle40
  _T6963C_box
  L__T6963C_box41
  _T6963C_rectangle
  _T6963C_line
  L__T6963C_line42
  L__T6963C_line43
  L__T6963C_line44
  L__T6963C_line45
  L__T6963C_line46
  L__T6963C_line47
  L__T6963C_line48
  _T6963C_setPtr
  _T6963C_dot
  L__T6963C_dot49
  L__T6963C_dot50
  L__T6963C_dot51
  L__T6963C_dot52
  _T6963C_init
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  _UART1_Init
  _UART1_Data_Ready
  _UART1_Read
  _UART1_Tx_Idle
  _UART1_Write
  _UART1_Write_Text
  _UART1_Read_Text
  _UART_Set_Active
  L_getSprite0
  L_getSprite1
  L_getSprite2
  L_getSprite3
  L_getSprite4
  L_getSprite5
  L_getSprite6
  L_getSprite7
  L_getSprite8
  L_getSprite9
  L_getSprite10
  L_getSprite11
  L_getSprite12
  L_move_ghost13
  L_move_ghost14
  L_move_ghost15
  L_move_ghost16
  L_move_ghost17
  L_move_ghost18
  L_move_ghost19
  L_move_ghost20
  L_move_ghost21
  L_move_ghost22
  L_move_ghost23
  L_move_ghost24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_Le_Teclado29
  L_Le_Teclado30
  L_Le_Teclado31
  L_Le_Teclado32
  L_Le_Teclado33
  L_Le_Teclado34
  L_Le_Teclado35
  L_Le_Teclado36
  L_Le_Teclado37
  L_Le_Teclado38
  L_Le_Teclado39
  L_Le_Teclado40
  L_Le_Teclado41
  L_Le_Teclado42
  L_Le_Teclado43
  L_Le_Teclado44
  L_Le_Teclado45
  L_Le_Teclado46
  L_Le_Teclado47
  L_Le_Teclado48
  L_Le_Teclado49
  L_Le_Teclado50
  L_Le_Teclado51
  L_Le_Teclado52
  L_Le_Teclado53
  L_Le_Teclado54
  L_Le_Teclado55
  L_Le_Teclado56
  L_Le_Teclado57
  L_Le_Teclado58
  L_Le_Teclado59
  L_Le_Teclado60
  L_Le_Teclado61
  L_Le_Teclado62
  L_Le_Teclado63
  L_Le_Teclado64
  L_Le_Teclado65
  L_Le_Teclado66
  L_Le_Teclado67
  L_Le_Teclado68
  L_Le_Teclado69
  L_Le_Teclado70
  L_Le_Teclado71
  L_Le_Teclado72
  L_Le_Teclado73
  L_Le_Teclado74
  L_Le_Teclado75
  L_Le_Teclado76
  L_Move_Delay77
  L_Print_World78
  L_Print_World79
  L_Print_World80
  L_Print_World81
  L_Print_World82
  L_Print_World83
  L_Create_World84
  L_Create_World85
  L_Create_World86
  L_Create_World87
  L_Create_World88
  L_Create_World89
  L_Create_World90
  L_Create_World91
  L_update_pacman_orientation92
  L_update_pacman_orientation93
  L_update_pacman_orientation94
  L_update_pacman_orientation95
  L_update_pacman_orientation96
  L_update_pacman_orientation97
  L_update_pacman_orientation98
  L_update_pacman99
  L_update_pacman100
  L_update_pacman101
  L_update_pacman102
  L_update_pacman103
  L_update_pacman104
  L_update_pacman105
  L_update_pacman106
  L_update_pacman107
  L_update_pacman108
  L_update_pacman109
  L_update_pacman110
  L_update_pacman111
  L_update_pacman112
  L_Write_EEPROM113
  L_Start_Screen114
  L_Start_Screen115
  L_Finish116
  L_Finish117
  L_Finish118
  L_Finish119
  L_Finish120
  L_Finish121
  L_Finish122
  L_Finish123
  L_main124
  L_main125
  L_main126
  L_main127
  L_main128
  L_main129
  L_main130
  L_main131
  L_main132
  L_main133
  L_main134
  L_main135
  L_main136
  L_main137
  L__main138
  _print
  _print_text
  _getSprite
  _printCoordinate
  _InitTimer2
  _external_interrupt
  _move_ghost
  L__move_ghost139
  L__move_ghost140
  L__move_ghost141
  L__move_ghost142
  L__move_ghost143
  L__move_ghost144
  _interrupt
  L__interrupt145
  L__interrupt146
  L__interrupt147
  _Le_Teclado
  _Pula_Linha
  _Move_Delay
  _myrand
  _mysrand
  _Read_RTC
  _Print_World
  L__Print_World148
  L__Print_World149
  _Create_World
  L__Create_World150
  L__Create_World151
  L__Create_World152
  L__Create_World153
  _update_pacman_orientation
  L__update_pacman_orientation154
  L__update_pacman_orientation155
  L__update_pacman_orientation156
  L__update_pacman_orientation157
  _update_pacman
  L__update_pacman158
  L__update_pacman159
  L__update_pacman160
  L__update_pacman161
  L__update_pacman162
  L__update_pacman163
  L__update_pacman164
  _Write_EEPROM
  _Write_EEPROM_Int
  _Read_EEPROM
  _Read_EEPROM_Int
  _Transform_Time
  _Start_Screen
  _Finish
  L__Finish165
  L__Finish166
  _main
  L__main167
  L__main168
